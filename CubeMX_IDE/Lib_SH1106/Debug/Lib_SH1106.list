
Lib_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08006340  08006340  00016340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800694c  0800694c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800694c  0800694c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800694c  0800694c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200001dc  08006b30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006b30  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c6  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c05  00000000  00000000  0002a7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ff  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab29  00000000  00000000  0004567f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a4b  00000000  00000000  000501a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  000d3c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006328 	.word	0x08006328

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006328 	.word	0x08006328

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_GPIO_Init+0x70>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C2_Init+0x50>)
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_I2C2_Init+0x54>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C2_Init+0x50>)
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_I2C2_Init+0x58>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C2_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_I2C2_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_I2C2_Init+0x50>)
 8001016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MX_I2C2_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_I2C2_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <MX_I2C2_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_I2C2_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_I2C2_Init+0x50>)
 8001036:	f001 fc21 	bl	800287c <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 fa79 	bl	8001536 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000204 	.word	0x20000204
 800104c:	40005800 	.word	0x40005800
 8001050:	00061a80 	.word	0x00061a80

08001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d124      	bne.n	80010be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_I2C_MspInit+0x78>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_I2C_MspInit+0x78>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_I2C_MspInit+0x78>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800108c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <HAL_I2C_MspInit+0x7c>)
 80010a2:	f001 fa67 	bl	8002574 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_I2C_MspInit+0x78>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_I2C_MspInit+0x78>)
 80010ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_I2C_MspInit+0x78>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005800 	.word	0x40005800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f001 f8e1 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f913 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff ff4f 	bl	8000f84 <MX_GPIO_Init>
  MX_I2C2_Init();
 80010e6:	f7ff ff87 	bl	8000ff8 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TOLED* oled;
  TOLED* oledBuffer;

  oled = J3_SH1106_new(&hi2c2,0x78);
 80010ea:	2178      	movs	r1, #120	; 0x78
 80010ec:	4884      	ldr	r0, [pc, #528]	; (8001300 <main+0x22c>)
 80010ee:	f000 fbbb 	bl	8001868 <J3_SH1106_new>
 80010f2:	60f8      	str	r0, [r7, #12]
  oledBuffer = J3_SH1106_new(NULL,0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fbb6 	bl	8001868 <J3_SH1106_new>
 80010fc:	60b8      	str	r0, [r7, #8]

  J3_SH1106_offDisplay(oled);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fbe4 	bl	80018cc <J3_SH1106_offDisplay>
  J3_SH1106_setNormal(oled);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fc3f 	bl	8001988 <J3_SH1106_setNormal>
  J3_SH1106_setContrast(oled,255);
 800110a:	21ff      	movs	r1, #255	; 0xff
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 fbe9 	bl	80018e4 <J3_SH1106_setContrast>
  //J3_SH1106_onDisplay(oled);
  J3_SH1106_setDisplayClock(oled);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 fc44 	bl	80019a0 <J3_SH1106_setDisplayClock>
  J3_SH1106_clrDisplay(oled);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 fbf6 	bl	800190a <J3_SH1106_clrDisplay>

  uint8_t x = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
  uint8_t y = 31;
 8001122:	231f      	movs	r3, #31
 8001124:	71bb      	strb	r3, [r7, #6]
  uint16_t cont = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	80bb      	strh	r3, [r7, #4]

  uint8_t play1_x = 4;
 800112a:	2304      	movs	r3, #4
 800112c:	70fb      	strb	r3, [r7, #3]
  uint8_t play1_y = 30;
 800112e:	231e      	movs	r3, #30
 8001130:	75fb      	strb	r3, [r7, #23]

  uint8_t play2_x = 127-4;
 8001132:	237b      	movs	r3, #123	; 0x7b
 8001134:	70bb      	strb	r3, [r7, #2]
  uint8_t play2_y = 30;
 8001136:	231e      	movs	r3, #30
 8001138:	75bb      	strb	r3, [r7, #22]
  //J3_SH1106_setPixel(oled,127,63);
 // desenhaBola(oled,1,3);
  //HAL_Delay(2000);
  //apagaBola(oled,1,3);

  uint8_t bolaX = 63;
 800113a:	233f      	movs	r3, #63	; 0x3f
 800113c:	757b      	strb	r3, [r7, #21]
  uint8_t bolaY = 3;
 800113e:	2303      	movs	r3, #3
 8001140:	753b      	strb	r3, [r7, #20]
  int8_t bolaX_vel = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	74fb      	strb	r3, [r7, #19]
  int8_t bolaY_vel = 3;
 8001146:	2303      	movs	r3, #3
 8001148:	74bb      	strb	r3, [r7, #18]

  J3_SH1106_draw(oled, (uint8_t *)pong, 0,0,128,32);
 800114a:	2320      	movs	r3, #32
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	2200      	movs	r2, #0
 8001156:	496b      	ldr	r1, [pc, #428]	; (8001304 <main+0x230>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 ffd2 	bl	8002102 <J3_SH1106_draw>
  HAL_Delay(7000);
 800115e:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001162:	f001 f8ff 	bl	8002364 <HAL_Delay>
  J3_SH1106_clrDisplayByBuffer(oled);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 fd7a 	bl	8001c60 <J3_SH1106_clrDisplayByBuffer>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//J3_SH1106_clrDisplay(oled);
	J3_SH1106_clrBuffer(oledBuffer);
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 fbfb 	bl	8001968 <J3_SH1106_clrBuffer>


	J3_SH1106_setBox(oledBuffer, 0,0,127,63,0);
 8001172:	2300      	movs	r3, #0
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	233f      	movs	r3, #63	; 0x3f
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	237f      	movs	r3, #127	; 0x7f
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f001 f819 	bl	80021b8 <J3_SH1106_setBox>
	J3_SH1106_lineDash(oledBuffer, 63,0,63,127);
 8001186:	237f      	movs	r3, #127	; 0x7f
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	233f      	movs	r3, #63	; 0x3f
 800118c:	2200      	movs	r2, #0
 800118e:	213f      	movs	r1, #63	; 0x3f
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f000 fe8a 	bl	8001eaa <J3_SH1106_lineDash>
	J3_SH1106_lineDash(oledBuffer, 64,0,64,127);
 8001196:	237f      	movs	r3, #127	; 0x7f
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2340      	movs	r3, #64	; 0x40
 800119c:	2200      	movs	r2, #0
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f000 fe82 	bl	8001eaa <J3_SH1106_lineDash>


	desenhaBola(oledBuffer, bolaX, bolaY);
 80011a6:	7d3a      	ldrb	r2, [r7, #20]
 80011a8:	7d7b      	ldrb	r3, [r7, #21]
 80011aa:	4619      	mov	r1, r3
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f000 f8f0 	bl	8001392 <desenhaBola>
	desenhaPlay(oledBuffer, play1_x, play1_y);
 80011b2:	7dfa      	ldrb	r2, [r7, #23]
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	4619      	mov	r1, r3
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f000 f944 	bl	8001446 <desenhaPlay>
	desenhaPlay(oledBuffer, play2_x, play2_y);
 80011be:	7dba      	ldrb	r2, [r7, #22]
 80011c0:	78bb      	ldrb	r3, [r7, #2]
 80011c2:	4619      	mov	r1, r3
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f000 f93e 	bl	8001446 <desenhaPlay>

	J3_SH1106_fillBuffer2(oled, oledBuffer);
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 fbf7 	bl	80019c0 <J3_SH1106_fillBuffer2>
	HAL_Delay(20);
 80011d2:	2014      	movs	r0, #20
 80011d4:	f001 f8c6 	bl	8002364 <HAL_Delay>

	bolaX = bolaX + bolaX_vel;
 80011d8:	7cfa      	ldrb	r2, [r7, #19]
 80011da:	7d7b      	ldrb	r3, [r7, #21]
 80011dc:	4413      	add	r3, r2
 80011de:	757b      	strb	r3, [r7, #21]
	bolaY = bolaY + bolaY_vel;
 80011e0:	7cba      	ldrb	r2, [r7, #18]
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	753b      	strb	r3, [r7, #20]

	if(bolaX >= 120){
 80011e8:	7d7b      	ldrb	r3, [r7, #21]
 80011ea:	2b77      	cmp	r3, #119	; 0x77
 80011ec:	d91c      	bls.n	8001228 <main+0x154>
	  if(bolaY >= (play2_y-5) && bolaY <= (play2_y+5)){
 80011ee:	7d3a      	ldrb	r2, [r7, #20]
 80011f0:	7dbb      	ldrb	r3, [r7, #22]
 80011f2:	3b05      	subs	r3, #5
 80011f4:	429a      	cmp	r2, r3
 80011f6:	db0c      	blt.n	8001212 <main+0x13e>
 80011f8:	7d3a      	ldrb	r2, [r7, #20]
 80011fa:	7dbb      	ldrb	r3, [r7, #22]
 80011fc:	3305      	adds	r3, #5
 80011fe:	429a      	cmp	r2, r3
 8001200:	dc07      	bgt.n	8001212 <main+0x13e>
	    bolaX_vel = bolaX_vel * (-1);
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	425b      	negs	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	74fb      	strb	r3, [r7, #19]
	    bolaY_vel = bolaY_vel * (-1);
 800120a:	7cbb      	ldrb	r3, [r7, #18]
 800120c:	425b      	negs	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	74bb      	strb	r3, [r7, #18]
	  }
      if(bolaX >= 123){
 8001212:	7d7b      	ldrb	r3, [r7, #21]
 8001214:	2b7a      	cmp	r3, #122	; 0x7a
 8001216:	d907      	bls.n	8001228 <main+0x154>
		  bolaX = 64;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	757b      	strb	r3, [r7, #21]
		  bolaX_vel = bolaX_vel * (-1);
 800121c:	7cfb      	ldrb	r3, [r7, #19]
 800121e:	425b      	negs	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	74fb      	strb	r3, [r7, #19]
		  bolaX_vel = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	74fb      	strb	r3, [r7, #19]
	  }
	}

	if(bolaX <= 7){
 8001228:	7d7b      	ldrb	r3, [r7, #21]
 800122a:	2b07      	cmp	r3, #7
 800122c:	d81c      	bhi.n	8001268 <main+0x194>
	  if(bolaY >= (play1_y-5) && bolaY <= (play1_y+5)){
 800122e:	7d3a      	ldrb	r2, [r7, #20]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3b05      	subs	r3, #5
 8001234:	429a      	cmp	r2, r3
 8001236:	db0c      	blt.n	8001252 <main+0x17e>
 8001238:	7d3a      	ldrb	r2, [r7, #20]
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3305      	adds	r3, #5
 800123e:	429a      	cmp	r2, r3
 8001240:	dc07      	bgt.n	8001252 <main+0x17e>
	    bolaX_vel = bolaX_vel * (-1);
 8001242:	7cfb      	ldrb	r3, [r7, #19]
 8001244:	425b      	negs	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	74fb      	strb	r3, [r7, #19]
	    bolaY_vel = bolaY_vel * (-1);
 800124a:	7cbb      	ldrb	r3, [r7, #18]
 800124c:	425b      	negs	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	74bb      	strb	r3, [r7, #18]
	  }
      if (bolaX <= 4){
 8001252:	7d7b      	ldrb	r3, [r7, #21]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d807      	bhi.n	8001268 <main+0x194>
		   bolaX = 63;
 8001258:	233f      	movs	r3, #63	; 0x3f
 800125a:	757b      	strb	r3, [r7, #21]
		   bolaX_vel = bolaX_vel * (-1);
 800125c:	7cfb      	ldrb	r3, [r7, #19]
 800125e:	425b      	negs	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	74fb      	strb	r3, [r7, #19]
		   bolaX_vel = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	74fb      	strb	r3, [r7, #19]
	  }
	}

	if(bolaY >= 61){
 8001268:	7d3b      	ldrb	r3, [r7, #20]
 800126a:	2b3c      	cmp	r3, #60	; 0x3c
 800126c:	d905      	bls.n	800127a <main+0x1a6>
	  bolaY = 61;
 800126e:	233d      	movs	r3, #61	; 0x3d
 8001270:	753b      	strb	r3, [r7, #20]
	  bolaY_vel = bolaY_vel * (-1);
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	425b      	negs	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	74bb      	strb	r3, [r7, #18]
	}
	if(bolaY <= 2){
 800127a:	7d3b      	ldrb	r3, [r7, #20]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d805      	bhi.n	800128c <main+0x1b8>
	  bolaY = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	753b      	strb	r3, [r7, #20]
	  bolaY_vel = bolaY_vel * (-1);
 8001284:	7cbb      	ldrb	r3, [r7, #18]
 8001286:	425b      	negs	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	74bb      	strb	r3, [r7, #18]
	}

	 if(bolaX >= 72){
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	2b47      	cmp	r3, #71	; 0x47
 8001290:	d917      	bls.n	80012c2 <main+0x1ee>
		if(play2_y > bolaY){
 8001292:	7dba      	ldrb	r2, [r7, #22]
 8001294:	7d3b      	ldrb	r3, [r7, #20]
 8001296:	429a      	cmp	r2, r3
 8001298:	d907      	bls.n	80012aa <main+0x1d6>
		  play2_y = play2_y - 2;
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3b02      	subs	r3, #2
 800129e:	75bb      	strb	r3, [r7, #22]
		  if(play2_y <= 6)
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d801      	bhi.n	80012aa <main+0x1d6>
		    play2_y = 6;
 80012a6:	2306      	movs	r3, #6
 80012a8:	75bb      	strb	r3, [r7, #22]
		}
		if(play2_y < bolaY){
 80012aa:	7dba      	ldrb	r2, [r7, #22]
 80012ac:	7d3b      	ldrb	r3, [r7, #20]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d207      	bcs.n	80012c2 <main+0x1ee>
    	  play2_y = play2_y + 2;
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	3302      	adds	r3, #2
 80012b6:	75bb      	strb	r3, [r7, #22]
		  if(play2_y > 58 )
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	2b3a      	cmp	r3, #58	; 0x3a
 80012bc:	d901      	bls.n	80012c2 <main+0x1ee>
		    play2_y = 58;
 80012be:	233a      	movs	r3, #58	; 0x3a
 80012c0:	75bb      	strb	r3, [r7, #22]
		}
	 }

	 if(bolaX <= 55){
 80012c2:	7d7b      	ldrb	r3, [r7, #21]
 80012c4:	2b37      	cmp	r3, #55	; 0x37
 80012c6:	f63f af51 	bhi.w	800116c <main+0x98>
		if(play1_y > bolaY){
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	7d3b      	ldrb	r3, [r7, #20]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d907      	bls.n	80012e2 <main+0x20e>
		  play1_y = play1_y - 2;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	3b02      	subs	r3, #2
 80012d6:	75fb      	strb	r3, [r7, #23]
		  if(play1_y <= 6)
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d801      	bhi.n	80012e2 <main+0x20e>
		    play1_y = 6;
 80012de:	2306      	movs	r3, #6
 80012e0:	75fb      	strb	r3, [r7, #23]
		}
		if(play1_y < bolaY){
 80012e2:	7dfa      	ldrb	r2, [r7, #23]
 80012e4:	7d3b      	ldrb	r3, [r7, #20]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	f4bf af40 	bcs.w	800116c <main+0x98>
    	  play1_y = play1_y + 2;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	3302      	adds	r3, #2
 80012f0:	75fb      	strb	r3, [r7, #23]
		  if(play1_y > 58 )
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	2b3a      	cmp	r3, #58	; 0x3a
 80012f6:	f67f af39 	bls.w	800116c <main+0x98>
		    play1_y = 58;
 80012fa:	233a      	movs	r3, #58	; 0x3a
 80012fc:	75fb      	strb	r3, [r7, #23]
	J3_SH1106_clrBuffer(oledBuffer);
 80012fe:	e735      	b.n	800116c <main+0x98>
 8001300:	20000204 	.word	0x20000204
 8001304:	08006350 	.word	0x08006350

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	; 0x40
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fb32 	bl	8003980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001346:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fedd 	bl	8003110 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800135c:	f000 f8eb 	bl	8001536 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f948 	bl	8003610 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001386:	f000 f8d6 	bl	8001536 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3740      	adds	r7, #64	; 0x40
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <desenhaBola>:

/* USER CODE BEGIN 4 */
void desenhaBola(TOLED* _oled, uint8_t _x, uint8_t _y){
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
 800139e:	4613      	mov	r3, r2
 80013a0:	70bb      	strb	r3, [r7, #2]
  J3_SH1106_setPixel(_oled,_x-1,_y-1);
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2d9      	uxtb	r1, r3
 80013a8:	78bb      	ldrb	r3, [r7, #2]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fb9c 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x-1,_y);
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	78ba      	ldrb	r2, [r7, #2]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fb94 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x-1,_y+1);
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b2d9      	uxtb	r1, r3
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fb8a 	bl	8001aee <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_x,_y-1);
 80013da:	78bb      	ldrb	r3, [r7, #2]
 80013dc:	3b01      	subs	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fb82 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x,_y);
 80013ea:	78ba      	ldrb	r2, [r7, #2]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fb7c 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x,_y+1);
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fb74 	bl	8001aee <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_x+1,_y-1);
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	3301      	adds	r3, #1
 800140a:	b2d9      	uxtb	r1, r3
 800140c:	78bb      	ldrb	r3, [r7, #2]
 800140e:	3b01      	subs	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fb6a 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x+1,_y);
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	3301      	adds	r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	78ba      	ldrb	r2, [r7, #2]
 8001422:	4619      	mov	r1, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fb62 	bl	8001aee <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_x+1,_y+1);
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	3301      	adds	r3, #1
 800142e:	b2d9      	uxtb	r1, r3
 8001430:	78bb      	ldrb	r3, [r7, #2]
 8001432:	3301      	adds	r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fb58 	bl	8001aee <J3_SH1106_setPixel>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <desenhaPlay>:

void desenhaPlay(TOLED* _oled, uint8_t _x, uint8_t _y){
 8001446:	b590      	push	{r4, r7, lr}
 8001448:	b087      	sub	sp, #28
 800144a:	af02      	add	r7, sp, #8
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	4613      	mov	r3, r2
 8001454:	70bb      	strb	r3, [r7, #2]
  const play_altura = 5;
 8001456:	2305      	movs	r3, #5
 8001458:	60fb      	str	r3, [r7, #12]
  const play_largura = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
  J3_SH1106_line(_oled, _x-play_largura,_y-play_altura,_x+play_largura,_y-play_altura);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b2d9      	uxtb	r1, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	78ba      	ldrb	r2, [r7, #2]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	b2d8      	uxtb	r0, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	4413      	add	r3, r2
 800147a:	b2dc      	uxtb	r4, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	78ba      	ldrb	r2, [r7, #2]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	4602      	mov	r2, r0
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fc26 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x-play_largura,_y-play_altura,_x-play_largura,_y+play_altura);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	78ba      	ldrb	r2, [r7, #2]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2d8      	uxtb	r0, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b2dc      	uxtb	r4, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	4413      	add	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	4602      	mov	r2, r0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fc0c 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x-play_largura,_y+play_altura,_x+play_largura,_y+play_altura);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b2d9      	uxtb	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	78bb      	ldrb	r3, [r7, #2]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	4413      	add	r3, r2
 80014e2:	b2dc      	uxtb	r4, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	4413      	add	r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4623      	mov	r3, r4
 80014f2:	4602      	mov	r2, r0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fbf2 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x+play_largura,_y+play_altura,_x+play_largura,_y-play_altura);
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	4413      	add	r3, r2
 8001502:	b2d9      	uxtb	r1, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	4413      	add	r3, r2
 800150c:	b2d8      	uxtb	r0, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	4413      	add	r3, r2
 8001516:	b2dc      	uxtb	r4, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4623      	mov	r3, r4
 8001526:	4602      	mov	r2, r0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fbd8 	bl	8001cde <J3_SH1106_line>
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153a:	b672      	cpsid	i
}
 800153c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153e:	e7fe      	b.n	800153e <Error_Handler+0x8>

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_MspInit+0x5c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_MspInit+0x5c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_MspInit+0x5c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x5c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_MspInit+0x5c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_MspInit+0x60>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_MspInit+0x60>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 fe9f 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
	return 1;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_kill>:

int _kill(int pid, int sig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800160a:	f002 f987 	bl	800391c <__errno>
 800160e:	4603      	mov	r3, r0
 8001610:	2216      	movs	r2, #22
 8001612:	601a      	str	r2, [r3, #0]
	return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_exit>:

void _exit (int status)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe7 	bl	8001600 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001632:	e7fe      	b.n	8001632 <_exit+0x12>

08001634 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e00a      	b.n	800165c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001646:	f3af 8000 	nop.w
 800164a:	4601      	mov	r1, r0
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf0      	blt.n	8001646 <_read+0x12>
	}

return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e009      	b.n	8001694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf1      	blt.n	8001680 <_write+0x12>
	}
	return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_close>:

int _close(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	605a      	str	r2, [r3, #4]
	return 0;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
	return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f002 f8f0 	bl	800391c <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400
 800176c:	200001f8 	.word	0x200001f8
 8001770:	20000270 	.word	0x20000270

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <j3_sh1106_sendCmd>:
};

typedef struct TOLED TOLED;

/* Enviar comando para o display */
void j3_sh1106_sendCmd(TOLED* _oled, uint8_t _cmd){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d012      	beq.n	80017ba <j3_sh1106_sendCmd+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x00;
 8001794:	2300      	movs	r3, #0
 8001796:	733b      	strb	r3, [r7, #12]
    buf[1] = _cmd;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	791b      	ldrb	r3, [r3, #4]
 80017a4:	b299      	uxth	r1, r3
 80017a6:	f107 020c 	add.w	r2, r7, #12
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2302      	movs	r3, #2
 80017b2:	f001 f9a7 	bl	8002b04 <HAL_I2C_Master_Transmit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <j3_sh1106_sendDado>:

/* Enviar dados para o display */
void j3_sh1106_sendDado(TOLED* _oled, uint8_t _dado){
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d012      	beq.n	80017fc <j3_sh1106_sendDado+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x40;
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	733b      	strb	r3, [r7, #12]
    buf[1] = _dado;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	b299      	uxth	r1, r3
 80017e8:	f107 020c 	add.w	r2, r7, #12
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2302      	movs	r3, #2
 80017f4:	f001 f986 	bl	8002b04 <HAL_I2C_Master_Transmit>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <j3_sh1106_getIndexBuffer>:

/* Retorna i de X e Y */
uint16_t j3_sh1106_getIndexBuffer(uint8_t _x, uint8_t _y){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
  return (_y * 128) + _x;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	b29b      	uxth	r3, r3
 8001818:	01db      	lsls	r3, r3, #7
 800181a:	b29a      	uxth	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b29b      	uxth	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <j3_sh1106_getXBuffer>:
/* Retorna X de i */
uint8_t j3_sh1106_getXBuffer(uint16_t _i){
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	80fb      	strh	r3, [r7, #6]
  return (_i % 128);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001840:	b2db      	uxtb	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <j3_sh1106_getYBuffer>:
/* Retorna Y de i */
uint8_t j3_sh1106_getYBuffer(uint16_t _i){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  return (_i / 128);
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <J3_SH1106_new>:
}
*/



TOLED* J3_SH1106_new(I2C_HandleTypeDef* _i2c, uint8_t _i2c_address){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  TOLED* auxOLED;

  auxOLED = malloc(sizeof(TOLED));
 8001874:	200c      	movs	r0, #12
 8001876:	f002 f87b 	bl	8003970 <malloc>
 800187a:	4603      	mov	r3, r0
 800187c:	60fb      	str	r3, [r7, #12]
  auxOLED->address = _i2c_address;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	711a      	strb	r2, [r3, #4]
  auxOLED->i2c = _i2c;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
  auxOLED->buffer = malloc(128 * 8 * sizeof(uint8_t));
 800188a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800188e:	f002 f86f 	bl	8003970 <malloc>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	609a      	str	r2, [r3, #8]
  memset(auxOLED->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 f86b 	bl	8003980 <memset>
  return auxOLED;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <J3_SH1106_onDisplay>:

void J3_SH1106_onDisplay(TOLED* _oled){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAF);                     // turn on OLED panel
 80018bc:	21af      	movs	r1, #175	; 0xaf
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff5e 	bl	8001780 <j3_sh1106_sendCmd>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <J3_SH1106_offDisplay>:

void J3_SH1106_offDisplay(TOLED* _oled){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAE) ;                     // turn off OLED panel
 80018d4:	21ae      	movs	r1, #174	; 0xae
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff52 	bl	8001780 <j3_sh1106_sendCmd>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <J3_SH1106_setContrast>:

void J3_SH1106_setContrast(TOLED* _oled, uint8_t _valContraste){// set contrast control register
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  j3_sh1106_sendCmd(_oled,0x81);
 80018f0:	2181      	movs	r1, #129	; 0x81
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff44 	bl	8001780 <j3_sh1106_sendCmd>
  j3_sh1106_sendCmd(_oled,_valContraste);
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff3f 	bl	8001780 <j3_sh1106_sendCmd>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <J3_SH1106_clrDisplay>:

void J3_SH1106_clrDisplay(TOLED* _oled){
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  J3_SH1106_offDisplay(_oled);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffda 	bl	80018cc <J3_SH1106_offDisplay>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e01a      	b.n	8001954 <J3_SH1106_clrDisplay+0x4a>
    J3_SH1106_cursorY(_oled, line);
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8b8 	bl	8001a98 <J3_SH1106_cursorY>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001928:	2300      	movs	r3, #0
 800192a:	73bb      	strb	r3, [r7, #14]
 800192c:	e00b      	b.n	8001946 <J3_SH1106_clrDisplay+0x3c>
	  J3_SH1106_cursorX(_oled, x);
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f88d 	bl	8001a52 <J3_SH1106_cursorX>
	  j3_sh1106_sendDado(_oled,0x00);
 8001938:	2100      	movs	r1, #0
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff41 	bl	80017c2 <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001940:	7bbb      	ldrb	r3, [r7, #14]
 8001942:	3301      	adds	r3, #1
 8001944:	73bb      	strb	r3, [r7, #14]
 8001946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800194a:	2b00      	cmp	r3, #0
 800194c:	daef      	bge.n	800192e <J3_SH1106_clrDisplay+0x24>
  for (uint8_t line = 0 ; line <= 7; line++){
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	3301      	adds	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d9e1      	bls.n	800191e <J3_SH1106_clrDisplay+0x14>
	}
  }
  J3_SH1106_onDisplay(_oled);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffaa 	bl	80018b4 <J3_SH1106_onDisplay>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <J3_SH1106_clrBuffer>:

void J3_SH1106_clrBuffer(TOLED* _oled){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  memset(_oled->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f002 f800 	bl	8003980 <memset>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <J3_SH1106_setNormal>:

void J3_SH1106_setDisplayLine(TOLED* _oled) {
  j3_sh1106_sendCmd(_oled, 0x40) ;
}

void J3_SH1106_setNormal(TOLED* _oled){// set
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xA6);
 8001990:	21a6      	movs	r1, #166	; 0xa6
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fef4 	bl	8001780 <j3_sh1106_sendCmd>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <J3_SH1106_setDisplayClock>:

void J3_SH1106_setReverse(TOLED* _oled){// set
  j3_sh1106_sendCmd(_oled, 0xA7);
}

void J3_SH1106_setDisplayClock(TOLED* _oled){// set
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xD5);
 80019a8:	21d5      	movs	r1, #213	; 0xd5
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fee8 	bl	8001780 <j3_sh1106_sendCmd>
  //j3_sh1106_sendCmd(_oled, 0xF0);
  j3_sh1106_sendCmd(_oled, 0x00);
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fee4 	bl	8001780 <j3_sh1106_sendCmd>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <J3_SH1106_fillBuffer2>:
	  }
    }
  }
}

void J3_SH1106_fillBuffer2(TOLED* _oled, TOLED* _oledBuffer){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint8_t y = 0, x = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	737b      	strb	r3, [r7, #13]
 80019ce:	2300      	movs	r3, #0
 80019d0:	733b      	strb	r3, [r7, #12]
  for(uint16_t i = 0; i < 1024; i++){
 80019d2:	2300      	movs	r3, #0
 80019d4:	81fb      	strh	r3, [r7, #14]
 80019d6:	e033      	b.n	8001a40 <J3_SH1106_fillBuffer2+0x80>
    if(_oled->buffer[i] != _oledBuffer->buffer[i]){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	4413      	add	r3, r2
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	440b      	add	r3, r1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d024      	beq.n	8001a3a <J3_SH1106_fillBuffer2+0x7a>
      x = j3_sh1106_getXBuffer(i);
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff1b 	bl	800182e <j3_sh1106_getXBuffer>
 80019f8:	4603      	mov	r3, r0
 80019fa:	733b      	strb	r3, [r7, #12]
      y = j3_sh1106_getYBuffer(i);
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff24 	bl	800184c <j3_sh1106_getYBuffer>
 8001a04:	4603      	mov	r3, r0
 8001a06:	737b      	strb	r3, [r7, #13]
      J3_SH1106_cursorXY(_oled, x, y);
 8001a08:	7b7a      	ldrb	r2, [r7, #13]
 8001a0a:	7b3b      	ldrb	r3, [r7, #12]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f857 	bl	8001ac2 <J3_SH1106_cursorXY>
      _oled->buffer[i] = _oledBuffer->buffer[i];
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	440b      	add	r3, r1
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
      j3_sh1106_sendDado(_oled, _oled->buffer[i]);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fec4 	bl	80017c2 <j3_sh1106_sendDado>
  for(uint16_t i = 0; i < 1024; i++){
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	81fb      	strh	r3, [r7, #14]
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d3c7      	bcc.n	80019d8 <J3_SH1106_fillBuffer2+0x18>
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <J3_SH1106_cursorX>:




void J3_SH1106_cursorX(TOLED* _oled, uint8_t _address){ //Set column address for Page Addressing Mode
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
  if(_address <= 127){
 8001a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db14      	blt.n	8001a90 <J3_SH1106_cursorX+0x3e>
	_address = _address + sXOffset ;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	70fb      	strb	r3, [r7, #3]
    j3_sh1106_sendCmd(_oled, 0x10 | (_address>>4)) ; //  shift high 4
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fe80 	bl	8001780 <j3_sh1106_sendCmd>
    j3_sh1106_sendCmd(_oled, 0x0F & _address) ;      // low 4
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fe78 	bl	8001780 <j3_sh1106_sendCmd>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <J3_SH1106_cursorY>:

void J3_SH1106_cursorY(TOLED* _oled, uint8_t _page) { //Set page 0..7 Addressing Mode
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  if (_page <= 7){
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d807      	bhi.n	8001aba <J3_SH1106_cursorY+0x22>
    j3_sh1106_sendCmd(_oled, 0xB0 | _page);
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fe63 	bl	8001780 <j3_sh1106_sendCmd>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <J3_SH1106_cursorXY>:


void J3_SH1106_cursorXY(TOLED* _oled, uint8_t x, uint8_t y){ // Position cursor to column, line
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	70bb      	strb	r3, [r7, #2]
  J3_SH1106_cursorY(_oled, y) ; // Y axis = line 0-7
 8001ad2:	78bb      	ldrb	r3, [r7, #2]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffde 	bl	8001a98 <J3_SH1106_cursorY>
  J3_SH1106_cursorX(_oled, x) ; // X axis = column 0 - (sWidth - 1)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffb6 	bl	8001a52 <J3_SH1106_cursorX>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <J3_SH1106_setPixel>:
    j3_sh1106_sendDado(_oled, dado);
  }
}
*/

void J3_SH1106_setPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
 8001afa:	4613      	mov	r3, r2
 8001afc:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db4a      	blt.n	8001b9c <J3_SH1106_setPixel+0xae>
 8001b06:	78bb      	ldrb	r3, [r7, #2]
 8001b08:	2b3f      	cmp	r3, #63	; 0x3f
 8001b0a:	d847      	bhi.n	8001b9c <J3_SH1106_setPixel+0xae>
    uint8_t page = _y / 8;
 8001b0c:	78bb      	ldrb	r3, [r7, #2]
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;

    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fe73 	bl	8001804 <j3_sh1106_getIndexBuffer>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	72fb      	strb	r3, [r7, #11]
    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] | (0x01 << resto)) ){ /* Verifica se o byte esta diferente no buffer */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	2201      	movs	r2, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	4299      	cmp	r1, r3
 8001b4e:	d025      	beq.n	8001b9c <J3_SH1106_setPixel+0xae>
      _oled->buffer[auxIndex]  = (_oled->buffer[auxIndex] | (0x01 << resto));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b259      	sxtb	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	89bb      	ldrh	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff69 	bl	8001a52 <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff87 	bl	8001a98 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe13 	bl	80017c2 <j3_sh1106_sendDado>
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <J3_SH1106_setClsPixel>:

    j3_sh1106_sendDado(_oled, dado);
  }
}*/

void J3_SH1106_setClsPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db4d      	blt.n	8001c58 <J3_SH1106_setClsPixel+0xb4>
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc0:	d84a      	bhi.n	8001c58 <J3_SH1106_setClsPixel+0xb4>
    uint8_t page = _y / 8;
 8001bc2:	78bb      	ldrb	r3, [r7, #2]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;
    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe18 	bl	8001804 <j3_sh1106_getIndexBuffer>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001bd8:	78bb      	ldrb	r3, [r7, #2]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	72fb      	strb	r3, [r7, #11]

    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] & (~(0x01 << resto)) ) ){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	89bb      	ldrh	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	89bb      	ldrh	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4003      	ands	r3, r0
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d027      	beq.n	8001c58 <J3_SH1106_setClsPixel+0xb4>
      _oled->buffer[auxIndex]  = _oled->buffer[auxIndex] & (~(0x01 << resto));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	4013      	ands	r3, r2
 8001c24:	b259      	sxtb	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	89bb      	ldrh	r3, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff0b 	bl	8001a52 <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fdb5 	bl	80017c2 <j3_sh1106_sendDado>
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <J3_SH1106_clrDisplayByBuffer>:

void J3_SH1106_setChar(TOLED*_oled, unsigned char _c){

}

void J3_SH1106_clrDisplayByBuffer(TOLED* _oled){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint16_t auxIndex;
  for (uint8_t line = 0 ; line <= 7; line++){
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e02f      	b.n	8001cce <J3_SH1106_clrDisplayByBuffer+0x6e>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73bb      	strb	r3, [r7, #14]
 8001c72:	e025      	b.n	8001cc0 <J3_SH1106_clrDisplayByBuffer+0x60>
	  auxIndex = j3_sh1106_getIndexBuffer(x,line);
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fdc2 	bl	8001804 <j3_sh1106_getIndexBuffer>
 8001c80:	4603      	mov	r3, r0
 8001c82:	81bb      	strh	r3, [r7, #12]
	  if( _oled->buffer[auxIndex] != 0x00){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	89bb      	ldrh	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d013      	beq.n	8001cba <J3_SH1106_clrDisplayByBuffer+0x5a>
	    _oled->buffer[auxIndex] = 0x00;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	89bb      	ldrh	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
    	J3_SH1106_cursorY(_oled, line);
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fef8 	bl	8001a98 <J3_SH1106_cursorY>
		J3_SH1106_cursorX(_oled, x);
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fed0 	bl	8001a52 <J3_SH1106_cursorX>
		j3_sh1106_sendDado(_oled,0x00);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fd84 	bl	80017c2 <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	73bb      	strb	r3, [r7, #14]
 8001cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dad5      	bge.n	8001c74 <J3_SH1106_clrDisplayByBuffer+0x14>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b07      	cmp	r3, #7
 8001cd2:	d9cc      	bls.n	8001c6e <J3_SH1106_clrDisplayByBuffer+0xe>
	  }
	}
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <J3_SH1106_line>:

void J3_SH1106_line(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b089      	sub	sp, #36	; 0x24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	4611      	mov	r1, r2
 8001cea:	461a      	mov	r2, r3
 8001cec:	4603      	mov	r3, r0
 8001cee:	70fb      	strb	r3, [r7, #3]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70bb      	strb	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	787b      	ldrb	r3, [r7, #1]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10b      	bne.n	8001d18 <J3_SH1106_line+0x3a>
 8001d00:	78ba      	ldrb	r2, [r7, #2]
 8001d02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d106      	bne.n	8001d18 <J3_SH1106_line+0x3a>
	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8001d0a:	78ba      	ldrb	r2, [r7, #2]
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff feec 	bl	8001aee <J3_SH1106_setPixel>
    return;
 8001d16:	e0c5      	b.n	8001ea4 <J3_SH1106_line+0x1c6>
  }
  int8_t dx, dy, sx, sy;

  dx = _x1 - _x0;
 8001d18:	787a      	ldrb	r2, [r7, #1]
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	77fb      	strb	r3, [r7, #31]
  sx = (dx < 0) ? -1 : 1;
 8001d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da02      	bge.n	8001d30 <J3_SH1106_line+0x52>
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e000      	b.n	8001d32 <J3_SH1106_line+0x54>
 8001d30:	2301      	movs	r3, #1
 8001d32:	77bb      	strb	r3, [r7, #30]
  dy = _y1 - _y0;
 8001d34:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d38:	78bb      	ldrb	r3, [r7, #2]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	777b      	strb	r3, [r7, #29]
  sy = (dy < 0) ? -1 : 1;
 8001d40:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da02      	bge.n	8001d4e <J3_SH1106_line+0x70>
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e000      	b.n	8001d50 <J3_SH1106_line+0x72>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	773b      	strb	r3, [r7, #28]

  if (abs(dy) < abs(dx)){
 8001d52:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	425b      	neglt	r3, r3
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bfb8      	it	lt
 8001d66:	425b      	neglt	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d249      	bcs.n	8001e02 <J3_SH1106_line+0x124>
    float m = (float) dy / dx;
 8001d6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff42 	bl	8000bfc <__aeabi_i2f>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ff3c 	bl	8000bfc <__aeabi_i2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff f83f 	bl	8000e0c <__aeabi_fdiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]
    float b = _y0 - m * _x0;
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff31 	bl	8000bfc <__aeabi_i2f>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff2c 	bl	8000bfc <__aeabi_i2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	6939      	ldr	r1, [r7, #16]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff7b 	bl	8000ca4 <__aeabi_fmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7fe fe6c 	bl	8000a90 <__aeabi_fsub>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

    while (_x0 != _x1){
 8001dbc:	e01c      	b.n	8001df8 <J3_SH1106_line+0x11a>
      J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe ff1b 	bl	8000bfc <__aeabi_i2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ff6a 	bl	8000ca4 <__aeabi_fmul>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fe5d 	bl	8000a94 <__addsf3>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f8b1 	bl	8000f44 <__aeabi_f2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fe7f 	bl	8001aee <J3_SH1106_setPixel>
      _x0 += sx;
 8001df0:	7fba      	ldrb	r2, [r7, #30]
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	4413      	add	r3, r2
 8001df6:	70fb      	strb	r3, [r7, #3]
    while (_x0 != _x1){
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	787b      	ldrb	r3, [r7, #1]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1de      	bne.n	8001dbe <J3_SH1106_line+0xe0>
 8001e00:	e049      	b.n	8001e96 <J3_SH1106_line+0x1b8>
    }
  }
  else {
    float m = (float) dx / dy;
 8001e02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fef8 	bl	8000bfc <__aeabi_i2f>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fef2 	bl	8000bfc <__aeabi_i2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7fe fff5 	bl	8000e0c <__aeabi_fdiv>
 8001e22:	4603      	mov	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]
    float b = _x0 - m * _y0;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fee7 	bl	8000bfc <__aeabi_i2f>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	78bb      	ldrb	r3, [r7, #2]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fee2 	bl	8000bfc <__aeabi_i2f>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ff31 	bl	8000ca4 <__aeabi_fmul>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4619      	mov	r1, r3
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7fe fe22 	bl	8000a90 <__aeabi_fsub>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	617b      	str	r3, [r7, #20]

    while (_y0 != _y1){
 8001e50:	e01c      	b.n	8001e8c <J3_SH1106_line+0x1ae>
      J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 8001e52:	78bb      	ldrb	r3, [r7, #2]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fed1 	bl	8000bfc <__aeabi_i2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	69b9      	ldr	r1, [r7, #24]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ff20 	bl	8000ca4 <__aeabi_fmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fe13 	bl	8000a94 <__addsf3>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f867 	bl	8000f44 <__aeabi_f2uiz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	78ba      	ldrb	r2, [r7, #2]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe35 	bl	8001aee <J3_SH1106_setPixel>
          _y0 += sy;
 8001e84:	7f3a      	ldrb	r2, [r7, #28]
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	4413      	add	r3, r2
 8001e8a:	70bb      	strb	r3, [r7, #2]
    while (_y0 != _y1){
 8001e8c:	78ba      	ldrb	r2, [r7, #2]
 8001e8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d1dd      	bne.n	8001e52 <J3_SH1106_line+0x174>
    }
  }

  J3_SH1106_setPixel(_oled, _x1, _y1);
 8001e96:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e9a:	787b      	ldrb	r3, [r7, #1]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fe25 	bl	8001aee <J3_SH1106_setPixel>
}
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}

08001eaa <J3_SH1106_lineDash>:

void J3_SH1106_lineDash(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b089      	sub	sp, #36	; 0x24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70bb      	strb	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	787b      	ldrb	r3, [r7, #1]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10b      	bne.n	8001ee4 <J3_SH1106_lineDash+0x3a>
 8001ecc:	78ba      	ldrb	r2, [r7, #2]
 8001ece:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d106      	bne.n	8001ee4 <J3_SH1106_lineDash+0x3a>
 	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8001ed6:	78ba      	ldrb	r2, [r7, #2]
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fe06 	bl	8001aee <J3_SH1106_setPixel>
     return;
 8001ee2:	e10b      	b.n	80020fc <J3_SH1106_lineDash+0x252>
   }
   int8_t dx, dy, sx, sy;
   int8_t p = 1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	77fb      	strb	r3, [r7, #31]

   dx = _x1 - _x0;
 8001ee8:	787a      	ldrb	r2, [r7, #1]
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	77bb      	strb	r3, [r7, #30]
   sx = (dx < 0) ? -1 : 1;
 8001ef2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da02      	bge.n	8001f00 <J3_SH1106_lineDash+0x56>
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e000      	b.n	8001f02 <J3_SH1106_lineDash+0x58>
 8001f00:	2301      	movs	r3, #1
 8001f02:	777b      	strb	r3, [r7, #29]
   dy = _y1 - _y0;
 8001f04:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	773b      	strb	r3, [r7, #28]
   sy = (dy < 0) ? -1 : 1;
 8001f10:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da02      	bge.n	8001f1e <J3_SH1106_lineDash+0x74>
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e000      	b.n	8001f20 <J3_SH1106_lineDash+0x76>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	76fb      	strb	r3, [r7, #27]

   if (abs(dy) < abs(dx)){
 8001f22:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bfb8      	it	lt
 8001f2a:	425b      	neglt	r3, r3
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	425b      	neglt	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d26b      	bcs.n	8002016 <J3_SH1106_lineDash+0x16c>
     float m = (float) dy / dx;
 8001f3e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fe5a 	bl	8000bfc <__aeabi_i2f>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe54 	bl	8000bfc <__aeabi_i2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe ff57 	bl	8000e0c <__aeabi_fdiv>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	60fb      	str	r3, [r7, #12]
     float b = _y0 - m * _x0;
 8001f62:	78bb      	ldrb	r3, [r7, #2]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fe49 	bl	8000bfc <__aeabi_i2f>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fe44 	bl	8000bfc <__aeabi_i2f>
 8001f74:	4603      	mov	r3, r0
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fe93 	bl	8000ca4 <__aeabi_fmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7fe fd84 	bl	8000a90 <__aeabi_fsub>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60bb      	str	r3, [r7, #8]

     while (_x0 != _x1){
 8001f8c:	e03e      	b.n	800200c <J3_SH1106_lineDash+0x162>
       if(p){
 8001f8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01b      	beq.n	8001fce <J3_SH1106_lineDash+0x124>
         J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fe2f 	bl	8000bfc <__aeabi_i2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fe7e 	bl	8000ca4 <__aeabi_fmul>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fd71 	bl	8000a94 <__addsf3>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ffc5 	bl	8000f44 <__aeabi_f2uiz>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fd93 	bl	8001aee <J3_SH1106_setPixel>
         p = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
 8001fcc:	e01a      	b.n	8002004 <J3_SH1106_lineDash+0x15a>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fe13 	bl	8000bfc <__aeabi_i2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	68f9      	ldr	r1, [r7, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fe62 	bl	8000ca4 <__aeabi_fmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fd55 	bl	8000a94 <__addsf3>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ffa9 	bl	8000f44 <__aeabi_f2uiz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fdd2 	bl	8001ba4 <J3_SH1106_setClsPixel>
    	 p = 1;
 8002000:	2301      	movs	r3, #1
 8002002:	77fb      	strb	r3, [r7, #31]
       }

       _x0 += sx;
 8002004:	7f7a      	ldrb	r2, [r7, #29]
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	4413      	add	r3, r2
 800200a:	70fb      	strb	r3, [r7, #3]
     while (_x0 != _x1){
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	787b      	ldrb	r3, [r7, #1]
 8002010:	429a      	cmp	r2, r3
 8002012:	d1bc      	bne.n	8001f8e <J3_SH1106_lineDash+0xe4>
 8002014:	e06b      	b.n	80020ee <J3_SH1106_lineDash+0x244>
     }
   }
   else {
     float m = (float) dx / dy;
 8002016:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fdee 	bl	8000bfc <__aeabi_i2f>
 8002020:	4604      	mov	r4, r0
 8002022:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fde8 	bl	8000bfc <__aeabi_i2f>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	4620      	mov	r0, r4
 8002032:	f7fe feeb 	bl	8000e0c <__aeabi_fdiv>
 8002036:	4603      	mov	r3, r0
 8002038:	617b      	str	r3, [r7, #20]
     float b = _x0 - m * _y0;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fddd 	bl	8000bfc <__aeabi_i2f>
 8002042:	4604      	mov	r4, r0
 8002044:	78bb      	ldrb	r3, [r7, #2]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fdd8 	bl	8000bfc <__aeabi_i2f>
 800204c:	4603      	mov	r3, r0
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe27 	bl	8000ca4 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fd18 	bl	8000a90 <__aeabi_fsub>
 8002060:	4603      	mov	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

     while (_y0 != _y1){
 8002064:	e03e      	b.n	80020e4 <J3_SH1106_lineDash+0x23a>
       if(p){
 8002066:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01b      	beq.n	80020a6 <J3_SH1106_lineDash+0x1fc>
         J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fdc3 	bl	8000bfc <__aeabi_i2f>
 8002076:	4603      	mov	r3, r0
 8002078:	6979      	ldr	r1, [r7, #20]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe12 	bl	8000ca4 <__aeabi_fmul>
 8002080:	4603      	mov	r3, r0
 8002082:	6939      	ldr	r1, [r7, #16]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd05 	bl	8000a94 <__addsf3>
 800208a:	4603      	mov	r3, r0
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe ff59 	bl	8000f44 <__aeabi_f2uiz>
 8002092:	4603      	mov	r3, r0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	78ba      	ldrb	r2, [r7, #2]
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fd27 	bl	8001aee <J3_SH1106_setPixel>
         p = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
 80020a4:	e01a      	b.n	80020dc <J3_SH1106_lineDash+0x232>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fda7 	bl	8000bfc <__aeabi_i2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fdf6 	bl	8000ca4 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	6939      	ldr	r1, [r7, #16]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fce9 	bl	8000a94 <__addsf3>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe ff3d 	bl	8000f44 <__aeabi_f2uiz>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fd66 	bl	8001ba4 <J3_SH1106_setClsPixel>
    	 p = 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	77fb      	strb	r3, [r7, #31]
       }
       _y0 += sy;
 80020dc:	7efa      	ldrb	r2, [r7, #27]
 80020de:	78bb      	ldrb	r3, [r7, #2]
 80020e0:	4413      	add	r3, r2
 80020e2:	70bb      	strb	r3, [r7, #2]
     while (_y0 != _y1){
 80020e4:	78ba      	ldrb	r2, [r7, #2]
 80020e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d1bb      	bne.n	8002066 <J3_SH1106_lineDash+0x1bc>
     }
   }

   J3_SH1106_setPixel(_oled, _x1, _y1);
 80020ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80020f2:	787b      	ldrb	r3, [r7, #1]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fcf9 	bl	8001aee <J3_SH1106_setPixel>
}
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}

08002102 <J3_SH1106_draw>:
	  else
		J3_SH1106_setClsPixel(_oled, _x, _y + i);
  }
}

void J3_SH1106_draw(TOLED* _oled, uint8_t* _draw, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h){
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	71bb      	strb	r3, [r7, #6]
  uint16_t tam = _w * _h;
 8002118:	f897 3020 	ldrb.w	r3, [r7, #32]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002122:	b292      	uxth	r2, r2
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	827b      	strh	r3, [r7, #18]
  uint16_t contX = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	82fb      	strh	r3, [r7, #22]
  uint8_t aux = 0x80;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	747b      	strb	r3, [r7, #17]

  for(uint16_t i = 0; i<tam; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	82bb      	strh	r3, [r7, #20]
 8002136:	e036      	b.n	80021a6 <J3_SH1106_draw+0xa4>
	if(_draw[i/8] & (aux >> (i % 8)) ){
 8002138:	8abb      	ldrh	r3, [r7, #20]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	7c7a      	ldrb	r2, [r7, #17]
 800214a:	8abb      	ldrh	r3, [r7, #20]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	fa42 f303 	asr.w	r3, r2, r3
 8002154:	400b      	ands	r3, r1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <J3_SH1106_draw+0x6e>
	  J3_SH1106_setPixel(_oled, _x + contX, _y);
 800215a:	8afb      	ldrh	r3, [r7, #22]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	4413      	add	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	4619      	mov	r1, r3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fcc0 	bl	8001aee <J3_SH1106_setPixel>
 800216e:	e009      	b.n	8002184 <J3_SH1106_draw+0x82>
	}
    else{
    	J3_SH1106_setClsPixel(_oled, _x + contX, _y);
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4413      	add	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	79ba      	ldrb	r2, [r7, #6]
 800217c:	4619      	mov	r1, r3
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fd10 	bl	8001ba4 <J3_SH1106_setClsPixel>
	}
    contX++;
 8002184:	8afb      	ldrh	r3, [r7, #22]
 8002186:	3301      	adds	r3, #1
 8002188:	82fb      	strh	r3, [r7, #22]
    if(contX == _w){
 800218a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800218e:	b29b      	uxth	r3, r3
 8002190:	8afa      	ldrh	r2, [r7, #22]
 8002192:	429a      	cmp	r2, r3
 8002194:	d104      	bne.n	80021a0 <J3_SH1106_draw+0x9e>
      _y++;
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	3301      	adds	r3, #1
 800219a:	71bb      	strb	r3, [r7, #6]
	  contX = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i<tam; i++){
 80021a0:	8abb      	ldrh	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	82bb      	strh	r3, [r7, #20]
 80021a6:	8aba      	ldrh	r2, [r7, #20]
 80021a8:	8a7b      	ldrh	r3, [r7, #18]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3c4      	bcc.n	8002138 <J3_SH1106_draw+0x36>
    }
  }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <J3_SH1106_setBox>:

void J3_SH1106_setBox(TOLED* _oled, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h,  uint8_t _fill){
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	70fb      	strb	r3, [r7, #3]
 80021ca:	460b      	mov	r3, r1
 80021cc:	70bb      	strb	r3, [r7, #2]
 80021ce:	4613      	mov	r3, r2
 80021d0:	707b      	strb	r3, [r7, #1]
  J3_SH1106_line(_oled, _x, _y, _x + _w, _y);
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	4413      	add	r3, r2
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	78ba      	ldrb	r2, [r7, #2]
 80021dc:	78f9      	ldrb	r1, [r7, #3]
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4603      	mov	r3, r0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fd7a 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y, _x, _y + _h);
 80021ea:	78ba      	ldrb	r2, [r7, #2]
 80021ec:	7e3b      	ldrb	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	78f8      	ldrb	r0, [r7, #3]
 80021f4:	78ba      	ldrb	r2, [r7, #2]
 80021f6:	78f9      	ldrb	r1, [r7, #3]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4603      	mov	r3, r0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fd6e 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x +_w, _y, _x + _w, _y + _h);
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	4413      	add	r3, r2
 8002208:	b2d9      	uxtb	r1, r3
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	4413      	add	r3, r2
 8002210:	b2d8      	uxtb	r0, r3
 8002212:	78ba      	ldrb	r2, [r7, #2]
 8002214:	7e3b      	ldrb	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	b2db      	uxtb	r3, r3
 800221a:	78ba      	ldrb	r2, [r7, #2]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4603      	mov	r3, r0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fd5c 	bl	8001cde <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y + _h, _x + _w, _y + _h);
 8002226:	78ba      	ldrb	r2, [r7, #2]
 8002228:	7e3b      	ldrb	r3, [r7, #24]
 800222a:	4413      	add	r3, r2
 800222c:	b2d8      	uxtb	r0, r3
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	4413      	add	r3, r2
 8002234:	b2dc      	uxtb	r4, r3
 8002236:	78ba      	ldrb	r2, [r7, #2]
 8002238:	7e3b      	ldrb	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	78f9      	ldrb	r1, [r7, #3]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4623      	mov	r3, r4
 8002244:	4602      	mov	r2, r0
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fd49 	bl	8001cde <J3_SH1106_line>
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002254:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002256:	e003      	b.n	8002260 <LoopCopyDataInit>

08002258 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800225a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800225c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800225e:	3104      	adds	r1, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002264:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002266:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002268:	d3f6      	bcc.n	8002258 <CopyDataInit>
  ldr r2, =_sbss
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800226c:	e002      	b.n	8002274 <LoopFillZerobss>

0800226e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002270:	f842 3b04 	str.w	r3, [r2], #4

08002274 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002276:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002278:	d3f9      	bcc.n	800226e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227a:	f7ff fa7b 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f001 fb53 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7fe ff27 	bl	80010d4 <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r3, =_sidata
 8002288:	08006954 	.word	0x08006954
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002290:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002294:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002298:	2000026c 	.word	0x2000026c

0800229c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_2_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_Init+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_Init+0x28>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f92b 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff f940 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f935 	bl	800255a <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 f90b 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000000 	.word	0x20000000
 8002324:	20000008 	.word	0x20000008
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000008 	.word	0x20000008
 800234c:	20000258 	.word	0x20000258

08002350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000258 	.word	0x20000258

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fff0 	bl	8002350 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffe0 	bl	8002350 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000008 	.word	0x20000008

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff90 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff49 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff5e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff90 	bl	8002464 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5f 	bl	8002410 <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffb0 	bl	80024c8 <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	e169      	b.n	800285c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002588:	2201      	movs	r2, #1
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 8158 	bne.w	8002856 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a9a      	ldr	r2, [pc, #616]	; (8002814 <HAL_GPIO_Init+0x2a0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d05e      	beq.n	800266e <HAL_GPIO_Init+0xfa>
 80025b0:	4a98      	ldr	r2, [pc, #608]	; (8002814 <HAL_GPIO_Init+0x2a0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d875      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025b6:	4a98      	ldr	r2, [pc, #608]	; (8002818 <HAL_GPIO_Init+0x2a4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d058      	beq.n	800266e <HAL_GPIO_Init+0xfa>
 80025bc:	4a96      	ldr	r2, [pc, #600]	; (8002818 <HAL_GPIO_Init+0x2a4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d86f      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025c2:	4a96      	ldr	r2, [pc, #600]	; (800281c <HAL_GPIO_Init+0x2a8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d052      	beq.n	800266e <HAL_GPIO_Init+0xfa>
 80025c8:	4a94      	ldr	r2, [pc, #592]	; (800281c <HAL_GPIO_Init+0x2a8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d869      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025ce:	4a94      	ldr	r2, [pc, #592]	; (8002820 <HAL_GPIO_Init+0x2ac>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04c      	beq.n	800266e <HAL_GPIO_Init+0xfa>
 80025d4:	4a92      	ldr	r2, [pc, #584]	; (8002820 <HAL_GPIO_Init+0x2ac>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d863      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025da:	4a92      	ldr	r2, [pc, #584]	; (8002824 <HAL_GPIO_Init+0x2b0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d046      	beq.n	800266e <HAL_GPIO_Init+0xfa>
 80025e0:	4a90      	ldr	r2, [pc, #576]	; (8002824 <HAL_GPIO_Init+0x2b0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d85d      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d82a      	bhi.n	8002640 <HAL_GPIO_Init+0xcc>
 80025ea:	2b12      	cmp	r3, #18
 80025ec:	d859      	bhi.n	80026a2 <HAL_GPIO_Init+0x12e>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <HAL_GPIO_Init+0x80>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	0800266f 	.word	0x0800266f
 80025f8:	08002649 	.word	0x08002649
 80025fc:	0800265b 	.word	0x0800265b
 8002600:	0800269d 	.word	0x0800269d
 8002604:	080026a3 	.word	0x080026a3
 8002608:	080026a3 	.word	0x080026a3
 800260c:	080026a3 	.word	0x080026a3
 8002610:	080026a3 	.word	0x080026a3
 8002614:	080026a3 	.word	0x080026a3
 8002618:	080026a3 	.word	0x080026a3
 800261c:	080026a3 	.word	0x080026a3
 8002620:	080026a3 	.word	0x080026a3
 8002624:	080026a3 	.word	0x080026a3
 8002628:	080026a3 	.word	0x080026a3
 800262c:	080026a3 	.word	0x080026a3
 8002630:	080026a3 	.word	0x080026a3
 8002634:	080026a3 	.word	0x080026a3
 8002638:	08002651 	.word	0x08002651
 800263c:	08002665 	.word	0x08002665
 8002640:	4a79      	ldr	r2, [pc, #484]	; (8002828 <HAL_GPIO_Init+0x2b4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002646:	e02c      	b.n	80026a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	623b      	str	r3, [r7, #32]
          break;
 800264e:	e029      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	3304      	adds	r3, #4
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e024      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	3308      	adds	r3, #8
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e01f      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	330c      	adds	r3, #12
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e01a      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002676:	2304      	movs	r3, #4
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e013      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002684:	2308      	movs	r3, #8
 8002686:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	611a      	str	r2, [r3, #16]
          break;
 800268e:	e009      	b.n	80026a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002690:	2308      	movs	r3, #8
 8002692:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	615a      	str	r2, [r3, #20]
          break;
 800269a:	e003      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x130>
          break;
 80026a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2bff      	cmp	r3, #255	; 0xff
 80026a8:	d801      	bhi.n	80026ae <HAL_GPIO_Init+0x13a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_Init+0x13e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d802      	bhi.n	80026c0 <HAL_GPIO_Init+0x14c>
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x152>
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	3b08      	subs	r3, #8
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	210f      	movs	r1, #15
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80b1 	beq.w	8002856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f4:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_GPIO_Init+0x2b8>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_GPIO_Init+0x2b8>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_GPIO_Init+0x2b8>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800270c:	4a48      	ldr	r2, [pc, #288]	; (8002830 <HAL_GPIO_Init+0x2bc>)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_GPIO_Init+0x2c0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_GPIO_Init+0x1ec>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <HAL_GPIO_Init+0x2c4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00d      	beq.n	800275c <HAL_GPIO_Init+0x1e8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3e      	ldr	r2, [pc, #248]	; (800283c <HAL_GPIO_Init+0x2c8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x1e4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <HAL_GPIO_Init+0x2cc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_GPIO_Init+0x1e0>
 8002750:	2303      	movs	r3, #3
 8002752:	e006      	b.n	8002762 <HAL_GPIO_Init+0x1ee>
 8002754:	2304      	movs	r3, #4
 8002756:	e004      	b.n	8002762 <HAL_GPIO_Init+0x1ee>
 8002758:	2302      	movs	r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x1ee>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_GPIO_Init+0x1ee>
 8002760:	2300      	movs	r3, #0
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	f002 0203 	and.w	r2, r2, #3
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	4093      	lsls	r3, r2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002772:	492f      	ldr	r1, [pc, #188]	; (8002830 <HAL_GPIO_Init+0x2bc>)
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	492c      	ldr	r1, [pc, #176]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	4928      	ldr	r1, [pc, #160]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	491e      	ldr	r1, [pc, #120]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4918      	ldr	r1, [pc, #96]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4914      	ldr	r1, [pc, #80]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d021      	beq.n	8002848 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
 8002810:	e021      	b.n	8002856 <HAL_GPIO_Init+0x2e2>
 8002812:	bf00      	nop
 8002814:	10320000 	.word	0x10320000
 8002818:	10310000 	.word	0x10310000
 800281c:	10220000 	.word	0x10220000
 8002820:	10210000 	.word	0x10210000
 8002824:	10120000 	.word	0x10120000
 8002828:	10110000 	.word	0x10110000
 800282c:	40021000 	.word	0x40021000
 8002830:	40010000 	.word	0x40010000
 8002834:	40010800 	.word	0x40010800
 8002838:	40010c00 	.word	0x40010c00
 800283c:	40011000 	.word	0x40011000
 8002840:	40011400 	.word	0x40011400
 8002844:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_GPIO_Init+0x304>)
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	43db      	mvns	r3, r3
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <HAL_GPIO_Init+0x304>)
 8002852:	4013      	ands	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3301      	adds	r3, #1
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	f47f ae8e 	bne.w	8002588 <HAL_GPIO_Init+0x14>
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	372c      	adds	r7, #44	; 0x2c
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12b      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fbd6 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e0:	f000 ffea 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a81      	ldr	r2, [pc, #516]	; (8002af0 <HAL_I2C_Init+0x274>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_Init+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <HAL_I2C_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e006      	b.n	800290e <HAL_I2C_Init+0x92>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a7d      	ldr	r2, [pc, #500]	; (8002af8 <HAL_I2C_Init+0x27c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0e7      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a78      	ldr	r2, [pc, #480]	; (8002afc <HAL_I2C_Init+0x280>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a6a      	ldr	r2, [pc, #424]	; (8002af0 <HAL_I2C_Init+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <HAL_I2C_Init+0xd4>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	e009      	b.n	8002964 <HAL_I2C_Init+0xe8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_I2C_Init+0x284>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	495c      	ldr	r1, [pc, #368]	; (8002af0 <HAL_I2C_Init+0x274>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d819      	bhi.n	80029b8 <HAL_I2C_Init+0x13c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002998:	400b      	ands	r3, r1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_Init+0x138>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e59      	subs	r1, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	e051      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e04f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_I2C_Init+0x168>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e022      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_I2C_Init+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e58      	subs	r0, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	e00f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6911      	ldr	r1, [r2, #16]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	000186a0 	.word	0x000186a0
 8002af4:	001e847f 	.word	0x001e847f
 8002af8:	003d08ff 	.word	0x003d08ff
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	460b      	mov	r3, r1
 8002b12:	817b      	strh	r3, [r7, #10]
 8002b14:	4613      	mov	r3, r2
 8002b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fc1a 	bl	8002350 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	f040 80e0 	bne.w	8002cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2319      	movs	r3, #25
 8002b32:	2201      	movs	r2, #1
 8002b34:	4970      	ldr	r1, [pc, #448]	; (8002cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f964 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0d3      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x50>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0cc      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d007      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2210      	movs	r2, #16
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	893a      	ldrh	r2, [r7, #8]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	; (8002cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f89c 	bl	8002d00 <I2C_MasterRequestWrite>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e08d      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002be8:	e066      	b.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f9de 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06b      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d11b      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x188>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6a39      	ldr	r1, [r7, #32]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f9ce 	bl	8003032 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e01a      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d194      	bne.n	8002bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000

08002d00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d006      	beq.n	8002d2a <I2C_MasterRequestWrite+0x2a>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d003      	beq.n	8002d2a <I2C_MasterRequestWrite+0x2a>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d28:	d108      	bne.n	8002d3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e00b      	b.n	8002d54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d107      	bne.n	8002d54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f84f 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d103      	bne.n	8002d84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e035      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d90:	d108      	bne.n	8002da4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e01b      	b.n	8002ddc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	11db      	asrs	r3, r3, #7
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f063 030f 	orn	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <I2C_MasterRequestWrite+0xfc>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f875 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e010      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <I2C_MasterRequestWrite+0x100>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f865 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010008 	.word	0x00010008
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e025      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d021      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff fa97 	bl	8002350 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e023      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	e00c      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0b6      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec0:	e051      	b.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d123      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e046      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d021      	beq.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7ff fa15 	bl	8002350 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e020      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e00b      	b.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d18d      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f878 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7ff f9bb 	bl	8002350 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d1ca      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303e:	e02d      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f837 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02d      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d021      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7ff f97a 	bl	8002350 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1ca      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d11b      	bne.n	8003104 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e26c      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8087 	beq.w	800323e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800313c:	4b8f      	ldr	r3, [pc, #572]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d112      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
 8003148:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06c      	beq.n	800323c <HAL_RCC_OscConfig+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e246      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x76>
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7f      	ldr	r2, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e02e      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xbc>
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031cc:	4b6b      	ldr	r3, [pc, #428]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff f8b0 	bl	8002350 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff f8ac 	bl	8002350 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1fa      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe4>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff f89c 	bl	8002350 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f898 	bl	8002350 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1e6      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x10c>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
 8003262:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1ba      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7ff f851 	bl	8002350 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7ff f84d 	bl	8002350 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e19b      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff f830 	bl	8002350 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7ff f82c 	bl	8002350 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e17a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03a      	beq.n	8003394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7ff f810 	bl	8002350 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff f80c 	bl	8002350 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e15a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fac4 	bl	80038e0 <RCC_Delay>
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe fff6 	bl	8002350 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	e00f      	b.n	8003388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe fff2 	bl	8002350 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d908      	bls.n	8003388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e140      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	42420000 	.word	0x42420000
 8003384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e9      	bne.n	8003368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b97      	ldr	r3, [pc, #604]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a93      	ldr	r2, [pc, #588]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b91      	ldr	r3, [pc, #580]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b8e      	ldr	r3, [pc, #568]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a8a      	ldr	r2, [pc, #552]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fe ffb3 	bl	8002350 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe ffaf 	bl	8002350 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0fd      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x312>
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e02d      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x334>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x356>
 800344c:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a6c      	ldr	r2, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003466:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a66      	ldr	r2, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a63      	ldr	r2, [pc, #396]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fe ff63 	bl	8002350 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe ff5f 	bl	8002350 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0ab      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x37e>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe ff4d 	bl	8002350 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe ff49 	bl	8002350 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e095      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8081 	beq.w	80035fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d061      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d146      	bne.n	800359a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe ff1d 	bl	8002350 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe ff19 	bl	8002350 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e067      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	492d      	ldr	r1, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a19      	ldr	r1, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	430b      	orrs	r3, r1
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe feed 	bl	8002350 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe fee9 	bl	8002350 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e037      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x46a>
 8003598:	e02f      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fed6 	bl	8002350 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fed2 	bl	8002350 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e020      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x498>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
 800360c:	42420060 	.word	0x42420060

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe fe26 	bl	8002350 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe fe22 	bl	8002350 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fd84 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08006550 	.word	0x08006550
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b490      	push	{r4, r7}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037ec:	1d3c      	adds	r4, r7, #4
 80037ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f4:	f240 2301 	movw	r3, #513	; 0x201
 80037f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 800381e:	2b08      	cmp	r3, #8
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x46>
 8003822:	e02d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003826:	623b      	str	r3, [r7, #32]
      break;
 8003828:	e02d      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	0c9b      	lsrs	r3, r3, #18
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c5b      	lsrs	r3, r3, #17
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003856:	4413      	add	r3, r2
 8003858:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003862:	fb02 f203 	mul.w	r2, r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e004      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	623b      	str	r3, [r7, #32]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	623b      	str	r3, [r7, #32]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6a3b      	ldr	r3, [r7, #32]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc90      	pop	{r4, r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	08006340 	.word	0x08006340
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	003d0900 	.word	0x003d0900

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000000 	.word	0x20000000

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff2 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08006560 	.word	0x08006560

080038e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <RCC_Delay+0x34>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <RCC_Delay+0x38>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a5b      	lsrs	r3, r3, #9
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038fc:	bf00      	nop
  }
  while (Delay --);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <RCC_Delay+0x1c>
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000000 	.word	0x20000000
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <__errno>:
 800391c:	4b01      	ldr	r3, [pc, #4]	; (8003924 <__errno+0x8>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	2000000c 	.word	0x2000000c

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	2600      	movs	r6, #0
 800392c:	4d0c      	ldr	r5, [pc, #48]	; (8003960 <__libc_init_array+0x38>)
 800392e:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	42a6      	cmp	r6, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	f002 fcf6 	bl	8006328 <_init>
 800393c:	2600      	movs	r6, #0
 800393e:	4d0a      	ldr	r5, [pc, #40]	; (8003968 <__libc_init_array+0x40>)
 8003940:	4c0a      	ldr	r4, [pc, #40]	; (800396c <__libc_init_array+0x44>)
 8003942:	1b64      	subs	r4, r4, r5
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	42a6      	cmp	r6, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003950:	4798      	blx	r3
 8003952:	3601      	adds	r6, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	f855 3b04 	ldr.w	r3, [r5], #4
 800395a:	4798      	blx	r3
 800395c:	3601      	adds	r6, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	0800694c 	.word	0x0800694c
 8003964:	0800694c 	.word	0x0800694c
 8003968:	0800694c 	.word	0x0800694c
 800396c:	08006950 	.word	0x08006950

08003970 <malloc>:
 8003970:	4b02      	ldr	r3, [pc, #8]	; (800397c <malloc+0xc>)
 8003972:	4601      	mov	r1, r0
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	f000 b857 	b.w	8003a28 <_malloc_r>
 800397a:	bf00      	nop
 800397c:	2000000c 	.word	0x2000000c

08003980 <memset>:
 8003980:	4603      	mov	r3, r0
 8003982:	4402      	add	r2, r0
 8003984:	4293      	cmp	r3, r2
 8003986:	d100      	bne.n	800398a <memset+0xa>
 8003988:	4770      	bx	lr
 800398a:	f803 1b01 	strb.w	r1, [r3], #1
 800398e:	e7f9      	b.n	8003984 <memset+0x4>

08003990 <_free_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4605      	mov	r5, r0
 8003994:	2900      	cmp	r1, #0
 8003996:	d043      	beq.n	8003a20 <_free_r+0x90>
 8003998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800399c:	1f0c      	subs	r4, r1, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bfb8      	it	lt
 80039a2:	18e4      	addlt	r4, r4, r3
 80039a4:	f001 fba6 	bl	80050f4 <__malloc_lock>
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <_free_r+0x94>)
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	4610      	mov	r0, r2
 80039ae:	b933      	cbnz	r3, 80039be <_free_r+0x2e>
 80039b0:	6063      	str	r3, [r4, #4]
 80039b2:	6014      	str	r4, [r2, #0]
 80039b4:	4628      	mov	r0, r5
 80039b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ba:	f001 bba1 	b.w	8005100 <__malloc_unlock>
 80039be:	42a3      	cmp	r3, r4
 80039c0:	d90a      	bls.n	80039d8 <_free_r+0x48>
 80039c2:	6821      	ldr	r1, [r4, #0]
 80039c4:	1862      	adds	r2, r4, r1
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bf01      	itttt	eq
 80039ca:	681a      	ldreq	r2, [r3, #0]
 80039cc:	685b      	ldreq	r3, [r3, #4]
 80039ce:	1852      	addeq	r2, r2, r1
 80039d0:	6022      	streq	r2, [r4, #0]
 80039d2:	6063      	str	r3, [r4, #4]
 80039d4:	6004      	str	r4, [r0, #0]
 80039d6:	e7ed      	b.n	80039b4 <_free_r+0x24>
 80039d8:	461a      	mov	r2, r3
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	b10b      	cbz	r3, 80039e2 <_free_r+0x52>
 80039de:	42a3      	cmp	r3, r4
 80039e0:	d9fa      	bls.n	80039d8 <_free_r+0x48>
 80039e2:	6811      	ldr	r1, [r2, #0]
 80039e4:	1850      	adds	r0, r2, r1
 80039e6:	42a0      	cmp	r0, r4
 80039e8:	d10b      	bne.n	8003a02 <_free_r+0x72>
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	4401      	add	r1, r0
 80039ee:	1850      	adds	r0, r2, r1
 80039f0:	4283      	cmp	r3, r0
 80039f2:	6011      	str	r1, [r2, #0]
 80039f4:	d1de      	bne.n	80039b4 <_free_r+0x24>
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4401      	add	r1, r0
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	6053      	str	r3, [r2, #4]
 8003a00:	e7d8      	b.n	80039b4 <_free_r+0x24>
 8003a02:	d902      	bls.n	8003a0a <_free_r+0x7a>
 8003a04:	230c      	movs	r3, #12
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	e7d4      	b.n	80039b4 <_free_r+0x24>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1821      	adds	r1, r4, r0
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	bf01      	itttt	eq
 8003a12:	6819      	ldreq	r1, [r3, #0]
 8003a14:	685b      	ldreq	r3, [r3, #4]
 8003a16:	1809      	addeq	r1, r1, r0
 8003a18:	6021      	streq	r1, [r4, #0]
 8003a1a:	6063      	str	r3, [r4, #4]
 8003a1c:	6054      	str	r4, [r2, #4]
 8003a1e:	e7c9      	b.n	80039b4 <_free_r+0x24>
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	bf00      	nop
 8003a24:	200001fc 	.word	0x200001fc

08003a28 <_malloc_r>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	1ccd      	adds	r5, r1, #3
 8003a2c:	f025 0503 	bic.w	r5, r5, #3
 8003a30:	3508      	adds	r5, #8
 8003a32:	2d0c      	cmp	r5, #12
 8003a34:	bf38      	it	cc
 8003a36:	250c      	movcc	r5, #12
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	db01      	blt.n	8003a42 <_malloc_r+0x1a>
 8003a3e:	42a9      	cmp	r1, r5
 8003a40:	d903      	bls.n	8003a4a <_malloc_r+0x22>
 8003a42:	230c      	movs	r3, #12
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	2000      	movs	r0, #0
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4a:	f001 fb53 	bl	80050f4 <__malloc_lock>
 8003a4e:	4921      	ldr	r1, [pc, #132]	; (8003ad4 <_malloc_r+0xac>)
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	4614      	mov	r4, r2
 8003a54:	b99c      	cbnz	r4, 8003a7e <_malloc_r+0x56>
 8003a56:	4f20      	ldr	r7, [pc, #128]	; (8003ad8 <_malloc_r+0xb0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b923      	cbnz	r3, 8003a66 <_malloc_r+0x3e>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f000 fc9c 	bl	800439c <_sbrk_r>
 8003a64:	6038      	str	r0, [r7, #0]
 8003a66:	4629      	mov	r1, r5
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 fc97 	bl	800439c <_sbrk_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d123      	bne.n	8003aba <_malloc_r+0x92>
 8003a72:	230c      	movs	r3, #12
 8003a74:	4630      	mov	r0, r6
 8003a76:	6033      	str	r3, [r6, #0]
 8003a78:	f001 fb42 	bl	8005100 <__malloc_unlock>
 8003a7c:	e7e3      	b.n	8003a46 <_malloc_r+0x1e>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	1b5b      	subs	r3, r3, r5
 8003a82:	d417      	bmi.n	8003ab4 <_malloc_r+0x8c>
 8003a84:	2b0b      	cmp	r3, #11
 8003a86:	d903      	bls.n	8003a90 <_malloc_r+0x68>
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	441c      	add	r4, r3
 8003a8c:	6025      	str	r5, [r4, #0]
 8003a8e:	e004      	b.n	8003a9a <_malloc_r+0x72>
 8003a90:	6863      	ldr	r3, [r4, #4]
 8003a92:	42a2      	cmp	r2, r4
 8003a94:	bf0c      	ite	eq
 8003a96:	600b      	streq	r3, [r1, #0]
 8003a98:	6053      	strne	r3, [r2, #4]
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f001 fb30 	bl	8005100 <__malloc_unlock>
 8003aa0:	f104 000b 	add.w	r0, r4, #11
 8003aa4:	1d23      	adds	r3, r4, #4
 8003aa6:	f020 0007 	bic.w	r0, r0, #7
 8003aaa:	1ac2      	subs	r2, r0, r3
 8003aac:	d0cc      	beq.n	8003a48 <_malloc_r+0x20>
 8003aae:	1a1b      	subs	r3, r3, r0
 8003ab0:	50a3      	str	r3, [r4, r2]
 8003ab2:	e7c9      	b.n	8003a48 <_malloc_r+0x20>
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	6864      	ldr	r4, [r4, #4]
 8003ab8:	e7cc      	b.n	8003a54 <_malloc_r+0x2c>
 8003aba:	1cc4      	adds	r4, r0, #3
 8003abc:	f024 0403 	bic.w	r4, r4, #3
 8003ac0:	42a0      	cmp	r0, r4
 8003ac2:	d0e3      	beq.n	8003a8c <_malloc_r+0x64>
 8003ac4:	1a21      	subs	r1, r4, r0
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f000 fc68 	bl	800439c <_sbrk_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	d1dd      	bne.n	8003a8c <_malloc_r+0x64>
 8003ad0:	e7cf      	b.n	8003a72 <_malloc_r+0x4a>
 8003ad2:	bf00      	nop
 8003ad4:	200001fc 	.word	0x200001fc
 8003ad8:	20000200 	.word	0x20000200

08003adc <__cvt>:
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae2:	461f      	mov	r7, r3
 8003ae4:	bfbb      	ittet	lt
 8003ae6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003aea:	461f      	movlt	r7, r3
 8003aec:	2300      	movge	r3, #0
 8003aee:	232d      	movlt	r3, #45	; 0x2d
 8003af0:	b088      	sub	sp, #32
 8003af2:	4614      	mov	r4, r2
 8003af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003af6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003af8:	7013      	strb	r3, [r2, #0]
 8003afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003afc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b00:	f023 0820 	bic.w	r8, r3, #32
 8003b04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b08:	d005      	beq.n	8003b16 <__cvt+0x3a>
 8003b0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b0e:	d100      	bne.n	8003b12 <__cvt+0x36>
 8003b10:	3501      	adds	r5, #1
 8003b12:	2302      	movs	r3, #2
 8003b14:	e000      	b.n	8003b18 <__cvt+0x3c>
 8003b16:	2303      	movs	r3, #3
 8003b18:	aa07      	add	r2, sp, #28
 8003b1a:	9204      	str	r2, [sp, #16]
 8003b1c:	aa06      	add	r2, sp, #24
 8003b1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b22:	e9cd 3500 	strd	r3, r5, [sp]
 8003b26:	4622      	mov	r2, r4
 8003b28:	463b      	mov	r3, r7
 8003b2a:	f000 fcd5 	bl	80044d8 <_dtoa_r>
 8003b2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b32:	4606      	mov	r6, r0
 8003b34:	d102      	bne.n	8003b3c <__cvt+0x60>
 8003b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b38:	07db      	lsls	r3, r3, #31
 8003b3a:	d522      	bpl.n	8003b82 <__cvt+0xa6>
 8003b3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b40:	eb06 0905 	add.w	r9, r6, r5
 8003b44:	d110      	bne.n	8003b68 <__cvt+0x8c>
 8003b46:	7833      	ldrb	r3, [r6, #0]
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d10a      	bne.n	8003b62 <__cvt+0x86>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	4620      	mov	r0, r4
 8003b52:	4639      	mov	r1, r7
 8003b54:	f7fc ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8003b58:	b918      	cbnz	r0, 8003b62 <__cvt+0x86>
 8003b5a:	f1c5 0501 	rsb	r5, r5, #1
 8003b5e:	f8ca 5000 	str.w	r5, [sl]
 8003b62:	f8da 3000 	ldr.w	r3, [sl]
 8003b66:	4499      	add	r9, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4639      	mov	r1, r7
 8003b70:	f7fc ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8003b74:	b108      	cbz	r0, 8003b7a <__cvt+0x9e>
 8003b76:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b7a:	2230      	movs	r2, #48	; 0x30
 8003b7c:	9b07      	ldr	r3, [sp, #28]
 8003b7e:	454b      	cmp	r3, r9
 8003b80:	d307      	bcc.n	8003b92 <__cvt+0xb6>
 8003b82:	4630      	mov	r0, r6
 8003b84:	9b07      	ldr	r3, [sp, #28]
 8003b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b88:	1b9b      	subs	r3, r3, r6
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	b008      	add	sp, #32
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	9107      	str	r1, [sp, #28]
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e7f0      	b.n	8003b7c <__cvt+0xa0>

08003b9a <__exponent>:
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9e:	2900      	cmp	r1, #0
 8003ba0:	f803 2b02 	strb.w	r2, [r3], #2
 8003ba4:	bfb6      	itet	lt
 8003ba6:	222d      	movlt	r2, #45	; 0x2d
 8003ba8:	222b      	movge	r2, #43	; 0x2b
 8003baa:	4249      	neglt	r1, r1
 8003bac:	2909      	cmp	r1, #9
 8003bae:	7042      	strb	r2, [r0, #1]
 8003bb0:	dd2b      	ble.n	8003c0a <__exponent+0x70>
 8003bb2:	f10d 0407 	add.w	r4, sp, #7
 8003bb6:	46a4      	mov	ip, r4
 8003bb8:	270a      	movs	r7, #10
 8003bba:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	46a6      	mov	lr, r4
 8003bc2:	fb07 1516 	mls	r5, r7, r6, r1
 8003bc6:	2a63      	cmp	r2, #99	; 0x63
 8003bc8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003bcc:	4631      	mov	r1, r6
 8003bce:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003bd6:	dcf0      	bgt.n	8003bba <__exponent+0x20>
 8003bd8:	3130      	adds	r1, #48	; 0x30
 8003bda:	f1ae 0502 	sub.w	r5, lr, #2
 8003bde:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003be2:	4629      	mov	r1, r5
 8003be4:	1c44      	adds	r4, r0, #1
 8003be6:	4561      	cmp	r1, ip
 8003be8:	d30a      	bcc.n	8003c00 <__exponent+0x66>
 8003bea:	f10d 0209 	add.w	r2, sp, #9
 8003bee:	eba2 020e 	sub.w	r2, r2, lr
 8003bf2:	4565      	cmp	r5, ip
 8003bf4:	bf88      	it	hi
 8003bf6:	2200      	movhi	r2, #0
 8003bf8:	4413      	add	r3, r2
 8003bfa:	1a18      	subs	r0, r3, r0
 8003bfc:	b003      	add	sp, #12
 8003bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c08:	e7ed      	b.n	8003be6 <__exponent+0x4c>
 8003c0a:	2330      	movs	r3, #48	; 0x30
 8003c0c:	3130      	adds	r1, #48	; 0x30
 8003c0e:	7083      	strb	r3, [r0, #2]
 8003c10:	70c1      	strb	r1, [r0, #3]
 8003c12:	1d03      	adds	r3, r0, #4
 8003c14:	e7f1      	b.n	8003bfa <__exponent+0x60>
	...

08003c18 <_printf_float>:
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	b091      	sub	sp, #68	; 0x44
 8003c1e:	460c      	mov	r4, r1
 8003c20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003c24:	4616      	mov	r6, r2
 8003c26:	461f      	mov	r7, r3
 8003c28:	4605      	mov	r5, r0
 8003c2a:	f001 fa43 	bl	80050b4 <_localeconv_r>
 8003c2e:	6803      	ldr	r3, [r0, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	9309      	str	r3, [sp, #36]	; 0x24
 8003c34:	f7fc fa8c 	bl	8000150 <strlen>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8003c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c40:	900a      	str	r0, [sp, #40]	; 0x28
 8003c42:	3307      	adds	r3, #7
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	f103 0208 	add.w	r2, r3, #8
 8003c4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003c50:	f8d4 b000 	ldr.w	fp, [r4]
 8003c54:	f8c8 2000 	str.w	r2, [r8]
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003c64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	4640      	mov	r0, r8
 8003c70:	4b9c      	ldr	r3, [pc, #624]	; (8003ee4 <_printf_float+0x2cc>)
 8003c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c74:	f7fc feca 	bl	8000a0c <__aeabi_dcmpun>
 8003c78:	bb70      	cbnz	r0, 8003cd8 <_printf_float+0xc0>
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7e:	4640      	mov	r0, r8
 8003c80:	4b98      	ldr	r3, [pc, #608]	; (8003ee4 <_printf_float+0x2cc>)
 8003c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c84:	f7fc fea4 	bl	80009d0 <__aeabi_dcmple>
 8003c88:	bb30      	cbnz	r0, 8003cd8 <_printf_float+0xc0>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4640      	mov	r0, r8
 8003c90:	4651      	mov	r1, sl
 8003c92:	f7fc fe93 	bl	80009bc <__aeabi_dcmplt>
 8003c96:	b110      	cbz	r0, 8003c9e <_printf_float+0x86>
 8003c98:	232d      	movs	r3, #45	; 0x2d
 8003c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9e:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <_printf_float+0x2d0>)
 8003ca0:	4892      	ldr	r0, [pc, #584]	; (8003eec <_printf_float+0x2d4>)
 8003ca2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ca6:	bf94      	ite	ls
 8003ca8:	4698      	movls	r8, r3
 8003caa:	4680      	movhi	r8, r0
 8003cac:	2303      	movs	r3, #3
 8003cae:	f04f 0a00 	mov.w	sl, #0
 8003cb2:	6123      	str	r3, [r4, #16]
 8003cb4:	f02b 0304 	bic.w	r3, fp, #4
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	4633      	mov	r3, r6
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	9700      	str	r7, [sp, #0]
 8003cc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003cc4:	f000 f9d4 	bl	8004070 <_printf_common>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	f040 8090 	bne.w	8003dee <_printf_float+0x1d6>
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd2:	b011      	add	sp, #68	; 0x44
 8003cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd8:	4642      	mov	r2, r8
 8003cda:	4653      	mov	r3, sl
 8003cdc:	4640      	mov	r0, r8
 8003cde:	4651      	mov	r1, sl
 8003ce0:	f7fc fe94 	bl	8000a0c <__aeabi_dcmpun>
 8003ce4:	b148      	cbz	r0, 8003cfa <_printf_float+0xe2>
 8003ce6:	f1ba 0f00 	cmp.w	sl, #0
 8003cea:	bfb8      	it	lt
 8003cec:	232d      	movlt	r3, #45	; 0x2d
 8003cee:	4880      	ldr	r0, [pc, #512]	; (8003ef0 <_printf_float+0x2d8>)
 8003cf0:	bfb8      	it	lt
 8003cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <_printf_float+0x2dc>)
 8003cf8:	e7d3      	b.n	8003ca2 <_printf_float+0x8a>
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	d142      	bne.n	8003d8a <_printf_float+0x172>
 8003d04:	2306      	movs	r3, #6
 8003d06:	6063      	str	r3, [r4, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	9206      	str	r2, [sp, #24]
 8003d0c:	aa0e      	add	r2, sp, #56	; 0x38
 8003d0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003d12:	aa0d      	add	r2, sp, #52	; 0x34
 8003d14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003d18:	9203      	str	r2, [sp, #12]
 8003d1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003d1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	4642      	mov	r2, r8
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	4653      	mov	r3, sl
 8003d2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d30:	f7ff fed4 	bl	8003adc <__cvt>
 8003d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d36:	4680      	mov	r8, r0
 8003d38:	2947      	cmp	r1, #71	; 0x47
 8003d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d3c:	d108      	bne.n	8003d50 <_printf_float+0x138>
 8003d3e:	1cc8      	adds	r0, r1, #3
 8003d40:	db02      	blt.n	8003d48 <_printf_float+0x130>
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	4299      	cmp	r1, r3
 8003d46:	dd40      	ble.n	8003dca <_printf_float+0x1b2>
 8003d48:	f1a9 0902 	sub.w	r9, r9, #2
 8003d4c:	fa5f f989 	uxtb.w	r9, r9
 8003d50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d54:	d81f      	bhi.n	8003d96 <_printf_float+0x17e>
 8003d56:	464a      	mov	r2, r9
 8003d58:	3901      	subs	r1, #1
 8003d5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d5e:	910d      	str	r1, [sp, #52]	; 0x34
 8003d60:	f7ff ff1b 	bl	8003b9a <__exponent>
 8003d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d66:	4682      	mov	sl, r0
 8003d68:	1813      	adds	r3, r2, r0
 8003d6a:	2a01      	cmp	r2, #1
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	dc02      	bgt.n	8003d76 <_printf_float+0x15e>
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	07d2      	lsls	r2, r2, #31
 8003d74:	d501      	bpl.n	8003d7a <_printf_float+0x162>
 8003d76:	3301      	adds	r3, #1
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d09b      	beq.n	8003cba <_printf_float+0xa2>
 8003d82:	232d      	movs	r3, #45	; 0x2d
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	e797      	b.n	8003cba <_printf_float+0xa2>
 8003d8a:	2947      	cmp	r1, #71	; 0x47
 8003d8c:	d1bc      	bne.n	8003d08 <_printf_float+0xf0>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ba      	bne.n	8003d08 <_printf_float+0xf0>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7b7      	b.n	8003d06 <_printf_float+0xee>
 8003d96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003d9a:	d118      	bne.n	8003dce <_printf_float+0x1b6>
 8003d9c:	2900      	cmp	r1, #0
 8003d9e:	6863      	ldr	r3, [r4, #4]
 8003da0:	dd0b      	ble.n	8003dba <_printf_float+0x1a2>
 8003da2:	6121      	str	r1, [r4, #16]
 8003da4:	b913      	cbnz	r3, 8003dac <_printf_float+0x194>
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	07d0      	lsls	r0, r2, #31
 8003daa:	d502      	bpl.n	8003db2 <_printf_float+0x19a>
 8003dac:	3301      	adds	r3, #1
 8003dae:	440b      	add	r3, r1
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	f04f 0a00 	mov.w	sl, #0
 8003db6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003db8:	e7df      	b.n	8003d7a <_printf_float+0x162>
 8003dba:	b913      	cbnz	r3, 8003dc2 <_printf_float+0x1aa>
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	07d2      	lsls	r2, r2, #31
 8003dc0:	d501      	bpl.n	8003dc6 <_printf_float+0x1ae>
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	e7f4      	b.n	8003db0 <_printf_float+0x198>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e7f2      	b.n	8003db0 <_printf_float+0x198>
 8003dca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	db05      	blt.n	8003de0 <_printf_float+0x1c8>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	6121      	str	r1, [r4, #16]
 8003dd8:	07d8      	lsls	r0, r3, #31
 8003dda:	d5ea      	bpl.n	8003db2 <_printf_float+0x19a>
 8003ddc:	1c4b      	adds	r3, r1, #1
 8003dde:	e7e7      	b.n	8003db0 <_printf_float+0x198>
 8003de0:	2900      	cmp	r1, #0
 8003de2:	bfcc      	ite	gt
 8003de4:	2201      	movgt	r2, #1
 8003de6:	f1c1 0202 	rsble	r2, r1, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	e7e0      	b.n	8003db0 <_printf_float+0x198>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	055a      	lsls	r2, r3, #21
 8003df2:	d407      	bmi.n	8003e04 <_printf_float+0x1ec>
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	4642      	mov	r2, r8
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	47b8      	blx	r7
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d12b      	bne.n	8003e5a <_printf_float+0x242>
 8003e02:	e764      	b.n	8003cce <_printf_float+0xb6>
 8003e04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e08:	f240 80dd 	bls.w	8003fc6 <_printf_float+0x3ae>
 8003e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e10:	2200      	movs	r2, #0
 8003e12:	2300      	movs	r3, #0
 8003e14:	f7fc fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d033      	beq.n	8003e84 <_printf_float+0x26c>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <_printf_float+0x2e0>)
 8003e24:	47b8      	blx	r7
 8003e26:	3001      	adds	r0, #1
 8003e28:	f43f af51 	beq.w	8003cce <_printf_float+0xb6>
 8003e2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e30:	429a      	cmp	r2, r3
 8003e32:	db02      	blt.n	8003e3a <_printf_float+0x222>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	07d8      	lsls	r0, r3, #31
 8003e38:	d50f      	bpl.n	8003e5a <_printf_float+0x242>
 8003e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	f43f af42 	beq.w	8003cce <_printf_float+0xb6>
 8003e4a:	f04f 0800 	mov.w	r8, #0
 8003e4e:	f104 091a 	add.w	r9, r4, #26
 8003e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e54:	3b01      	subs	r3, #1
 8003e56:	4543      	cmp	r3, r8
 8003e58:	dc09      	bgt.n	8003e6e <_printf_float+0x256>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	079b      	lsls	r3, r3, #30
 8003e5e:	f100 8102 	bmi.w	8004066 <_printf_float+0x44e>
 8003e62:	68e0      	ldr	r0, [r4, #12]
 8003e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e66:	4298      	cmp	r0, r3
 8003e68:	bfb8      	it	lt
 8003e6a:	4618      	movlt	r0, r3
 8003e6c:	e731      	b.n	8003cd2 <_printf_float+0xba>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	464a      	mov	r2, r9
 8003e72:	4631      	mov	r1, r6
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b8      	blx	r7
 8003e78:	3001      	adds	r0, #1
 8003e7a:	f43f af28 	beq.w	8003cce <_printf_float+0xb6>
 8003e7e:	f108 0801 	add.w	r8, r8, #1
 8003e82:	e7e6      	b.n	8003e52 <_printf_float+0x23a>
 8003e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dc38      	bgt.n	8003efc <_printf_float+0x2e4>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <_printf_float+0x2e0>)
 8003e92:	47b8      	blx	r7
 8003e94:	3001      	adds	r0, #1
 8003e96:	f43f af1a 	beq.w	8003cce <_printf_float+0xb6>
 8003e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d102      	bne.n	8003ea8 <_printf_float+0x290>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	07d9      	lsls	r1, r3, #31
 8003ea6:	d5d8      	bpl.n	8003e5a <_printf_float+0x242>
 8003ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af0b 	beq.w	8003cce <_printf_float+0xb6>
 8003eb8:	f04f 0900 	mov.w	r9, #0
 8003ebc:	f104 0a1a 	add.w	sl, r4, #26
 8003ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	454b      	cmp	r3, r9
 8003ec6:	dc01      	bgt.n	8003ecc <_printf_float+0x2b4>
 8003ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eca:	e794      	b.n	8003df6 <_printf_float+0x1de>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4652      	mov	r2, sl
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f aef9 	beq.w	8003cce <_printf_float+0xb6>
 8003edc:	f109 0901 	add.w	r9, r9, #1
 8003ee0:	e7ee      	b.n	8003ec0 <_printf_float+0x2a8>
 8003ee2:	bf00      	nop
 8003ee4:	7fefffff 	.word	0x7fefffff
 8003ee8:	0800656c 	.word	0x0800656c
 8003eec:	08006570 	.word	0x08006570
 8003ef0:	08006578 	.word	0x08006578
 8003ef4:	08006574 	.word	0x08006574
 8003ef8:	0800657c 	.word	0x0800657c
 8003efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bfa8      	it	ge
 8003f04:	461a      	movge	r2, r3
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	4691      	mov	r9, r2
 8003f0a:	dc37      	bgt.n	8003f7c <_printf_float+0x364>
 8003f0c:	f04f 0b00 	mov.w	fp, #0
 8003f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f14:	f104 021a 	add.w	r2, r4, #26
 8003f18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003f1c:	ebaa 0309 	sub.w	r3, sl, r9
 8003f20:	455b      	cmp	r3, fp
 8003f22:	dc33      	bgt.n	8003f8c <_printf_float+0x374>
 8003f24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	db3b      	blt.n	8003fa4 <_printf_float+0x38c>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	07da      	lsls	r2, r3, #31
 8003f30:	d438      	bmi.n	8003fa4 <_printf_float+0x38c>
 8003f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f36:	eba2 030a 	sub.w	r3, r2, sl
 8003f3a:	eba2 0901 	sub.w	r9, r2, r1
 8003f3e:	4599      	cmp	r9, r3
 8003f40:	bfa8      	it	ge
 8003f42:	4699      	movge	r9, r3
 8003f44:	f1b9 0f00 	cmp.w	r9, #0
 8003f48:	dc34      	bgt.n	8003fb4 <_printf_float+0x39c>
 8003f4a:	f04f 0800 	mov.w	r8, #0
 8003f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f52:	f104 0a1a 	add.w	sl, r4, #26
 8003f56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	eba3 0309 	sub.w	r3, r3, r9
 8003f60:	4543      	cmp	r3, r8
 8003f62:	f77f af7a 	ble.w	8003e5a <_printf_float+0x242>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4652      	mov	r2, sl
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f aeac 	beq.w	8003cce <_printf_float+0xb6>
 8003f76:	f108 0801 	add.w	r8, r8, #1
 8003f7a:	e7ec      	b.n	8003f56 <_printf_float+0x33e>
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4642      	mov	r2, r8
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b8      	blx	r7
 8003f86:	3001      	adds	r0, #1
 8003f88:	d1c0      	bne.n	8003f0c <_printf_float+0x2f4>
 8003f8a:	e6a0      	b.n	8003cce <_printf_float+0xb6>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f94:	47b8      	blx	r7
 8003f96:	3001      	adds	r0, #1
 8003f98:	f43f ae99 	beq.w	8003cce <_printf_float+0xb6>
 8003f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f9e:	f10b 0b01 	add.w	fp, fp, #1
 8003fa2:	e7b9      	b.n	8003f18 <_printf_float+0x300>
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003faa:	4628      	mov	r0, r5
 8003fac:	47b8      	blx	r7
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d1bf      	bne.n	8003f32 <_printf_float+0x31a>
 8003fb2:	e68c      	b.n	8003cce <_printf_float+0xb6>
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	eb08 020a 	add.w	r2, r8, sl
 8003fbe:	47b8      	blx	r7
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d1c2      	bne.n	8003f4a <_printf_float+0x332>
 8003fc4:	e683      	b.n	8003cce <_printf_float+0xb6>
 8003fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fc8:	2a01      	cmp	r2, #1
 8003fca:	dc01      	bgt.n	8003fd0 <_printf_float+0x3b8>
 8003fcc:	07db      	lsls	r3, r3, #31
 8003fce:	d537      	bpl.n	8004040 <_printf_float+0x428>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f43f ae77 	beq.w	8003cce <_printf_float+0xb6>
 8003fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f ae6f 	beq.w	8003cce <_printf_float+0xb6>
 8003ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f7fc fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8003ffc:	b9d8      	cbnz	r0, 8004036 <_printf_float+0x41e>
 8003ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004000:	f108 0201 	add.w	r2, r8, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	4631      	mov	r1, r6
 8004008:	4628      	mov	r0, r5
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	d10e      	bne.n	800402e <_printf_float+0x416>
 8004010:	e65d      	b.n	8003cce <_printf_float+0xb6>
 8004012:	2301      	movs	r3, #1
 8004014:	464a      	mov	r2, r9
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae56 	beq.w	8003cce <_printf_float+0xb6>
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004028:	3b01      	subs	r3, #1
 800402a:	4543      	cmp	r3, r8
 800402c:	dcf1      	bgt.n	8004012 <_printf_float+0x3fa>
 800402e:	4653      	mov	r3, sl
 8004030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004034:	e6e0      	b.n	8003df8 <_printf_float+0x1e0>
 8004036:	f04f 0800 	mov.w	r8, #0
 800403a:	f104 091a 	add.w	r9, r4, #26
 800403e:	e7f2      	b.n	8004026 <_printf_float+0x40e>
 8004040:	2301      	movs	r3, #1
 8004042:	4642      	mov	r2, r8
 8004044:	e7df      	b.n	8004006 <_printf_float+0x3ee>
 8004046:	2301      	movs	r3, #1
 8004048:	464a      	mov	r2, r9
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f ae3c 	beq.w	8003cce <_printf_float+0xb6>
 8004056:	f108 0801 	add.w	r8, r8, #1
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800405e:	1a5b      	subs	r3, r3, r1
 8004060:	4543      	cmp	r3, r8
 8004062:	dcf0      	bgt.n	8004046 <_printf_float+0x42e>
 8004064:	e6fd      	b.n	8003e62 <_printf_float+0x24a>
 8004066:	f04f 0800 	mov.w	r8, #0
 800406a:	f104 0919 	add.w	r9, r4, #25
 800406e:	e7f4      	b.n	800405a <_printf_float+0x442>

08004070 <_printf_common>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	4616      	mov	r6, r2
 8004076:	4699      	mov	r9, r3
 8004078:	688a      	ldr	r2, [r1, #8]
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	4607      	mov	r7, r0
 800407e:	4293      	cmp	r3, r2
 8004080:	bfb8      	it	lt
 8004082:	4613      	movlt	r3, r2
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800408a:	460c      	mov	r4, r1
 800408c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004090:	b10a      	cbz	r2, 8004096 <_printf_common+0x26>
 8004092:	3301      	adds	r3, #1
 8004094:	6033      	str	r3, [r6, #0]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0699      	lsls	r1, r3, #26
 800409a:	bf42      	ittt	mi
 800409c:	6833      	ldrmi	r3, [r6, #0]
 800409e:	3302      	addmi	r3, #2
 80040a0:	6033      	strmi	r3, [r6, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	f015 0506 	ands.w	r5, r5, #6
 80040a8:	d106      	bne.n	80040b8 <_printf_common+0x48>
 80040aa:	f104 0a19 	add.w	sl, r4, #25
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dc28      	bgt.n	800410a <_printf_common+0x9a>
 80040b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040bc:	1e13      	subs	r3, r2, #0
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	0692      	lsls	r2, r2, #26
 80040c6:	d42d      	bmi.n	8004124 <_printf_common+0xb4>
 80040c8:	4649      	mov	r1, r9
 80040ca:	4638      	mov	r0, r7
 80040cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d020      	beq.n	8004118 <_printf_common+0xa8>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	68e5      	ldr	r5, [r4, #12]
 80040da:	f003 0306 	and.w	r3, r3, #6
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf18      	it	ne
 80040e2:	2500      	movne	r5, #0
 80040e4:	6832      	ldr	r2, [r6, #0]
 80040e6:	f04f 0600 	mov.w	r6, #0
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	bf08      	it	eq
 80040ee:	1aad      	subeq	r5, r5, r2
 80040f0:	6922      	ldr	r2, [r4, #16]
 80040f2:	bf08      	it	eq
 80040f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfc4      	itt	gt
 80040fc:	1a9b      	subgt	r3, r3, r2
 80040fe:	18ed      	addgt	r5, r5, r3
 8004100:	341a      	adds	r4, #26
 8004102:	42b5      	cmp	r5, r6
 8004104:	d11a      	bne.n	800413c <_printf_common+0xcc>
 8004106:	2000      	movs	r0, #0
 8004108:	e008      	b.n	800411c <_printf_common+0xac>
 800410a:	2301      	movs	r3, #1
 800410c:	4652      	mov	r2, sl
 800410e:	4649      	mov	r1, r9
 8004110:	4638      	mov	r0, r7
 8004112:	47c0      	blx	r8
 8004114:	3001      	adds	r0, #1
 8004116:	d103      	bne.n	8004120 <_printf_common+0xb0>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	3501      	adds	r5, #1
 8004122:	e7c4      	b.n	80040ae <_printf_common+0x3e>
 8004124:	2030      	movs	r0, #48	; 0x30
 8004126:	18e1      	adds	r1, r4, r3
 8004128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004132:	4422      	add	r2, r4
 8004134:	3302      	adds	r3, #2
 8004136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800413a:	e7c5      	b.n	80040c8 <_printf_common+0x58>
 800413c:	2301      	movs	r3, #1
 800413e:	4622      	mov	r2, r4
 8004140:	4649      	mov	r1, r9
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d0e6      	beq.n	8004118 <_printf_common+0xa8>
 800414a:	3601      	adds	r6, #1
 800414c:	e7d9      	b.n	8004102 <_printf_common+0x92>
	...

08004150 <_printf_i>:
 8004150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	460c      	mov	r4, r1
 8004156:	7e27      	ldrb	r7, [r4, #24]
 8004158:	4691      	mov	r9, r2
 800415a:	2f78      	cmp	r7, #120	; 0x78
 800415c:	4680      	mov	r8, r0
 800415e:	469a      	mov	sl, r3
 8004160:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004166:	d807      	bhi.n	8004178 <_printf_i+0x28>
 8004168:	2f62      	cmp	r7, #98	; 0x62
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x32>
 800416c:	2f00      	cmp	r7, #0
 800416e:	f000 80d9 	beq.w	8004324 <_printf_i+0x1d4>
 8004172:	2f58      	cmp	r7, #88	; 0x58
 8004174:	f000 80a4 	beq.w	80042c0 <_printf_i+0x170>
 8004178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800417c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004180:	e03a      	b.n	80041f8 <_printf_i+0xa8>
 8004182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004186:	2b15      	cmp	r3, #21
 8004188:	d8f6      	bhi.n	8004178 <_printf_i+0x28>
 800418a:	a001      	add	r0, pc, #4	; (adr r0, 8004190 <_printf_i+0x40>)
 800418c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041fd 	.word	0x080041fd
 8004198:	08004179 	.word	0x08004179
 800419c:	08004179 	.word	0x08004179
 80041a0:	08004179 	.word	0x08004179
 80041a4:	08004179 	.word	0x08004179
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004179 	.word	0x08004179
 80041b0:	08004179 	.word	0x08004179
 80041b4:	08004179 	.word	0x08004179
 80041b8:	08004179 	.word	0x08004179
 80041bc:	0800430b 	.word	0x0800430b
 80041c0:	0800422d 	.word	0x0800422d
 80041c4:	080042ed 	.word	0x080042ed
 80041c8:	08004179 	.word	0x08004179
 80041cc:	08004179 	.word	0x08004179
 80041d0:	0800432d 	.word	0x0800432d
 80041d4:	08004179 	.word	0x08004179
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	08004179 	.word	0x08004179
 80041e0:	08004179 	.word	0x08004179
 80041e4:	080042f5 	.word	0x080042f5
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	600a      	str	r2, [r1, #0]
 80041f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0a4      	b.n	8004346 <_printf_i+0x1f6>
 80041fc:	6825      	ldr	r5, [r4, #0]
 80041fe:	6808      	ldr	r0, [r1, #0]
 8004200:	062e      	lsls	r6, r5, #24
 8004202:	f100 0304 	add.w	r3, r0, #4
 8004206:	d50a      	bpl.n	800421e <_printf_i+0xce>
 8004208:	6805      	ldr	r5, [r0, #0]
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	2d00      	cmp	r5, #0
 800420e:	da03      	bge.n	8004218 <_printf_i+0xc8>
 8004210:	232d      	movs	r3, #45	; 0x2d
 8004212:	426d      	negs	r5, r5
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004218:	230a      	movs	r3, #10
 800421a:	485e      	ldr	r0, [pc, #376]	; (8004394 <_printf_i+0x244>)
 800421c:	e019      	b.n	8004252 <_printf_i+0x102>
 800421e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004222:	6805      	ldr	r5, [r0, #0]
 8004224:	600b      	str	r3, [r1, #0]
 8004226:	bf18      	it	ne
 8004228:	b22d      	sxthne	r5, r5
 800422a:	e7ef      	b.n	800420c <_printf_i+0xbc>
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	1d18      	adds	r0, r3, #4
 8004232:	6008      	str	r0, [r1, #0]
 8004234:	0628      	lsls	r0, r5, #24
 8004236:	d501      	bpl.n	800423c <_printf_i+0xec>
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	e002      	b.n	8004242 <_printf_i+0xf2>
 800423c:	0669      	lsls	r1, r5, #25
 800423e:	d5fb      	bpl.n	8004238 <_printf_i+0xe8>
 8004240:	881d      	ldrh	r5, [r3, #0]
 8004242:	2f6f      	cmp	r7, #111	; 0x6f
 8004244:	bf0c      	ite	eq
 8004246:	2308      	moveq	r3, #8
 8004248:	230a      	movne	r3, #10
 800424a:	4852      	ldr	r0, [pc, #328]	; (8004394 <_printf_i+0x244>)
 800424c:	2100      	movs	r1, #0
 800424e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004252:	6866      	ldr	r6, [r4, #4]
 8004254:	2e00      	cmp	r6, #0
 8004256:	bfa8      	it	ge
 8004258:	6821      	ldrge	r1, [r4, #0]
 800425a:	60a6      	str	r6, [r4, #8]
 800425c:	bfa4      	itt	ge
 800425e:	f021 0104 	bicge.w	r1, r1, #4
 8004262:	6021      	strge	r1, [r4, #0]
 8004264:	b90d      	cbnz	r5, 800426a <_printf_i+0x11a>
 8004266:	2e00      	cmp	r6, #0
 8004268:	d04d      	beq.n	8004306 <_printf_i+0x1b6>
 800426a:	4616      	mov	r6, r2
 800426c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004270:	fb03 5711 	mls	r7, r3, r1, r5
 8004274:	5dc7      	ldrb	r7, [r0, r7]
 8004276:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800427a:	462f      	mov	r7, r5
 800427c:	42bb      	cmp	r3, r7
 800427e:	460d      	mov	r5, r1
 8004280:	d9f4      	bls.n	800426c <_printf_i+0x11c>
 8004282:	2b08      	cmp	r3, #8
 8004284:	d10b      	bne.n	800429e <_printf_i+0x14e>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	07df      	lsls	r7, r3, #31
 800428a:	d508      	bpl.n	800429e <_printf_i+0x14e>
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	6861      	ldr	r1, [r4, #4]
 8004290:	4299      	cmp	r1, r3
 8004292:	bfde      	ittt	le
 8004294:	2330      	movle	r3, #48	; 0x30
 8004296:	f806 3c01 	strble.w	r3, [r6, #-1]
 800429a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800429e:	1b92      	subs	r2, r2, r6
 80042a0:	6122      	str	r2, [r4, #16]
 80042a2:	464b      	mov	r3, r9
 80042a4:	4621      	mov	r1, r4
 80042a6:	4640      	mov	r0, r8
 80042a8:	f8cd a000 	str.w	sl, [sp]
 80042ac:	aa03      	add	r2, sp, #12
 80042ae:	f7ff fedf 	bl	8004070 <_printf_common>
 80042b2:	3001      	adds	r0, #1
 80042b4:	d14c      	bne.n	8004350 <_printf_i+0x200>
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	b004      	add	sp, #16
 80042bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c0:	4834      	ldr	r0, [pc, #208]	; (8004394 <_printf_i+0x244>)
 80042c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042c6:	680e      	ldr	r6, [r1, #0]
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80042ce:	061f      	lsls	r7, r3, #24
 80042d0:	600e      	str	r6, [r1, #0]
 80042d2:	d514      	bpl.n	80042fe <_printf_i+0x1ae>
 80042d4:	07d9      	lsls	r1, r3, #31
 80042d6:	bf44      	itt	mi
 80042d8:	f043 0320 	orrmi.w	r3, r3, #32
 80042dc:	6023      	strmi	r3, [r4, #0]
 80042de:	b91d      	cbnz	r5, 80042e8 <_printf_i+0x198>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	2310      	movs	r3, #16
 80042ea:	e7af      	b.n	800424c <_printf_i+0xfc>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f043 0320 	orr.w	r3, r3, #32
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	2378      	movs	r3, #120	; 0x78
 80042f6:	4828      	ldr	r0, [pc, #160]	; (8004398 <_printf_i+0x248>)
 80042f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042fc:	e7e3      	b.n	80042c6 <_printf_i+0x176>
 80042fe:	065e      	lsls	r6, r3, #25
 8004300:	bf48      	it	mi
 8004302:	b2ad      	uxthmi	r5, r5
 8004304:	e7e6      	b.n	80042d4 <_printf_i+0x184>
 8004306:	4616      	mov	r6, r2
 8004308:	e7bb      	b.n	8004282 <_printf_i+0x132>
 800430a:	680b      	ldr	r3, [r1, #0]
 800430c:	6826      	ldr	r6, [r4, #0]
 800430e:	1d1d      	adds	r5, r3, #4
 8004310:	6960      	ldr	r0, [r4, #20]
 8004312:	600d      	str	r5, [r1, #0]
 8004314:	0635      	lsls	r5, r6, #24
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	d501      	bpl.n	800431e <_printf_i+0x1ce>
 800431a:	6018      	str	r0, [r3, #0]
 800431c:	e002      	b.n	8004324 <_printf_i+0x1d4>
 800431e:	0671      	lsls	r1, r6, #25
 8004320:	d5fb      	bpl.n	800431a <_printf_i+0x1ca>
 8004322:	8018      	strh	r0, [r3, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	4616      	mov	r6, r2
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	e7ba      	b.n	80042a2 <_printf_i+0x152>
 800432c:	680b      	ldr	r3, [r1, #0]
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	600a      	str	r2, [r1, #0]
 8004332:	681e      	ldr	r6, [r3, #0]
 8004334:	2100      	movs	r1, #0
 8004336:	4630      	mov	r0, r6
 8004338:	6862      	ldr	r2, [r4, #4]
 800433a:	f000 febf 	bl	80050bc <memchr>
 800433e:	b108      	cbz	r0, 8004344 <_printf_i+0x1f4>
 8004340:	1b80      	subs	r0, r0, r6
 8004342:	6060      	str	r0, [r4, #4]
 8004344:	6863      	ldr	r3, [r4, #4]
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	2300      	movs	r3, #0
 800434a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800434e:	e7a8      	b.n	80042a2 <_printf_i+0x152>
 8004350:	4632      	mov	r2, r6
 8004352:	4649      	mov	r1, r9
 8004354:	4640      	mov	r0, r8
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	47d0      	blx	sl
 800435a:	3001      	adds	r0, #1
 800435c:	d0ab      	beq.n	80042b6 <_printf_i+0x166>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	079b      	lsls	r3, r3, #30
 8004362:	d413      	bmi.n	800438c <_printf_i+0x23c>
 8004364:	68e0      	ldr	r0, [r4, #12]
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	4298      	cmp	r0, r3
 800436a:	bfb8      	it	lt
 800436c:	4618      	movlt	r0, r3
 800436e:	e7a4      	b.n	80042ba <_printf_i+0x16a>
 8004370:	2301      	movs	r3, #1
 8004372:	4632      	mov	r2, r6
 8004374:	4649      	mov	r1, r9
 8004376:	4640      	mov	r0, r8
 8004378:	47d0      	blx	sl
 800437a:	3001      	adds	r0, #1
 800437c:	d09b      	beq.n	80042b6 <_printf_i+0x166>
 800437e:	3501      	adds	r5, #1
 8004380:	68e3      	ldr	r3, [r4, #12]
 8004382:	9903      	ldr	r1, [sp, #12]
 8004384:	1a5b      	subs	r3, r3, r1
 8004386:	42ab      	cmp	r3, r5
 8004388:	dcf2      	bgt.n	8004370 <_printf_i+0x220>
 800438a:	e7eb      	b.n	8004364 <_printf_i+0x214>
 800438c:	2500      	movs	r5, #0
 800438e:	f104 0619 	add.w	r6, r4, #25
 8004392:	e7f5      	b.n	8004380 <_printf_i+0x230>
 8004394:	0800657e 	.word	0x0800657e
 8004398:	0800658f 	.word	0x0800658f

0800439c <_sbrk_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	2300      	movs	r3, #0
 80043a0:	4d05      	ldr	r5, [pc, #20]	; (80043b8 <_sbrk_r+0x1c>)
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	f7fd f9ae 	bl	8001708 <_sbrk>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_sbrk_r+0x1a>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_sbrk_r+0x1a>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	2000025c 	.word	0x2000025c

080043bc <quorem>:
 80043bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	6903      	ldr	r3, [r0, #16]
 80043c2:	690c      	ldr	r4, [r1, #16]
 80043c4:	4607      	mov	r7, r0
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	f2c0 8083 	blt.w	80044d2 <quorem+0x116>
 80043cc:	3c01      	subs	r4, #1
 80043ce:	f100 0514 	add.w	r5, r0, #20
 80043d2:	f101 0814 	add.w	r8, r1, #20
 80043d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043e4:	3301      	adds	r3, #1
 80043e6:	429a      	cmp	r2, r3
 80043e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043f4:	d332      	bcc.n	800445c <quorem+0xa0>
 80043f6:	f04f 0e00 	mov.w	lr, #0
 80043fa:	4640      	mov	r0, r8
 80043fc:	46ac      	mov	ip, r5
 80043fe:	46f2      	mov	sl, lr
 8004400:	f850 2b04 	ldr.w	r2, [r0], #4
 8004404:	b293      	uxth	r3, r2
 8004406:	fb06 e303 	mla	r3, r6, r3, lr
 800440a:	0c12      	lsrs	r2, r2, #16
 800440c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004410:	fb06 e202 	mla	r2, r6, r2, lr
 8004414:	b29b      	uxth	r3, r3
 8004416:	ebaa 0303 	sub.w	r3, sl, r3
 800441a:	f8dc a000 	ldr.w	sl, [ip]
 800441e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004422:	fa1f fa8a 	uxth.w	sl, sl
 8004426:	4453      	add	r3, sl
 8004428:	fa1f fa82 	uxth.w	sl, r2
 800442c:	f8dc 2000 	ldr.w	r2, [ip]
 8004430:	4581      	cmp	r9, r0
 8004432:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004436:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800443a:	b29b      	uxth	r3, r3
 800443c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004440:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004444:	f84c 3b04 	str.w	r3, [ip], #4
 8004448:	d2da      	bcs.n	8004400 <quorem+0x44>
 800444a:	f855 300b 	ldr.w	r3, [r5, fp]
 800444e:	b92b      	cbnz	r3, 800445c <quorem+0xa0>
 8004450:	9b01      	ldr	r3, [sp, #4]
 8004452:	3b04      	subs	r3, #4
 8004454:	429d      	cmp	r5, r3
 8004456:	461a      	mov	r2, r3
 8004458:	d32f      	bcc.n	80044ba <quorem+0xfe>
 800445a:	613c      	str	r4, [r7, #16]
 800445c:	4638      	mov	r0, r7
 800445e:	f001 f8cf 	bl	8005600 <__mcmp>
 8004462:	2800      	cmp	r0, #0
 8004464:	db25      	blt.n	80044b2 <quorem+0xf6>
 8004466:	4628      	mov	r0, r5
 8004468:	f04f 0c00 	mov.w	ip, #0
 800446c:	3601      	adds	r6, #1
 800446e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004472:	f8d0 e000 	ldr.w	lr, [r0]
 8004476:	b28b      	uxth	r3, r1
 8004478:	ebac 0303 	sub.w	r3, ip, r3
 800447c:	fa1f f28e 	uxth.w	r2, lr
 8004480:	4413      	add	r3, r2
 8004482:	0c0a      	lsrs	r2, r1, #16
 8004484:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004492:	45c1      	cmp	r9, r8
 8004494:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004498:	f840 3b04 	str.w	r3, [r0], #4
 800449c:	d2e7      	bcs.n	800446e <quorem+0xb2>
 800449e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044a6:	b922      	cbnz	r2, 80044b2 <quorem+0xf6>
 80044a8:	3b04      	subs	r3, #4
 80044aa:	429d      	cmp	r5, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	d30a      	bcc.n	80044c6 <quorem+0x10a>
 80044b0:	613c      	str	r4, [r7, #16]
 80044b2:	4630      	mov	r0, r6
 80044b4:	b003      	add	sp, #12
 80044b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	3b04      	subs	r3, #4
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d1cb      	bne.n	800445a <quorem+0x9e>
 80044c2:	3c01      	subs	r4, #1
 80044c4:	e7c6      	b.n	8004454 <quorem+0x98>
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	d1f0      	bne.n	80044b0 <quorem+0xf4>
 80044ce:	3c01      	subs	r4, #1
 80044d0:	e7eb      	b.n	80044aa <quorem+0xee>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e7ee      	b.n	80044b4 <quorem+0xf8>
	...

080044d8 <_dtoa_r>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	4616      	mov	r6, r2
 80044de:	461f      	mov	r7, r3
 80044e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80044e2:	b099      	sub	sp, #100	; 0x64
 80044e4:	4605      	mov	r5, r0
 80044e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80044ee:	b974      	cbnz	r4, 800450e <_dtoa_r+0x36>
 80044f0:	2010      	movs	r0, #16
 80044f2:	f7ff fa3d 	bl	8003970 <malloc>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6268      	str	r0, [r5, #36]	; 0x24
 80044fa:	b920      	cbnz	r0, 8004506 <_dtoa_r+0x2e>
 80044fc:	21ea      	movs	r1, #234	; 0xea
 80044fe:	4bae      	ldr	r3, [pc, #696]	; (80047b8 <_dtoa_r+0x2e0>)
 8004500:	48ae      	ldr	r0, [pc, #696]	; (80047bc <_dtoa_r+0x2e4>)
 8004502:	f001 f993 	bl	800582c <__assert_func>
 8004506:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800450a:	6004      	str	r4, [r0, #0]
 800450c:	60c4      	str	r4, [r0, #12]
 800450e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	b151      	cbz	r1, 800452a <_dtoa_r+0x52>
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	2301      	movs	r3, #1
 8004518:	4093      	lsls	r3, r2
 800451a:	604a      	str	r2, [r1, #4]
 800451c:	608b      	str	r3, [r1, #8]
 800451e:	4628      	mov	r0, r5
 8004520:	f000 fe34 	bl	800518c <_Bfree>
 8004524:	2200      	movs	r2, #0
 8004526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	1e3b      	subs	r3, r7, #0
 800452c:	bfaf      	iteee	ge
 800452e:	2300      	movge	r3, #0
 8004530:	2201      	movlt	r2, #1
 8004532:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004536:	9305      	strlt	r3, [sp, #20]
 8004538:	bfa8      	it	ge
 800453a:	f8c8 3000 	strge.w	r3, [r8]
 800453e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004542:	4b9f      	ldr	r3, [pc, #636]	; (80047c0 <_dtoa_r+0x2e8>)
 8004544:	bfb8      	it	lt
 8004546:	f8c8 2000 	strlt.w	r2, [r8]
 800454a:	ea33 0309 	bics.w	r3, r3, r9
 800454e:	d119      	bne.n	8004584 <_dtoa_r+0xac>
 8004550:	f242 730f 	movw	r3, #9999	; 0x270f
 8004554:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800455c:	4333      	orrs	r3, r6
 800455e:	f000 8580 	beq.w	8005062 <_dtoa_r+0xb8a>
 8004562:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004564:	b953      	cbnz	r3, 800457c <_dtoa_r+0xa4>
 8004566:	4b97      	ldr	r3, [pc, #604]	; (80047c4 <_dtoa_r+0x2ec>)
 8004568:	e022      	b.n	80045b0 <_dtoa_r+0xd8>
 800456a:	4b97      	ldr	r3, [pc, #604]	; (80047c8 <_dtoa_r+0x2f0>)
 800456c:	9308      	str	r3, [sp, #32]
 800456e:	3308      	adds	r3, #8
 8004570:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	9808      	ldr	r0, [sp, #32]
 8004576:	b019      	add	sp, #100	; 0x64
 8004578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457c:	4b91      	ldr	r3, [pc, #580]	; (80047c4 <_dtoa_r+0x2ec>)
 800457e:	9308      	str	r3, [sp, #32]
 8004580:	3303      	adds	r3, #3
 8004582:	e7f5      	b.n	8004570 <_dtoa_r+0x98>
 8004584:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004588:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800458c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	2300      	movs	r3, #0
 8004594:	f7fc fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8004598:	4680      	mov	r8, r0
 800459a:	b158      	cbz	r0, 80045b4 <_dtoa_r+0xdc>
 800459c:	2301      	movs	r3, #1
 800459e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8559 	beq.w	800505c <_dtoa_r+0xb84>
 80045aa:	4888      	ldr	r0, [pc, #544]	; (80047cc <_dtoa_r+0x2f4>)
 80045ac:	6018      	str	r0, [r3, #0]
 80045ae:	1e43      	subs	r3, r0, #1
 80045b0:	9308      	str	r3, [sp, #32]
 80045b2:	e7df      	b.n	8004574 <_dtoa_r+0x9c>
 80045b4:	ab16      	add	r3, sp, #88	; 0x58
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	ab17      	add	r3, sp, #92	; 0x5c
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4628      	mov	r0, r5
 80045be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045c2:	f001 f8c9 	bl	8005758 <__d2b>
 80045c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80045ca:	4682      	mov	sl, r0
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	d07e      	beq.n	80046ce <_dtoa_r+0x1f6>
 80045d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80045e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80045e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80045ea:	2200      	movs	r2, #0
 80045ec:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <_dtoa_r+0x2f8>)
 80045ee:	f7fb fdbb 	bl	8000168 <__aeabi_dsub>
 80045f2:	a36b      	add	r3, pc, #428	; (adr r3, 80047a0 <_dtoa_r+0x2c8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb ff6e 	bl	80004d8 <__aeabi_dmul>
 80045fc:	a36a      	add	r3, pc, #424	; (adr r3, 80047a8 <_dtoa_r+0x2d0>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fdb3 	bl	800016c <__adddf3>
 8004606:	4606      	mov	r6, r0
 8004608:	4620      	mov	r0, r4
 800460a:	460f      	mov	r7, r1
 800460c:	f7fb fefa 	bl	8000404 <__aeabi_i2d>
 8004610:	a367      	add	r3, pc, #412	; (adr r3, 80047b0 <_dtoa_r+0x2d8>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ff5f 	bl	80004d8 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fb fda3 	bl	800016c <__adddf3>
 8004626:	4606      	mov	r6, r0
 8004628:	460f      	mov	r7, r1
 800462a:	f7fc fa05 	bl	8000a38 <__aeabi_d2iz>
 800462e:	2200      	movs	r2, #0
 8004630:	4681      	mov	r9, r0
 8004632:	2300      	movs	r3, #0
 8004634:	4630      	mov	r0, r6
 8004636:	4639      	mov	r1, r7
 8004638:	f7fc f9c0 	bl	80009bc <__aeabi_dcmplt>
 800463c:	b148      	cbz	r0, 8004652 <_dtoa_r+0x17a>
 800463e:	4648      	mov	r0, r9
 8004640:	f7fb fee0 	bl	8000404 <__aeabi_i2d>
 8004644:	4632      	mov	r2, r6
 8004646:	463b      	mov	r3, r7
 8004648:	f7fc f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800464c:	b908      	cbnz	r0, 8004652 <_dtoa_r+0x17a>
 800464e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004652:	f1b9 0f16 	cmp.w	r9, #22
 8004656:	d857      	bhi.n	8004708 <_dtoa_r+0x230>
 8004658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800465c:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <_dtoa_r+0x2fc>)
 800465e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fc f9a9 	bl	80009bc <__aeabi_dcmplt>
 800466a:	2800      	cmp	r0, #0
 800466c:	d04e      	beq.n	800470c <_dtoa_r+0x234>
 800466e:	2300      	movs	r3, #0
 8004670:	f109 39ff 	add.w	r9, r9, #4294967295
 8004674:	930f      	str	r3, [sp, #60]	; 0x3c
 8004676:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004678:	1b1c      	subs	r4, r3, r4
 800467a:	1e63      	subs	r3, r4, #1
 800467c:	9309      	str	r3, [sp, #36]	; 0x24
 800467e:	bf49      	itett	mi
 8004680:	f1c4 0301 	rsbmi	r3, r4, #1
 8004684:	2300      	movpl	r3, #0
 8004686:	9306      	strmi	r3, [sp, #24]
 8004688:	2300      	movmi	r3, #0
 800468a:	bf54      	ite	pl
 800468c:	9306      	strpl	r3, [sp, #24]
 800468e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004690:	f1b9 0f00 	cmp.w	r9, #0
 8004694:	db3c      	blt.n	8004710 <_dtoa_r+0x238>
 8004696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004698:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800469c:	444b      	add	r3, r9
 800469e:	9309      	str	r3, [sp, #36]	; 0x24
 80046a0:	2300      	movs	r3, #0
 80046a2:	930a      	str	r3, [sp, #40]	; 0x28
 80046a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d86c      	bhi.n	8004784 <_dtoa_r+0x2ac>
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	bfc4      	itt	gt
 80046ae:	3b04      	subgt	r3, #4
 80046b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80046b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046b4:	bfc8      	it	gt
 80046b6:	2400      	movgt	r4, #0
 80046b8:	f1a3 0302 	sub.w	r3, r3, #2
 80046bc:	bfd8      	it	le
 80046be:	2401      	movle	r4, #1
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	f200 808b 	bhi.w	80047dc <_dtoa_r+0x304>
 80046c6:	e8df f003 	tbb	[pc, r3]
 80046ca:	4f2d      	.short	0x4f2d
 80046cc:	5b4d      	.short	0x5b4d
 80046ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80046d2:	441c      	add	r4, r3
 80046d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80046d8:	2b20      	cmp	r3, #32
 80046da:	bfc3      	ittte	gt
 80046dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80046e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80046e8:	f1c3 0320 	rsble	r3, r3, #32
 80046ec:	bfc6      	itte	gt
 80046ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046f2:	4318      	orrgt	r0, r3
 80046f4:	fa06 f003 	lslle.w	r0, r6, r3
 80046f8:	f7fb fe74 	bl	80003e4 <__aeabi_ui2d>
 80046fc:	2301      	movs	r3, #1
 80046fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004702:	3c01      	subs	r4, #1
 8004704:	9313      	str	r3, [sp, #76]	; 0x4c
 8004706:	e770      	b.n	80045ea <_dtoa_r+0x112>
 8004708:	2301      	movs	r3, #1
 800470a:	e7b3      	b.n	8004674 <_dtoa_r+0x19c>
 800470c:	900f      	str	r0, [sp, #60]	; 0x3c
 800470e:	e7b2      	b.n	8004676 <_dtoa_r+0x19e>
 8004710:	9b06      	ldr	r3, [sp, #24]
 8004712:	eba3 0309 	sub.w	r3, r3, r9
 8004716:	9306      	str	r3, [sp, #24]
 8004718:	f1c9 0300 	rsb	r3, r9, #0
 800471c:	930a      	str	r3, [sp, #40]	; 0x28
 800471e:	2300      	movs	r3, #0
 8004720:	930e      	str	r3, [sp, #56]	; 0x38
 8004722:	e7bf      	b.n	80046a4 <_dtoa_r+0x1cc>
 8004724:	2300      	movs	r3, #0
 8004726:	930b      	str	r3, [sp, #44]	; 0x2c
 8004728:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800472a:	2b00      	cmp	r3, #0
 800472c:	dc59      	bgt.n	80047e2 <_dtoa_r+0x30a>
 800472e:	f04f 0b01 	mov.w	fp, #1
 8004732:	465b      	mov	r3, fp
 8004734:	f8cd b008 	str.w	fp, [sp, #8]
 8004738:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800473c:	2200      	movs	r2, #0
 800473e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004740:	6042      	str	r2, [r0, #4]
 8004742:	2204      	movs	r2, #4
 8004744:	f102 0614 	add.w	r6, r2, #20
 8004748:	429e      	cmp	r6, r3
 800474a:	6841      	ldr	r1, [r0, #4]
 800474c:	d94f      	bls.n	80047ee <_dtoa_r+0x316>
 800474e:	4628      	mov	r0, r5
 8004750:	f000 fcdc 	bl	800510c <_Balloc>
 8004754:	9008      	str	r0, [sp, #32]
 8004756:	2800      	cmp	r0, #0
 8004758:	d14d      	bne.n	80047f6 <_dtoa_r+0x31e>
 800475a:	4602      	mov	r2, r0
 800475c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <_dtoa_r+0x300>)
 8004762:	e6cd      	b.n	8004500 <_dtoa_r+0x28>
 8004764:	2301      	movs	r3, #1
 8004766:	e7de      	b.n	8004726 <_dtoa_r+0x24e>
 8004768:	2300      	movs	r3, #0
 800476a:	930b      	str	r3, [sp, #44]	; 0x2c
 800476c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800476e:	eb09 0b03 	add.w	fp, r9, r3
 8004772:	f10b 0301 	add.w	r3, fp, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	bfb8      	it	lt
 800477c:	2301      	movlt	r3, #1
 800477e:	e7dd      	b.n	800473c <_dtoa_r+0x264>
 8004780:	2301      	movs	r3, #1
 8004782:	e7f2      	b.n	800476a <_dtoa_r+0x292>
 8004784:	2401      	movs	r4, #1
 8004786:	2300      	movs	r3, #0
 8004788:	940b      	str	r4, [sp, #44]	; 0x2c
 800478a:	9322      	str	r3, [sp, #136]	; 0x88
 800478c:	f04f 3bff 	mov.w	fp, #4294967295
 8004790:	2200      	movs	r2, #0
 8004792:	2312      	movs	r3, #18
 8004794:	f8cd b008 	str.w	fp, [sp, #8]
 8004798:	9223      	str	r2, [sp, #140]	; 0x8c
 800479a:	e7cf      	b.n	800473c <_dtoa_r+0x264>
 800479c:	f3af 8000 	nop.w
 80047a0:	636f4361 	.word	0x636f4361
 80047a4:	3fd287a7 	.word	0x3fd287a7
 80047a8:	8b60c8b3 	.word	0x8b60c8b3
 80047ac:	3fc68a28 	.word	0x3fc68a28
 80047b0:	509f79fb 	.word	0x509f79fb
 80047b4:	3fd34413 	.word	0x3fd34413
 80047b8:	080065ad 	.word	0x080065ad
 80047bc:	080065c4 	.word	0x080065c4
 80047c0:	7ff00000 	.word	0x7ff00000
 80047c4:	080065a9 	.word	0x080065a9
 80047c8:	080065a0 	.word	0x080065a0
 80047cc:	0800657d 	.word	0x0800657d
 80047d0:	3ff80000 	.word	0x3ff80000
 80047d4:	080066c0 	.word	0x080066c0
 80047d8:	08006623 	.word	0x08006623
 80047dc:	2301      	movs	r3, #1
 80047de:	930b      	str	r3, [sp, #44]	; 0x2c
 80047e0:	e7d4      	b.n	800478c <_dtoa_r+0x2b4>
 80047e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80047e6:	465b      	mov	r3, fp
 80047e8:	f8cd b008 	str.w	fp, [sp, #8]
 80047ec:	e7a6      	b.n	800473c <_dtoa_r+0x264>
 80047ee:	3101      	adds	r1, #1
 80047f0:	6041      	str	r1, [r0, #4]
 80047f2:	0052      	lsls	r2, r2, #1
 80047f4:	e7a6      	b.n	8004744 <_dtoa_r+0x26c>
 80047f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047f8:	9a08      	ldr	r2, [sp, #32]
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	2b0e      	cmp	r3, #14
 8004800:	f200 80a8 	bhi.w	8004954 <_dtoa_r+0x47c>
 8004804:	2c00      	cmp	r4, #0
 8004806:	f000 80a5 	beq.w	8004954 <_dtoa_r+0x47c>
 800480a:	f1b9 0f00 	cmp.w	r9, #0
 800480e:	dd34      	ble.n	800487a <_dtoa_r+0x3a2>
 8004810:	4a9a      	ldr	r2, [pc, #616]	; (8004a7c <_dtoa_r+0x5a4>)
 8004812:	f009 030f 	and.w	r3, r9, #15
 8004816:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800481a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800481e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004822:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004826:	ea4f 1429 	mov.w	r4, r9, asr #4
 800482a:	d016      	beq.n	800485a <_dtoa_r+0x382>
 800482c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004830:	4b93      	ldr	r3, [pc, #588]	; (8004a80 <_dtoa_r+0x5a8>)
 8004832:	2703      	movs	r7, #3
 8004834:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004838:	f7fb ff78 	bl	800072c <__aeabi_ddiv>
 800483c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004840:	f004 040f 	and.w	r4, r4, #15
 8004844:	4e8e      	ldr	r6, [pc, #568]	; (8004a80 <_dtoa_r+0x5a8>)
 8004846:	b954      	cbnz	r4, 800485e <_dtoa_r+0x386>
 8004848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800484c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004850:	f7fb ff6c 	bl	800072c <__aeabi_ddiv>
 8004854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004858:	e029      	b.n	80048ae <_dtoa_r+0x3d6>
 800485a:	2702      	movs	r7, #2
 800485c:	e7f2      	b.n	8004844 <_dtoa_r+0x36c>
 800485e:	07e1      	lsls	r1, r4, #31
 8004860:	d508      	bpl.n	8004874 <_dtoa_r+0x39c>
 8004862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004866:	e9d6 2300 	ldrd	r2, r3, [r6]
 800486a:	f7fb fe35 	bl	80004d8 <__aeabi_dmul>
 800486e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004872:	3701      	adds	r7, #1
 8004874:	1064      	asrs	r4, r4, #1
 8004876:	3608      	adds	r6, #8
 8004878:	e7e5      	b.n	8004846 <_dtoa_r+0x36e>
 800487a:	f000 80a5 	beq.w	80049c8 <_dtoa_r+0x4f0>
 800487e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004882:	f1c9 0400 	rsb	r4, r9, #0
 8004886:	4b7d      	ldr	r3, [pc, #500]	; (8004a7c <_dtoa_r+0x5a4>)
 8004888:	f004 020f 	and.w	r2, r4, #15
 800488c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb fe20 	bl	80004d8 <__aeabi_dmul>
 8004898:	2702      	movs	r7, #2
 800489a:	2300      	movs	r3, #0
 800489c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048a0:	4e77      	ldr	r6, [pc, #476]	; (8004a80 <_dtoa_r+0x5a8>)
 80048a2:	1124      	asrs	r4, r4, #4
 80048a4:	2c00      	cmp	r4, #0
 80048a6:	f040 8084 	bne.w	80049b2 <_dtoa_r+0x4da>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1d2      	bne.n	8004854 <_dtoa_r+0x37c>
 80048ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 808b 	beq.w	80049cc <_dtoa_r+0x4f4>
 80048b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048c2:	2200      	movs	r2, #0
 80048c4:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <_dtoa_r+0x5ac>)
 80048c6:	f7fc f879 	bl	80009bc <__aeabi_dcmplt>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d07e      	beq.n	80049cc <_dtoa_r+0x4f4>
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d07b      	beq.n	80049cc <_dtoa_r+0x4f4>
 80048d4:	f1bb 0f00 	cmp.w	fp, #0
 80048d8:	dd38      	ble.n	800494c <_dtoa_r+0x474>
 80048da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048de:	2200      	movs	r2, #0
 80048e0:	4b69      	ldr	r3, [pc, #420]	; (8004a88 <_dtoa_r+0x5b0>)
 80048e2:	f7fb fdf9 	bl	80004d8 <__aeabi_dmul>
 80048e6:	465c      	mov	r4, fp
 80048e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80048f0:	3701      	adds	r7, #1
 80048f2:	4638      	mov	r0, r7
 80048f4:	f7fb fd86 	bl	8000404 <__aeabi_i2d>
 80048f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fc:	f7fb fdec 	bl	80004d8 <__aeabi_dmul>
 8004900:	2200      	movs	r2, #0
 8004902:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <_dtoa_r+0x5b4>)
 8004904:	f7fb fc32 	bl	800016c <__adddf3>
 8004908:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800490c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004910:	9611      	str	r6, [sp, #68]	; 0x44
 8004912:	2c00      	cmp	r4, #0
 8004914:	d15d      	bne.n	80049d2 <_dtoa_r+0x4fa>
 8004916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800491a:	2200      	movs	r2, #0
 800491c:	4b5c      	ldr	r3, [pc, #368]	; (8004a90 <_dtoa_r+0x5b8>)
 800491e:	f7fb fc23 	bl	8000168 <__aeabi_dsub>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800492a:	4633      	mov	r3, r6
 800492c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800492e:	f7fc f863 	bl	80009f8 <__aeabi_dcmpgt>
 8004932:	2800      	cmp	r0, #0
 8004934:	f040 829e 	bne.w	8004e74 <_dtoa_r+0x99c>
 8004938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800493c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800493e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004942:	f7fc f83b 	bl	80009bc <__aeabi_dcmplt>
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 8292 	bne.w	8004e70 <_dtoa_r+0x998>
 800494c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004950:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004956:	2b00      	cmp	r3, #0
 8004958:	f2c0 8153 	blt.w	8004c02 <_dtoa_r+0x72a>
 800495c:	f1b9 0f0e 	cmp.w	r9, #14
 8004960:	f300 814f 	bgt.w	8004c02 <_dtoa_r+0x72a>
 8004964:	4b45      	ldr	r3, [pc, #276]	; (8004a7c <_dtoa_r+0x5a4>)
 8004966:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800496a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800496e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004972:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004974:	2b00      	cmp	r3, #0
 8004976:	f280 80db 	bge.w	8004b30 <_dtoa_r+0x658>
 800497a:	9b02      	ldr	r3, [sp, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f300 80d7 	bgt.w	8004b30 <_dtoa_r+0x658>
 8004982:	f040 8274 	bne.w	8004e6e <_dtoa_r+0x996>
 8004986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800498a:	2200      	movs	r2, #0
 800498c:	4b40      	ldr	r3, [pc, #256]	; (8004a90 <_dtoa_r+0x5b8>)
 800498e:	f7fb fda3 	bl	80004d8 <__aeabi_dmul>
 8004992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004996:	f7fc f825 	bl	80009e4 <__aeabi_dcmpge>
 800499a:	9c02      	ldr	r4, [sp, #8]
 800499c:	4626      	mov	r6, r4
 800499e:	2800      	cmp	r0, #0
 80049a0:	f040 824a 	bne.w	8004e38 <_dtoa_r+0x960>
 80049a4:	2331      	movs	r3, #49	; 0x31
 80049a6:	9f08      	ldr	r7, [sp, #32]
 80049a8:	f109 0901 	add.w	r9, r9, #1
 80049ac:	f807 3b01 	strb.w	r3, [r7], #1
 80049b0:	e246      	b.n	8004e40 <_dtoa_r+0x968>
 80049b2:	07e2      	lsls	r2, r4, #31
 80049b4:	d505      	bpl.n	80049c2 <_dtoa_r+0x4ea>
 80049b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049ba:	f7fb fd8d 	bl	80004d8 <__aeabi_dmul>
 80049be:	2301      	movs	r3, #1
 80049c0:	3701      	adds	r7, #1
 80049c2:	1064      	asrs	r4, r4, #1
 80049c4:	3608      	adds	r6, #8
 80049c6:	e76d      	b.n	80048a4 <_dtoa_r+0x3cc>
 80049c8:	2702      	movs	r7, #2
 80049ca:	e770      	b.n	80048ae <_dtoa_r+0x3d6>
 80049cc:	46c8      	mov	r8, r9
 80049ce:	9c02      	ldr	r4, [sp, #8]
 80049d0:	e78f      	b.n	80048f2 <_dtoa_r+0x41a>
 80049d2:	9908      	ldr	r1, [sp, #32]
 80049d4:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <_dtoa_r+0x5a4>)
 80049d6:	4421      	add	r1, r4
 80049d8:	9112      	str	r1, [sp, #72]	; 0x48
 80049da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d055      	beq.n	8004a98 <_dtoa_r+0x5c0>
 80049ec:	2000      	movs	r0, #0
 80049ee:	4929      	ldr	r1, [pc, #164]	; (8004a94 <_dtoa_r+0x5bc>)
 80049f0:	f7fb fe9c 	bl	800072c <__aeabi_ddiv>
 80049f4:	463b      	mov	r3, r7
 80049f6:	4632      	mov	r2, r6
 80049f8:	f7fb fbb6 	bl	8000168 <__aeabi_dsub>
 80049fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a00:	9f08      	ldr	r7, [sp, #32]
 8004a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a06:	f7fc f817 	bl	8000a38 <__aeabi_d2iz>
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	f7fb fcfa 	bl	8000404 <__aeabi_i2d>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a18:	f7fb fba6 	bl	8000168 <__aeabi_dsub>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	3430      	adds	r4, #48	; 0x30
 8004a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a2a:	f807 4b01 	strb.w	r4, [r7], #1
 8004a2e:	f7fb ffc5 	bl	80009bc <__aeabi_dcmplt>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d174      	bne.n	8004b20 <_dtoa_r+0x648>
 8004a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4911      	ldr	r1, [pc, #68]	; (8004a84 <_dtoa_r+0x5ac>)
 8004a3e:	f7fb fb93 	bl	8000168 <__aeabi_dsub>
 8004a42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a46:	f7fb ffb9 	bl	80009bc <__aeabi_dcmplt>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f040 80b6 	bne.w	8004bbc <_dtoa_r+0x6e4>
 8004a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a52:	429f      	cmp	r7, r3
 8004a54:	f43f af7a 	beq.w	800494c <_dtoa_r+0x474>
 8004a58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <_dtoa_r+0x5b0>)
 8004a60:	f7fb fd3a 	bl	80004d8 <__aeabi_dmul>
 8004a64:	2200      	movs	r2, #0
 8004a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <_dtoa_r+0x5b0>)
 8004a70:	f7fb fd32 	bl	80004d8 <__aeabi_dmul>
 8004a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a78:	e7c3      	b.n	8004a02 <_dtoa_r+0x52a>
 8004a7a:	bf00      	nop
 8004a7c:	080066c0 	.word	0x080066c0
 8004a80:	08006698 	.word	0x08006698
 8004a84:	3ff00000 	.word	0x3ff00000
 8004a88:	40240000 	.word	0x40240000
 8004a8c:	401c0000 	.word	0x401c0000
 8004a90:	40140000 	.word	0x40140000
 8004a94:	3fe00000 	.word	0x3fe00000
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f7fb fd1c 	bl	80004d8 <__aeabi_dmul>
 8004aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004aa2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004aa6:	9c08      	ldr	r4, [sp, #32]
 8004aa8:	9314      	str	r3, [sp, #80]	; 0x50
 8004aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aae:	f7fb ffc3 	bl	8000a38 <__aeabi_d2iz>
 8004ab2:	9015      	str	r0, [sp, #84]	; 0x54
 8004ab4:	f7fb fca6 	bl	8000404 <__aeabi_i2d>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ac0:	f7fb fb52 	bl	8000168 <__aeabi_dsub>
 8004ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	3330      	adds	r3, #48	; 0x30
 8004aca:	f804 3b01 	strb.w	r3, [r4], #1
 8004ace:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ad0:	460f      	mov	r7, r1
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	d124      	bne.n	8004b24 <_dtoa_r+0x64c>
 8004ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ade:	4bb3      	ldr	r3, [pc, #716]	; (8004dac <_dtoa_r+0x8d4>)
 8004ae0:	f7fb fb44 	bl	800016c <__adddf3>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4630      	mov	r0, r6
 8004aea:	4639      	mov	r1, r7
 8004aec:	f7fb ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d162      	bne.n	8004bba <_dtoa_r+0x6e2>
 8004af4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af8:	2000      	movs	r0, #0
 8004afa:	49ac      	ldr	r1, [pc, #688]	; (8004dac <_dtoa_r+0x8d4>)
 8004afc:	f7fb fb34 	bl	8000168 <__aeabi_dsub>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb ff58 	bl	80009bc <__aeabi_dcmplt>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	f43f af1d 	beq.w	800494c <_dtoa_r+0x474>
 8004b12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b14:	1e7b      	subs	r3, r7, #1
 8004b16:	9314      	str	r3, [sp, #80]	; 0x50
 8004b18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004b1c:	2b30      	cmp	r3, #48	; 0x30
 8004b1e:	d0f8      	beq.n	8004b12 <_dtoa_r+0x63a>
 8004b20:	46c1      	mov	r9, r8
 8004b22:	e03a      	b.n	8004b9a <_dtoa_r+0x6c2>
 8004b24:	4ba2      	ldr	r3, [pc, #648]	; (8004db0 <_dtoa_r+0x8d8>)
 8004b26:	f7fb fcd7 	bl	80004d8 <__aeabi_dmul>
 8004b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b2e:	e7bc      	b.n	8004aaa <_dtoa_r+0x5d2>
 8004b30:	9f08      	ldr	r7, [sp, #32]
 8004b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b3a:	f7fb fdf7 	bl	800072c <__aeabi_ddiv>
 8004b3e:	f7fb ff7b 	bl	8000a38 <__aeabi_d2iz>
 8004b42:	4604      	mov	r4, r0
 8004b44:	f7fb fc5e 	bl	8000404 <__aeabi_i2d>
 8004b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b4c:	f7fb fcc4 	bl	80004d8 <__aeabi_dmul>
 8004b50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b54:	460b      	mov	r3, r1
 8004b56:	4602      	mov	r2, r0
 8004b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b5c:	f7fb fb04 	bl	8000168 <__aeabi_dsub>
 8004b60:	f807 6b01 	strb.w	r6, [r7], #1
 8004b64:	9e08      	ldr	r6, [sp, #32]
 8004b66:	9b02      	ldr	r3, [sp, #8]
 8004b68:	1bbe      	subs	r6, r7, r6
 8004b6a:	42b3      	cmp	r3, r6
 8004b6c:	d13a      	bne.n	8004be4 <_dtoa_r+0x70c>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	f7fb fafb 	bl	800016c <__adddf3>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b82:	f7fb ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8004b86:	bb58      	cbnz	r0, 8004be0 <_dtoa_r+0x708>
 8004b88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b90:	f7fb ff0a 	bl	80009a8 <__aeabi_dcmpeq>
 8004b94:	b108      	cbz	r0, 8004b9a <_dtoa_r+0x6c2>
 8004b96:	07e1      	lsls	r1, r4, #31
 8004b98:	d422      	bmi.n	8004be0 <_dtoa_r+0x708>
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	4651      	mov	r1, sl
 8004b9e:	f000 faf5 	bl	800518c <_Bfree>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	703b      	strb	r3, [r7, #0]
 8004ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ba8:	f109 0001 	add.w	r0, r9, #1
 8004bac:	6018      	str	r0, [r3, #0]
 8004bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f43f acdf 	beq.w	8004574 <_dtoa_r+0x9c>
 8004bb6:	601f      	str	r7, [r3, #0]
 8004bb8:	e4dc      	b.n	8004574 <_dtoa_r+0x9c>
 8004bba:	4627      	mov	r7, r4
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bc4:	2a39      	cmp	r2, #57	; 0x39
 8004bc6:	d107      	bne.n	8004bd8 <_dtoa_r+0x700>
 8004bc8:	9a08      	ldr	r2, [sp, #32]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d1f7      	bne.n	8004bbe <_dtoa_r+0x6e6>
 8004bce:	2230      	movs	r2, #48	; 0x30
 8004bd0:	9908      	ldr	r1, [sp, #32]
 8004bd2:	f108 0801 	add.w	r8, r8, #1
 8004bd6:	700a      	strb	r2, [r1, #0]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	3201      	adds	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e79f      	b.n	8004b20 <_dtoa_r+0x648>
 8004be0:	46c8      	mov	r8, r9
 8004be2:	e7eb      	b.n	8004bbc <_dtoa_r+0x6e4>
 8004be4:	2200      	movs	r2, #0
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <_dtoa_r+0x8d8>)
 8004be8:	f7fb fc76 	bl	80004d8 <__aeabi_dmul>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d098      	beq.n	8004b32 <_dtoa_r+0x65a>
 8004c00:	e7cb      	b.n	8004b9a <_dtoa_r+0x6c2>
 8004c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c04:	2a00      	cmp	r2, #0
 8004c06:	f000 80cd 	beq.w	8004da4 <_dtoa_r+0x8cc>
 8004c0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c0c:	2a01      	cmp	r2, #1
 8004c0e:	f300 80af 	bgt.w	8004d70 <_dtoa_r+0x898>
 8004c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	f000 80a7 	beq.w	8004d68 <_dtoa_r+0x890>
 8004c1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c20:	9f06      	ldr	r7, [sp, #24]
 8004c22:	9a06      	ldr	r2, [sp, #24]
 8004c24:	2101      	movs	r1, #1
 8004c26:	441a      	add	r2, r3
 8004c28:	9206      	str	r2, [sp, #24]
 8004c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	441a      	add	r2, r3
 8004c30:	9209      	str	r2, [sp, #36]	; 0x24
 8004c32:	f000 fb65 	bl	8005300 <__i2b>
 8004c36:	4606      	mov	r6, r0
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	dd0c      	ble.n	8004c56 <_dtoa_r+0x77e>
 8004c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd09      	ble.n	8004c56 <_dtoa_r+0x77e>
 8004c42:	42bb      	cmp	r3, r7
 8004c44:	bfa8      	it	ge
 8004c46:	463b      	movge	r3, r7
 8004c48:	9a06      	ldr	r2, [sp, #24]
 8004c4a:	1aff      	subs	r7, r7, r3
 8004c4c:	1ad2      	subs	r2, r2, r3
 8004c4e:	9206      	str	r2, [sp, #24]
 8004c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	9309      	str	r3, [sp, #36]	; 0x24
 8004c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c58:	b1f3      	cbz	r3, 8004c98 <_dtoa_r+0x7c0>
 8004c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a9 	beq.w	8004db4 <_dtoa_r+0x8dc>
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	dd10      	ble.n	8004c88 <_dtoa_r+0x7b0>
 8004c66:	4631      	mov	r1, r6
 8004c68:	4622      	mov	r2, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 fc02 	bl	8005474 <__pow5mult>
 8004c70:	4652      	mov	r2, sl
 8004c72:	4601      	mov	r1, r0
 8004c74:	4606      	mov	r6, r0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fb58 	bl	800532c <__multiply>
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	4651      	mov	r1, sl
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 fa83 	bl	800518c <_Bfree>
 8004c86:	46c2      	mov	sl, r8
 8004c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8a:	1b1a      	subs	r2, r3, r4
 8004c8c:	d004      	beq.n	8004c98 <_dtoa_r+0x7c0>
 8004c8e:	4651      	mov	r1, sl
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fbef 	bl	8005474 <__pow5mult>
 8004c96:	4682      	mov	sl, r0
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 fb30 	bl	8005300 <__i2b>
 8004ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f340 8087 	ble.w	8004db8 <_dtoa_r+0x8e0>
 8004caa:	461a      	mov	r2, r3
 8004cac:	4601      	mov	r1, r0
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 fbe0 	bl	8005474 <__pow5mult>
 8004cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f340 8080 	ble.w	8004dbe <_dtoa_r+0x8e6>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cc8:	6918      	ldr	r0, [r3, #16]
 8004cca:	f000 facb 	bl	8005264 <__hi0bits>
 8004cce:	f1c0 0020 	rsb	r0, r0, #32
 8004cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd4:	4418      	add	r0, r3
 8004cd6:	f010 001f 	ands.w	r0, r0, #31
 8004cda:	f000 8092 	beq.w	8004e02 <_dtoa_r+0x92a>
 8004cde:	f1c0 0320 	rsb	r3, r0, #32
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	f340 808a 	ble.w	8004dfc <_dtoa_r+0x924>
 8004ce8:	f1c0 001c 	rsb	r0, r0, #28
 8004cec:	9b06      	ldr	r3, [sp, #24]
 8004cee:	4407      	add	r7, r0
 8004cf0:	4403      	add	r3, r0
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf6:	4403      	add	r3, r0
 8004cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfa:	9b06      	ldr	r3, [sp, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd05      	ble.n	8004d0c <_dtoa_r+0x834>
 8004d00:	4651      	mov	r1, sl
 8004d02:	461a      	mov	r2, r3
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 fc0f 	bl	8005528 <__lshift>
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd05      	ble.n	8004d1e <_dtoa_r+0x846>
 8004d12:	4621      	mov	r1, r4
 8004d14:	461a      	mov	r2, r3
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 fc06 	bl	8005528 <__lshift>
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d070      	beq.n	8004e06 <_dtoa_r+0x92e>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4650      	mov	r0, sl
 8004d28:	f000 fc6a 	bl	8005600 <__mcmp>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	da6a      	bge.n	8004e06 <_dtoa_r+0x92e>
 8004d30:	2300      	movs	r3, #0
 8004d32:	4651      	mov	r1, sl
 8004d34:	220a      	movs	r2, #10
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fa4a 	bl	80051d0 <__multadd>
 8004d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d3e:	4682      	mov	sl, r0
 8004d40:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8193 	beq.w	8005070 <_dtoa_r+0xb98>
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	220a      	movs	r2, #10
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 fa3d 	bl	80051d0 <__multadd>
 8004d56:	f1bb 0f00 	cmp.w	fp, #0
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	f300 8093 	bgt.w	8004e86 <_dtoa_r+0x9ae>
 8004d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	dc57      	bgt.n	8004e16 <_dtoa_r+0x93e>
 8004d66:	e08e      	b.n	8004e86 <_dtoa_r+0x9ae>
 8004d68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d6e:	e756      	b.n	8004c1e <_dtoa_r+0x746>
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	1e5c      	subs	r4, r3, #1
 8004d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	bfb7      	itett	lt
 8004d7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d7c:	1b1c      	subge	r4, r3, r4
 8004d7e:	1ae2      	sublt	r2, r4, r3
 8004d80:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d82:	bfbe      	ittt	lt
 8004d84:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d86:	189b      	addlt	r3, r3, r2
 8004d88:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	bfb8      	it	lt
 8004d8e:	2400      	movlt	r4, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bfbb      	ittet	lt
 8004d94:	9b06      	ldrlt	r3, [sp, #24]
 8004d96:	9a02      	ldrlt	r2, [sp, #8]
 8004d98:	9f06      	ldrge	r7, [sp, #24]
 8004d9a:	1a9f      	sublt	r7, r3, r2
 8004d9c:	bfac      	ite	ge
 8004d9e:	9b02      	ldrge	r3, [sp, #8]
 8004da0:	2300      	movlt	r3, #0
 8004da2:	e73e      	b.n	8004c22 <_dtoa_r+0x74a>
 8004da4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004da6:	9f06      	ldr	r7, [sp, #24]
 8004da8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004daa:	e745      	b.n	8004c38 <_dtoa_r+0x760>
 8004dac:	3fe00000 	.word	0x3fe00000
 8004db0:	40240000 	.word	0x40240000
 8004db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db6:	e76a      	b.n	8004c8e <_dtoa_r+0x7b6>
 8004db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	dc19      	bgt.n	8004df2 <_dtoa_r+0x91a>
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	b9bb      	cbnz	r3, 8004df2 <_dtoa_r+0x91a>
 8004dc2:	9b05      	ldr	r3, [sp, #20]
 8004dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc8:	b99b      	cbnz	r3, 8004df2 <_dtoa_r+0x91a>
 8004dca:	9b05      	ldr	r3, [sp, #20]
 8004dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	0d1b      	lsrs	r3, r3, #20
 8004dd2:	051b      	lsls	r3, r3, #20
 8004dd4:	b183      	cbz	r3, 8004df8 <_dtoa_r+0x920>
 8004dd6:	f04f 0801 	mov.w	r8, #1
 8004dda:	9b06      	ldr	r3, [sp, #24]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	9306      	str	r3, [sp, #24]
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de2:	3301      	adds	r3, #1
 8004de4:	9309      	str	r3, [sp, #36]	; 0x24
 8004de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f af6a 	bne.w	8004cc2 <_dtoa_r+0x7ea>
 8004dee:	2001      	movs	r0, #1
 8004df0:	e76f      	b.n	8004cd2 <_dtoa_r+0x7fa>
 8004df2:	f04f 0800 	mov.w	r8, #0
 8004df6:	e7f6      	b.n	8004de6 <_dtoa_r+0x90e>
 8004df8:	4698      	mov	r8, r3
 8004dfa:	e7f4      	b.n	8004de6 <_dtoa_r+0x90e>
 8004dfc:	f43f af7d 	beq.w	8004cfa <_dtoa_r+0x822>
 8004e00:	4618      	mov	r0, r3
 8004e02:	301c      	adds	r0, #28
 8004e04:	e772      	b.n	8004cec <_dtoa_r+0x814>
 8004e06:	9b02      	ldr	r3, [sp, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dc36      	bgt.n	8004e7a <_dtoa_r+0x9a2>
 8004e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	dd33      	ble.n	8004e7a <_dtoa_r+0x9a2>
 8004e12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e16:	f1bb 0f00 	cmp.w	fp, #0
 8004e1a:	d10d      	bne.n	8004e38 <_dtoa_r+0x960>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	465b      	mov	r3, fp
 8004e20:	2205      	movs	r2, #5
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f9d4 	bl	80051d0 <__multadd>
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	f000 fbe7 	bl	8005600 <__mcmp>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f73f adb6 	bgt.w	80049a4 <_dtoa_r+0x4cc>
 8004e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e3a:	9f08      	ldr	r7, [sp, #32]
 8004e3c:	ea6f 0903 	mvn.w	r9, r3
 8004e40:	f04f 0800 	mov.w	r8, #0
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 f9a0 	bl	800518c <_Bfree>
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	f43f aea4 	beq.w	8004b9a <_dtoa_r+0x6c2>
 8004e52:	f1b8 0f00 	cmp.w	r8, #0
 8004e56:	d005      	beq.n	8004e64 <_dtoa_r+0x98c>
 8004e58:	45b0      	cmp	r8, r6
 8004e5a:	d003      	beq.n	8004e64 <_dtoa_r+0x98c>
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f994 	bl	800518c <_Bfree>
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f990 	bl	800518c <_Bfree>
 8004e6c:	e695      	b.n	8004b9a <_dtoa_r+0x6c2>
 8004e6e:	2400      	movs	r4, #0
 8004e70:	4626      	mov	r6, r4
 8004e72:	e7e1      	b.n	8004e38 <_dtoa_r+0x960>
 8004e74:	46c1      	mov	r9, r8
 8004e76:	4626      	mov	r6, r4
 8004e78:	e594      	b.n	80049a4 <_dtoa_r+0x4cc>
 8004e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80fc 	beq.w	800507e <_dtoa_r+0xba6>
 8004e86:	2f00      	cmp	r7, #0
 8004e88:	dd05      	ble.n	8004e96 <_dtoa_r+0x9be>
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fb4a 	bl	8005528 <__lshift>
 8004e94:	4606      	mov	r6, r0
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	d05c      	beq.n	8004f56 <_dtoa_r+0xa7e>
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	6871      	ldr	r1, [r6, #4]
 8004ea0:	f000 f934 	bl	800510c <_Balloc>
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	b928      	cbnz	r0, 8004eb4 <_dtoa_r+0x9dc>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004eae:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <_dtoa_r+0xbd0>)
 8004eb0:	f7ff bb26 	b.w	8004500 <_dtoa_r+0x28>
 8004eb4:	6932      	ldr	r2, [r6, #16]
 8004eb6:	f106 010c 	add.w	r1, r6, #12
 8004eba:	3202      	adds	r2, #2
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	300c      	adds	r0, #12
 8004ec0:	f000 f90a 	bl	80050d8 <memcpy>
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 fb2d 	bl	8005528 <__lshift>
 8004ece:	46b0      	mov	r8, r6
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	9b08      	ldr	r3, [sp, #32]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	9b08      	ldr	r3, [sp, #32]
 8004eda:	445b      	add	r3, fp
 8004edc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ede:	9b04      	ldr	r3, [sp, #16]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee6:	9b02      	ldr	r3, [sp, #8]
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4650      	mov	r0, sl
 8004eec:	f103 3bff 	add.w	fp, r3, #4294967295
 8004ef0:	f7ff fa64 	bl	80043bc <quorem>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	3330      	adds	r3, #48	; 0x30
 8004efa:	9004      	str	r0, [sp, #16]
 8004efc:	4650      	mov	r0, sl
 8004efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f00:	f000 fb7e 	bl	8005600 <__mcmp>
 8004f04:	4632      	mov	r2, r6
 8004f06:	9006      	str	r0, [sp, #24]
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 fb94 	bl	8005638 <__mdiff>
 8004f10:	68c2      	ldr	r2, [r0, #12]
 8004f12:	4607      	mov	r7, r0
 8004f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f16:	bb02      	cbnz	r2, 8004f5a <_dtoa_r+0xa82>
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f000 fb70 	bl	8005600 <__mcmp>
 8004f20:	4602      	mov	r2, r0
 8004f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f24:	4639      	mov	r1, r7
 8004f26:	4628      	mov	r0, r5
 8004f28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004f2c:	f000 f92e 	bl	800518c <_Bfree>
 8004f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f34:	9f02      	ldr	r7, [sp, #8]
 8004f36:	ea43 0102 	orr.w	r1, r3, r2
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f40:	d10d      	bne.n	8004f5e <_dtoa_r+0xa86>
 8004f42:	2b39      	cmp	r3, #57	; 0x39
 8004f44:	d027      	beq.n	8004f96 <_dtoa_r+0xabe>
 8004f46:	9a06      	ldr	r2, [sp, #24]
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	dd01      	ble.n	8004f50 <_dtoa_r+0xa78>
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	3331      	adds	r3, #49	; 0x31
 8004f50:	f88b 3000 	strb.w	r3, [fp]
 8004f54:	e776      	b.n	8004e44 <_dtoa_r+0x96c>
 8004f56:	4630      	mov	r0, r6
 8004f58:	e7b9      	b.n	8004ece <_dtoa_r+0x9f6>
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	e7e2      	b.n	8004f24 <_dtoa_r+0xa4c>
 8004f5e:	9906      	ldr	r1, [sp, #24]
 8004f60:	2900      	cmp	r1, #0
 8004f62:	db04      	blt.n	8004f6e <_dtoa_r+0xa96>
 8004f64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004f66:	4301      	orrs	r1, r0
 8004f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f6a:	4301      	orrs	r1, r0
 8004f6c:	d120      	bne.n	8004fb0 <_dtoa_r+0xad8>
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	ddee      	ble.n	8004f50 <_dtoa_r+0xa78>
 8004f72:	4651      	mov	r1, sl
 8004f74:	2201      	movs	r2, #1
 8004f76:	4628      	mov	r0, r5
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	f000 fad5 	bl	8005528 <__lshift>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4682      	mov	sl, r0
 8004f82:	f000 fb3d 	bl	8005600 <__mcmp>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	9b02      	ldr	r3, [sp, #8]
 8004f8a:	dc02      	bgt.n	8004f92 <_dtoa_r+0xaba>
 8004f8c:	d1e0      	bne.n	8004f50 <_dtoa_r+0xa78>
 8004f8e:	07da      	lsls	r2, r3, #31
 8004f90:	d5de      	bpl.n	8004f50 <_dtoa_r+0xa78>
 8004f92:	2b39      	cmp	r3, #57	; 0x39
 8004f94:	d1da      	bne.n	8004f4c <_dtoa_r+0xa74>
 8004f96:	2339      	movs	r3, #57	; 0x39
 8004f98:	f88b 3000 	strb.w	r3, [fp]
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	2a39      	cmp	r2, #57	; 0x39
 8004fa8:	d050      	beq.n	800504c <_dtoa_r+0xb74>
 8004faa:	3201      	adds	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e749      	b.n	8004e44 <_dtoa_r+0x96c>
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	dd03      	ble.n	8004fbc <_dtoa_r+0xae4>
 8004fb4:	2b39      	cmp	r3, #57	; 0x39
 8004fb6:	d0ee      	beq.n	8004f96 <_dtoa_r+0xabe>
 8004fb8:	3301      	adds	r3, #1
 8004fba:	e7c9      	b.n	8004f50 <_dtoa_r+0xa78>
 8004fbc:	9a02      	ldr	r2, [sp, #8]
 8004fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fc4:	428a      	cmp	r2, r1
 8004fc6:	d02a      	beq.n	800501e <_dtoa_r+0xb46>
 8004fc8:	4651      	mov	r1, sl
 8004fca:	2300      	movs	r3, #0
 8004fcc:	220a      	movs	r2, #10
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 f8fe 	bl	80051d0 <__multadd>
 8004fd4:	45b0      	cmp	r8, r6
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	f04f 020a 	mov.w	r2, #10
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	d107      	bne.n	8004ff6 <_dtoa_r+0xb1e>
 8004fe6:	f000 f8f3 	bl	80051d0 <__multadd>
 8004fea:	4680      	mov	r8, r0
 8004fec:	4606      	mov	r6, r0
 8004fee:	9b02      	ldr	r3, [sp, #8]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	e777      	b.n	8004ee6 <_dtoa_r+0xa0e>
 8004ff6:	f000 f8eb 	bl	80051d0 <__multadd>
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	2300      	movs	r3, #0
 8005000:	220a      	movs	r2, #10
 8005002:	4628      	mov	r0, r5
 8005004:	f000 f8e4 	bl	80051d0 <__multadd>
 8005008:	4606      	mov	r6, r0
 800500a:	e7f0      	b.n	8004fee <_dtoa_r+0xb16>
 800500c:	f1bb 0f00 	cmp.w	fp, #0
 8005010:	bfcc      	ite	gt
 8005012:	465f      	movgt	r7, fp
 8005014:	2701      	movle	r7, #1
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	9a08      	ldr	r2, [sp, #32]
 800501c:	4417      	add	r7, r2
 800501e:	4651      	mov	r1, sl
 8005020:	2201      	movs	r2, #1
 8005022:	4628      	mov	r0, r5
 8005024:	9302      	str	r3, [sp, #8]
 8005026:	f000 fa7f 	bl	8005528 <__lshift>
 800502a:	4621      	mov	r1, r4
 800502c:	4682      	mov	sl, r0
 800502e:	f000 fae7 	bl	8005600 <__mcmp>
 8005032:	2800      	cmp	r0, #0
 8005034:	dcb2      	bgt.n	8004f9c <_dtoa_r+0xac4>
 8005036:	d102      	bne.n	800503e <_dtoa_r+0xb66>
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	07db      	lsls	r3, r3, #31
 800503c:	d4ae      	bmi.n	8004f9c <_dtoa_r+0xac4>
 800503e:	463b      	mov	r3, r7
 8005040:	461f      	mov	r7, r3
 8005042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005046:	2a30      	cmp	r2, #48	; 0x30
 8005048:	d0fa      	beq.n	8005040 <_dtoa_r+0xb68>
 800504a:	e6fb      	b.n	8004e44 <_dtoa_r+0x96c>
 800504c:	9a08      	ldr	r2, [sp, #32]
 800504e:	429a      	cmp	r2, r3
 8005050:	d1a5      	bne.n	8004f9e <_dtoa_r+0xac6>
 8005052:	2331      	movs	r3, #49	; 0x31
 8005054:	f109 0901 	add.w	r9, r9, #1
 8005058:	7013      	strb	r3, [r2, #0]
 800505a:	e6f3      	b.n	8004e44 <_dtoa_r+0x96c>
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <_dtoa_r+0xbd4>)
 800505e:	f7ff baa7 	b.w	80045b0 <_dtoa_r+0xd8>
 8005062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f aa80 	bne.w	800456a <_dtoa_r+0x92>
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <_dtoa_r+0xbd8>)
 800506c:	f7ff baa0 	b.w	80045b0 <_dtoa_r+0xd8>
 8005070:	f1bb 0f00 	cmp.w	fp, #0
 8005074:	dc03      	bgt.n	800507e <_dtoa_r+0xba6>
 8005076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005078:	2b02      	cmp	r3, #2
 800507a:	f73f aecc 	bgt.w	8004e16 <_dtoa_r+0x93e>
 800507e:	9f08      	ldr	r7, [sp, #32]
 8005080:	4621      	mov	r1, r4
 8005082:	4650      	mov	r0, sl
 8005084:	f7ff f99a 	bl	80043bc <quorem>
 8005088:	9a08      	ldr	r2, [sp, #32]
 800508a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800508e:	f807 3b01 	strb.w	r3, [r7], #1
 8005092:	1aba      	subs	r2, r7, r2
 8005094:	4593      	cmp	fp, r2
 8005096:	ddb9      	ble.n	800500c <_dtoa_r+0xb34>
 8005098:	4651      	mov	r1, sl
 800509a:	2300      	movs	r3, #0
 800509c:	220a      	movs	r2, #10
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f896 	bl	80051d0 <__multadd>
 80050a4:	4682      	mov	sl, r0
 80050a6:	e7eb      	b.n	8005080 <_dtoa_r+0xba8>
 80050a8:	08006623 	.word	0x08006623
 80050ac:	0800657c 	.word	0x0800657c
 80050b0:	080065a0 	.word	0x080065a0

080050b4 <_localeconv_r>:
 80050b4:	4800      	ldr	r0, [pc, #0]	; (80050b8 <_localeconv_r+0x4>)
 80050b6:	4770      	bx	lr
 80050b8:	20000160 	.word	0x20000160

080050bc <memchr>:
 80050bc:	4603      	mov	r3, r0
 80050be:	b510      	push	{r4, lr}
 80050c0:	b2c9      	uxtb	r1, r1
 80050c2:	4402      	add	r2, r0
 80050c4:	4293      	cmp	r3, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	d101      	bne.n	80050ce <memchr+0x12>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e003      	b.n	80050d6 <memchr+0x1a>
 80050ce:	7804      	ldrb	r4, [r0, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	428c      	cmp	r4, r1
 80050d4:	d1f6      	bne.n	80050c4 <memchr+0x8>
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <memcpy>:
 80050d8:	440a      	add	r2, r1
 80050da:	4291      	cmp	r1, r2
 80050dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e0:	d100      	bne.n	80050e4 <memcpy+0xc>
 80050e2:	4770      	bx	lr
 80050e4:	b510      	push	{r4, lr}
 80050e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ea:	4291      	cmp	r1, r2
 80050ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f0:	d1f9      	bne.n	80050e6 <memcpy+0xe>
 80050f2:	bd10      	pop	{r4, pc}

080050f4 <__malloc_lock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__malloc_lock+0x8>)
 80050f6:	f000 bbca 	b.w	800588e <__retarget_lock_acquire_recursive>
 80050fa:	bf00      	nop
 80050fc:	20000264 	.word	0x20000264

08005100 <__malloc_unlock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_unlock+0x8>)
 8005102:	f000 bbc5 	b.w	8005890 <__retarget_lock_release_recursive>
 8005106:	bf00      	nop
 8005108:	20000264 	.word	0x20000264

0800510c <_Balloc>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005110:	4604      	mov	r4, r0
 8005112:	460d      	mov	r5, r1
 8005114:	b976      	cbnz	r6, 8005134 <_Balloc+0x28>
 8005116:	2010      	movs	r0, #16
 8005118:	f7fe fc2a 	bl	8003970 <malloc>
 800511c:	4602      	mov	r2, r0
 800511e:	6260      	str	r0, [r4, #36]	; 0x24
 8005120:	b920      	cbnz	r0, 800512c <_Balloc+0x20>
 8005122:	2166      	movs	r1, #102	; 0x66
 8005124:	4b17      	ldr	r3, [pc, #92]	; (8005184 <_Balloc+0x78>)
 8005126:	4818      	ldr	r0, [pc, #96]	; (8005188 <_Balloc+0x7c>)
 8005128:	f000 fb80 	bl	800582c <__assert_func>
 800512c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005130:	6006      	str	r6, [r0, #0]
 8005132:	60c6      	str	r6, [r0, #12]
 8005134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005136:	68f3      	ldr	r3, [r6, #12]
 8005138:	b183      	cbz	r3, 800515c <_Balloc+0x50>
 800513a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005142:	b9b8      	cbnz	r0, 8005174 <_Balloc+0x68>
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f605 	lsl.w	r6, r1, r5
 800514a:	1d72      	adds	r2, r6, #5
 800514c:	4620      	mov	r0, r4
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	f000 fb5e 	bl	8005810 <_calloc_r>
 8005154:	b160      	cbz	r0, 8005170 <_Balloc+0x64>
 8005156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800515a:	e00e      	b.n	800517a <_Balloc+0x6e>
 800515c:	2221      	movs	r2, #33	; 0x21
 800515e:	2104      	movs	r1, #4
 8005160:	4620      	mov	r0, r4
 8005162:	f000 fb55 	bl	8005810 <_calloc_r>
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005168:	60f0      	str	r0, [r6, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e4      	bne.n	800513a <_Balloc+0x2e>
 8005170:	2000      	movs	r0, #0
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	6802      	ldr	r2, [r0, #0]
 8005176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800517a:	2300      	movs	r3, #0
 800517c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005180:	e7f7      	b.n	8005172 <_Balloc+0x66>
 8005182:	bf00      	nop
 8005184:	080065ad 	.word	0x080065ad
 8005188:	08006634 	.word	0x08006634

0800518c <_Bfree>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b976      	cbnz	r6, 80051b4 <_Bfree+0x28>
 8005196:	2010      	movs	r0, #16
 8005198:	f7fe fbea 	bl	8003970 <malloc>
 800519c:	4602      	mov	r2, r0
 800519e:	6268      	str	r0, [r5, #36]	; 0x24
 80051a0:	b920      	cbnz	r0, 80051ac <_Bfree+0x20>
 80051a2:	218a      	movs	r1, #138	; 0x8a
 80051a4:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <_Bfree+0x3c>)
 80051a6:	4809      	ldr	r0, [pc, #36]	; (80051cc <_Bfree+0x40>)
 80051a8:	f000 fb40 	bl	800582c <__assert_func>
 80051ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b0:	6006      	str	r6, [r0, #0]
 80051b2:	60c6      	str	r6, [r0, #12]
 80051b4:	b13c      	cbz	r4, 80051c6 <_Bfree+0x3a>
 80051b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051b8:	6862      	ldr	r2, [r4, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c0:	6021      	str	r1, [r4, #0]
 80051c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	080065ad 	.word	0x080065ad
 80051cc:	08006634 	.word	0x08006634

080051d0 <__multadd>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4698      	mov	r8, r3
 80051d6:	460c      	mov	r4, r1
 80051d8:	2300      	movs	r3, #0
 80051da:	690e      	ldr	r6, [r1, #16]
 80051dc:	4607      	mov	r7, r0
 80051de:	f101 0014 	add.w	r0, r1, #20
 80051e2:	6805      	ldr	r5, [r0, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	b2a9      	uxth	r1, r5
 80051e8:	fb02 8101 	mla	r1, r2, r1, r8
 80051ec:	0c2d      	lsrs	r5, r5, #16
 80051ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80051f2:	fb02 c505 	mla	r5, r2, r5, ip
 80051f6:	b289      	uxth	r1, r1
 80051f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80051fc:	429e      	cmp	r6, r3
 80051fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005202:	f840 1b04 	str.w	r1, [r0], #4
 8005206:	dcec      	bgt.n	80051e2 <__multadd+0x12>
 8005208:	f1b8 0f00 	cmp.w	r8, #0
 800520c:	d022      	beq.n	8005254 <__multadd+0x84>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	42b3      	cmp	r3, r6
 8005212:	dc19      	bgt.n	8005248 <__multadd+0x78>
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4638      	mov	r0, r7
 8005218:	3101      	adds	r1, #1
 800521a:	f7ff ff77 	bl	800510c <_Balloc>
 800521e:	4605      	mov	r5, r0
 8005220:	b928      	cbnz	r0, 800522e <__multadd+0x5e>
 8005222:	4602      	mov	r2, r0
 8005224:	21b5      	movs	r1, #181	; 0xb5
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <__multadd+0x8c>)
 8005228:	480d      	ldr	r0, [pc, #52]	; (8005260 <__multadd+0x90>)
 800522a:	f000 faff 	bl	800582c <__assert_func>
 800522e:	6922      	ldr	r2, [r4, #16]
 8005230:	f104 010c 	add.w	r1, r4, #12
 8005234:	3202      	adds	r2, #2
 8005236:	0092      	lsls	r2, r2, #2
 8005238:	300c      	adds	r0, #12
 800523a:	f7ff ff4d 	bl	80050d8 <memcpy>
 800523e:	4621      	mov	r1, r4
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ffa3 	bl	800518c <_Bfree>
 8005246:	462c      	mov	r4, r5
 8005248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800524c:	3601      	adds	r6, #1
 800524e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005252:	6126      	str	r6, [r4, #16]
 8005254:	4620      	mov	r0, r4
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	bf00      	nop
 800525c:	08006623 	.word	0x08006623
 8005260:	08006634 	.word	0x08006634

08005264 <__hi0bits>:
 8005264:	0c02      	lsrs	r2, r0, #16
 8005266:	0412      	lsls	r2, r2, #16
 8005268:	4603      	mov	r3, r0
 800526a:	b9ca      	cbnz	r2, 80052a0 <__hi0bits+0x3c>
 800526c:	0403      	lsls	r3, r0, #16
 800526e:	2010      	movs	r0, #16
 8005270:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005274:	bf04      	itt	eq
 8005276:	021b      	lsleq	r3, r3, #8
 8005278:	3008      	addeq	r0, #8
 800527a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800527e:	bf04      	itt	eq
 8005280:	011b      	lsleq	r3, r3, #4
 8005282:	3004      	addeq	r0, #4
 8005284:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005288:	bf04      	itt	eq
 800528a:	009b      	lsleq	r3, r3, #2
 800528c:	3002      	addeq	r0, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	db05      	blt.n	800529e <__hi0bits+0x3a>
 8005292:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005296:	f100 0001 	add.w	r0, r0, #1
 800529a:	bf08      	it	eq
 800529c:	2020      	moveq	r0, #32
 800529e:	4770      	bx	lr
 80052a0:	2000      	movs	r0, #0
 80052a2:	e7e5      	b.n	8005270 <__hi0bits+0xc>

080052a4 <__lo0bits>:
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	4602      	mov	r2, r0
 80052a8:	f013 0007 	ands.w	r0, r3, #7
 80052ac:	d00b      	beq.n	80052c6 <__lo0bits+0x22>
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	d422      	bmi.n	80052f8 <__lo0bits+0x54>
 80052b2:	0798      	lsls	r0, r3, #30
 80052b4:	bf49      	itett	mi
 80052b6:	085b      	lsrmi	r3, r3, #1
 80052b8:	089b      	lsrpl	r3, r3, #2
 80052ba:	2001      	movmi	r0, #1
 80052bc:	6013      	strmi	r3, [r2, #0]
 80052be:	bf5c      	itt	pl
 80052c0:	2002      	movpl	r0, #2
 80052c2:	6013      	strpl	r3, [r2, #0]
 80052c4:	4770      	bx	lr
 80052c6:	b299      	uxth	r1, r3
 80052c8:	b909      	cbnz	r1, 80052ce <__lo0bits+0x2a>
 80052ca:	2010      	movs	r0, #16
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052d2:	bf04      	itt	eq
 80052d4:	0a1b      	lsreq	r3, r3, #8
 80052d6:	3008      	addeq	r0, #8
 80052d8:	0719      	lsls	r1, r3, #28
 80052da:	bf04      	itt	eq
 80052dc:	091b      	lsreq	r3, r3, #4
 80052de:	3004      	addeq	r0, #4
 80052e0:	0799      	lsls	r1, r3, #30
 80052e2:	bf04      	itt	eq
 80052e4:	089b      	lsreq	r3, r3, #2
 80052e6:	3002      	addeq	r0, #2
 80052e8:	07d9      	lsls	r1, r3, #31
 80052ea:	d403      	bmi.n	80052f4 <__lo0bits+0x50>
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	f100 0001 	add.w	r0, r0, #1
 80052f2:	d003      	beq.n	80052fc <__lo0bits+0x58>
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4770      	bx	lr
 80052f8:	2000      	movs	r0, #0
 80052fa:	4770      	bx	lr
 80052fc:	2020      	movs	r0, #32
 80052fe:	4770      	bx	lr

08005300 <__i2b>:
 8005300:	b510      	push	{r4, lr}
 8005302:	460c      	mov	r4, r1
 8005304:	2101      	movs	r1, #1
 8005306:	f7ff ff01 	bl	800510c <_Balloc>
 800530a:	4602      	mov	r2, r0
 800530c:	b928      	cbnz	r0, 800531a <__i2b+0x1a>
 800530e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <__i2b+0x24>)
 8005314:	4804      	ldr	r0, [pc, #16]	; (8005328 <__i2b+0x28>)
 8005316:	f000 fa89 	bl	800582c <__assert_func>
 800531a:	2301      	movs	r3, #1
 800531c:	6144      	str	r4, [r0, #20]
 800531e:	6103      	str	r3, [r0, #16]
 8005320:	bd10      	pop	{r4, pc}
 8005322:	bf00      	nop
 8005324:	08006623 	.word	0x08006623
 8005328:	08006634 	.word	0x08006634

0800532c <__multiply>:
 800532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	4614      	mov	r4, r2
 8005332:	690a      	ldr	r2, [r1, #16]
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	460d      	mov	r5, r1
 8005338:	429a      	cmp	r2, r3
 800533a:	bfbe      	ittt	lt
 800533c:	460b      	movlt	r3, r1
 800533e:	4625      	movlt	r5, r4
 8005340:	461c      	movlt	r4, r3
 8005342:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005346:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800534a:	68ab      	ldr	r3, [r5, #8]
 800534c:	6869      	ldr	r1, [r5, #4]
 800534e:	eb0a 0709 	add.w	r7, sl, r9
 8005352:	42bb      	cmp	r3, r7
 8005354:	b085      	sub	sp, #20
 8005356:	bfb8      	it	lt
 8005358:	3101      	addlt	r1, #1
 800535a:	f7ff fed7 	bl	800510c <_Balloc>
 800535e:	b930      	cbnz	r0, 800536e <__multiply+0x42>
 8005360:	4602      	mov	r2, r0
 8005362:	f240 115d 	movw	r1, #349	; 0x15d
 8005366:	4b41      	ldr	r3, [pc, #260]	; (800546c <__multiply+0x140>)
 8005368:	4841      	ldr	r0, [pc, #260]	; (8005470 <__multiply+0x144>)
 800536a:	f000 fa5f 	bl	800582c <__assert_func>
 800536e:	f100 0614 	add.w	r6, r0, #20
 8005372:	4633      	mov	r3, r6
 8005374:	2200      	movs	r2, #0
 8005376:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800537a:	4543      	cmp	r3, r8
 800537c:	d31e      	bcc.n	80053bc <__multiply+0x90>
 800537e:	f105 0c14 	add.w	ip, r5, #20
 8005382:	f104 0314 	add.w	r3, r4, #20
 8005386:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800538a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800538e:	9202      	str	r2, [sp, #8]
 8005390:	ebac 0205 	sub.w	r2, ip, r5
 8005394:	3a15      	subs	r2, #21
 8005396:	f022 0203 	bic.w	r2, r2, #3
 800539a:	3204      	adds	r2, #4
 800539c:	f105 0115 	add.w	r1, r5, #21
 80053a0:	458c      	cmp	ip, r1
 80053a2:	bf38      	it	cc
 80053a4:	2204      	movcc	r2, #4
 80053a6:	9201      	str	r2, [sp, #4]
 80053a8:	9a02      	ldr	r2, [sp, #8]
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d808      	bhi.n	80053c2 <__multiply+0x96>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	dc55      	bgt.n	8005460 <__multiply+0x134>
 80053b4:	6107      	str	r7, [r0, #16]
 80053b6:	b005      	add	sp, #20
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	f843 2b04 	str.w	r2, [r3], #4
 80053c0:	e7db      	b.n	800537a <__multiply+0x4e>
 80053c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	d020      	beq.n	800540e <__multiply+0xe2>
 80053cc:	46b1      	mov	r9, r6
 80053ce:	2200      	movs	r2, #0
 80053d0:	f105 0e14 	add.w	lr, r5, #20
 80053d4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80053d8:	f8d9 b000 	ldr.w	fp, [r9]
 80053dc:	b2a1      	uxth	r1, r4
 80053de:	fa1f fb8b 	uxth.w	fp, fp
 80053e2:	fb0a b101 	mla	r1, sl, r1, fp
 80053e6:	4411      	add	r1, r2
 80053e8:	f8d9 2000 	ldr.w	r2, [r9]
 80053ec:	0c24      	lsrs	r4, r4, #16
 80053ee:	0c12      	lsrs	r2, r2, #16
 80053f0:	fb0a 2404 	mla	r4, sl, r4, r2
 80053f4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80053f8:	b289      	uxth	r1, r1
 80053fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80053fe:	45f4      	cmp	ip, lr
 8005400:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005404:	f849 1b04 	str.w	r1, [r9], #4
 8005408:	d8e4      	bhi.n	80053d4 <__multiply+0xa8>
 800540a:	9901      	ldr	r1, [sp, #4]
 800540c:	5072      	str	r2, [r6, r1]
 800540e:	9a03      	ldr	r2, [sp, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005416:	f1b9 0f00 	cmp.w	r9, #0
 800541a:	d01f      	beq.n	800545c <__multiply+0x130>
 800541c:	46b6      	mov	lr, r6
 800541e:	f04f 0a00 	mov.w	sl, #0
 8005422:	6834      	ldr	r4, [r6, #0]
 8005424:	f105 0114 	add.w	r1, r5, #20
 8005428:	880a      	ldrh	r2, [r1, #0]
 800542a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800542e:	b2a4      	uxth	r4, r4
 8005430:	fb09 b202 	mla	r2, r9, r2, fp
 8005434:	4492      	add	sl, r2
 8005436:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800543a:	f84e 4b04 	str.w	r4, [lr], #4
 800543e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005442:	f8be 2000 	ldrh.w	r2, [lr]
 8005446:	0c24      	lsrs	r4, r4, #16
 8005448:	fb09 2404 	mla	r4, r9, r4, r2
 800544c:	458c      	cmp	ip, r1
 800544e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005452:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005456:	d8e7      	bhi.n	8005428 <__multiply+0xfc>
 8005458:	9a01      	ldr	r2, [sp, #4]
 800545a:	50b4      	str	r4, [r6, r2]
 800545c:	3604      	adds	r6, #4
 800545e:	e7a3      	b.n	80053a8 <__multiply+0x7c>
 8005460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1a5      	bne.n	80053b4 <__multiply+0x88>
 8005468:	3f01      	subs	r7, #1
 800546a:	e7a1      	b.n	80053b0 <__multiply+0x84>
 800546c:	08006623 	.word	0x08006623
 8005470:	08006634 	.word	0x08006634

08005474 <__pow5mult>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	4615      	mov	r5, r2
 800547a:	f012 0203 	ands.w	r2, r2, #3
 800547e:	4606      	mov	r6, r0
 8005480:	460f      	mov	r7, r1
 8005482:	d007      	beq.n	8005494 <__pow5mult+0x20>
 8005484:	4c25      	ldr	r4, [pc, #148]	; (800551c <__pow5mult+0xa8>)
 8005486:	3a01      	subs	r2, #1
 8005488:	2300      	movs	r3, #0
 800548a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800548e:	f7ff fe9f 	bl	80051d0 <__multadd>
 8005492:	4607      	mov	r7, r0
 8005494:	10ad      	asrs	r5, r5, #2
 8005496:	d03d      	beq.n	8005514 <__pow5mult+0xa0>
 8005498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800549a:	b97c      	cbnz	r4, 80054bc <__pow5mult+0x48>
 800549c:	2010      	movs	r0, #16
 800549e:	f7fe fa67 	bl	8003970 <malloc>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6270      	str	r0, [r6, #36]	; 0x24
 80054a6:	b928      	cbnz	r0, 80054b4 <__pow5mult+0x40>
 80054a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054ac:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <__pow5mult+0xac>)
 80054ae:	481d      	ldr	r0, [pc, #116]	; (8005524 <__pow5mult+0xb0>)
 80054b0:	f000 f9bc 	bl	800582c <__assert_func>
 80054b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054b8:	6004      	str	r4, [r0, #0]
 80054ba:	60c4      	str	r4, [r0, #12]
 80054bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054c4:	b94c      	cbnz	r4, 80054da <__pow5mult+0x66>
 80054c6:	f240 2171 	movw	r1, #625	; 0x271
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff ff18 	bl	8005300 <__i2b>
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	f04f 0900 	mov.w	r9, #0
 80054de:	07eb      	lsls	r3, r5, #31
 80054e0:	d50a      	bpl.n	80054f8 <__pow5mult+0x84>
 80054e2:	4639      	mov	r1, r7
 80054e4:	4622      	mov	r2, r4
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ff20 	bl	800532c <__multiply>
 80054ec:	4680      	mov	r8, r0
 80054ee:	4639      	mov	r1, r7
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff fe4b 	bl	800518c <_Bfree>
 80054f6:	4647      	mov	r7, r8
 80054f8:	106d      	asrs	r5, r5, #1
 80054fa:	d00b      	beq.n	8005514 <__pow5mult+0xa0>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	b938      	cbnz	r0, 8005510 <__pow5mult+0x9c>
 8005500:	4622      	mov	r2, r4
 8005502:	4621      	mov	r1, r4
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff ff11 	bl	800532c <__multiply>
 800550a:	6020      	str	r0, [r4, #0]
 800550c:	f8c0 9000 	str.w	r9, [r0]
 8005510:	4604      	mov	r4, r0
 8005512:	e7e4      	b.n	80054de <__pow5mult+0x6a>
 8005514:	4638      	mov	r0, r7
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	bf00      	nop
 800551c:	08006788 	.word	0x08006788
 8005520:	080065ad 	.word	0x080065ad
 8005524:	08006634 	.word	0x08006634

08005528 <__lshift>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	460c      	mov	r4, r1
 800552e:	4607      	mov	r7, r0
 8005530:	4691      	mov	r9, r2
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	6849      	ldr	r1, [r1, #4]
 8005536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005540:	f108 0601 	add.w	r6, r8, #1
 8005544:	42b3      	cmp	r3, r6
 8005546:	db0b      	blt.n	8005560 <__lshift+0x38>
 8005548:	4638      	mov	r0, r7
 800554a:	f7ff fddf 	bl	800510c <_Balloc>
 800554e:	4605      	mov	r5, r0
 8005550:	b948      	cbnz	r0, 8005566 <__lshift+0x3e>
 8005552:	4602      	mov	r2, r0
 8005554:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005558:	4b27      	ldr	r3, [pc, #156]	; (80055f8 <__lshift+0xd0>)
 800555a:	4828      	ldr	r0, [pc, #160]	; (80055fc <__lshift+0xd4>)
 800555c:	f000 f966 	bl	800582c <__assert_func>
 8005560:	3101      	adds	r1, #1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	e7ee      	b.n	8005544 <__lshift+0x1c>
 8005566:	2300      	movs	r3, #0
 8005568:	f100 0114 	add.w	r1, r0, #20
 800556c:	f100 0210 	add.w	r2, r0, #16
 8005570:	4618      	mov	r0, r3
 8005572:	4553      	cmp	r3, sl
 8005574:	db33      	blt.n	80055de <__lshift+0xb6>
 8005576:	6920      	ldr	r0, [r4, #16]
 8005578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800557c:	f104 0314 	add.w	r3, r4, #20
 8005580:	f019 091f 	ands.w	r9, r9, #31
 8005584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800558c:	d02b      	beq.n	80055e6 <__lshift+0xbe>
 800558e:	468a      	mov	sl, r1
 8005590:	2200      	movs	r2, #0
 8005592:	f1c9 0e20 	rsb	lr, r9, #32
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	fa00 f009 	lsl.w	r0, r0, r9
 800559c:	4302      	orrs	r2, r0
 800559e:	f84a 2b04 	str.w	r2, [sl], #4
 80055a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a6:	459c      	cmp	ip, r3
 80055a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80055ac:	d8f3      	bhi.n	8005596 <__lshift+0x6e>
 80055ae:	ebac 0304 	sub.w	r3, ip, r4
 80055b2:	3b15      	subs	r3, #21
 80055b4:	f023 0303 	bic.w	r3, r3, #3
 80055b8:	3304      	adds	r3, #4
 80055ba:	f104 0015 	add.w	r0, r4, #21
 80055be:	4584      	cmp	ip, r0
 80055c0:	bf38      	it	cc
 80055c2:	2304      	movcc	r3, #4
 80055c4:	50ca      	str	r2, [r1, r3]
 80055c6:	b10a      	cbz	r2, 80055cc <__lshift+0xa4>
 80055c8:	f108 0602 	add.w	r6, r8, #2
 80055cc:	3e01      	subs	r6, #1
 80055ce:	4638      	mov	r0, r7
 80055d0:	4621      	mov	r1, r4
 80055d2:	612e      	str	r6, [r5, #16]
 80055d4:	f7ff fdda 	bl	800518c <_Bfree>
 80055d8:	4628      	mov	r0, r5
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	f842 0f04 	str.w	r0, [r2, #4]!
 80055e2:	3301      	adds	r3, #1
 80055e4:	e7c5      	b.n	8005572 <__lshift+0x4a>
 80055e6:	3904      	subs	r1, #4
 80055e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ec:	459c      	cmp	ip, r3
 80055ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80055f2:	d8f9      	bhi.n	80055e8 <__lshift+0xc0>
 80055f4:	e7ea      	b.n	80055cc <__lshift+0xa4>
 80055f6:	bf00      	nop
 80055f8:	08006623 	.word	0x08006623
 80055fc:	08006634 	.word	0x08006634

08005600 <__mcmp>:
 8005600:	4603      	mov	r3, r0
 8005602:	690a      	ldr	r2, [r1, #16]
 8005604:	6900      	ldr	r0, [r0, #16]
 8005606:	b530      	push	{r4, r5, lr}
 8005608:	1a80      	subs	r0, r0, r2
 800560a:	d10d      	bne.n	8005628 <__mcmp+0x28>
 800560c:	3314      	adds	r3, #20
 800560e:	3114      	adds	r1, #20
 8005610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800561c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005620:	4295      	cmp	r5, r2
 8005622:	d002      	beq.n	800562a <__mcmp+0x2a>
 8005624:	d304      	bcc.n	8005630 <__mcmp+0x30>
 8005626:	2001      	movs	r0, #1
 8005628:	bd30      	pop	{r4, r5, pc}
 800562a:	42a3      	cmp	r3, r4
 800562c:	d3f4      	bcc.n	8005618 <__mcmp+0x18>
 800562e:	e7fb      	b.n	8005628 <__mcmp+0x28>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	e7f8      	b.n	8005628 <__mcmp+0x28>
	...

08005638 <__mdiff>:
 8005638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	460c      	mov	r4, r1
 800563e:	4606      	mov	r6, r0
 8005640:	4611      	mov	r1, r2
 8005642:	4620      	mov	r0, r4
 8005644:	4692      	mov	sl, r2
 8005646:	f7ff ffdb 	bl	8005600 <__mcmp>
 800564a:	1e05      	subs	r5, r0, #0
 800564c:	d111      	bne.n	8005672 <__mdiff+0x3a>
 800564e:	4629      	mov	r1, r5
 8005650:	4630      	mov	r0, r6
 8005652:	f7ff fd5b 	bl	800510c <_Balloc>
 8005656:	4602      	mov	r2, r0
 8005658:	b928      	cbnz	r0, 8005666 <__mdiff+0x2e>
 800565a:	f240 2132 	movw	r1, #562	; 0x232
 800565e:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <__mdiff+0x118>)
 8005660:	483c      	ldr	r0, [pc, #240]	; (8005754 <__mdiff+0x11c>)
 8005662:	f000 f8e3 	bl	800582c <__assert_func>
 8005666:	2301      	movs	r3, #1
 8005668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800566c:	4610      	mov	r0, r2
 800566e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	bfa4      	itt	ge
 8005674:	4653      	movge	r3, sl
 8005676:	46a2      	movge	sl, r4
 8005678:	4630      	mov	r0, r6
 800567a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800567e:	bfa6      	itte	ge
 8005680:	461c      	movge	r4, r3
 8005682:	2500      	movge	r5, #0
 8005684:	2501      	movlt	r5, #1
 8005686:	f7ff fd41 	bl	800510c <_Balloc>
 800568a:	4602      	mov	r2, r0
 800568c:	b918      	cbnz	r0, 8005696 <__mdiff+0x5e>
 800568e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005692:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <__mdiff+0x118>)
 8005694:	e7e4      	b.n	8005660 <__mdiff+0x28>
 8005696:	f100 0814 	add.w	r8, r0, #20
 800569a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800569e:	60c5      	str	r5, [r0, #12]
 80056a0:	f04f 0c00 	mov.w	ip, #0
 80056a4:	f10a 0514 	add.w	r5, sl, #20
 80056a8:	f10a 0010 	add.w	r0, sl, #16
 80056ac:	46c2      	mov	sl, r8
 80056ae:	6926      	ldr	r6, [r4, #16]
 80056b0:	f104 0914 	add.w	r9, r4, #20
 80056b4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80056b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056bc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80056c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80056c4:	fa1f f18b 	uxth.w	r1, fp
 80056c8:	4461      	add	r1, ip
 80056ca:	fa1f fc83 	uxth.w	ip, r3
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	eba1 010c 	sub.w	r1, r1, ip
 80056d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056dc:	b289      	uxth	r1, r1
 80056de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056e2:	454e      	cmp	r6, r9
 80056e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80056e8:	f84a 3b04 	str.w	r3, [sl], #4
 80056ec:	d8e6      	bhi.n	80056bc <__mdiff+0x84>
 80056ee:	1b33      	subs	r3, r6, r4
 80056f0:	3b15      	subs	r3, #21
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	3415      	adds	r4, #21
 80056f8:	3304      	adds	r3, #4
 80056fa:	42a6      	cmp	r6, r4
 80056fc:	bf38      	it	cc
 80056fe:	2304      	movcc	r3, #4
 8005700:	441d      	add	r5, r3
 8005702:	4443      	add	r3, r8
 8005704:	461e      	mov	r6, r3
 8005706:	462c      	mov	r4, r5
 8005708:	4574      	cmp	r4, lr
 800570a:	d30e      	bcc.n	800572a <__mdiff+0xf2>
 800570c:	f10e 0103 	add.w	r1, lr, #3
 8005710:	1b49      	subs	r1, r1, r5
 8005712:	f021 0103 	bic.w	r1, r1, #3
 8005716:	3d03      	subs	r5, #3
 8005718:	45ae      	cmp	lr, r5
 800571a:	bf38      	it	cc
 800571c:	2100      	movcc	r1, #0
 800571e:	4419      	add	r1, r3
 8005720:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005724:	b18b      	cbz	r3, 800574a <__mdiff+0x112>
 8005726:	6117      	str	r7, [r2, #16]
 8005728:	e7a0      	b.n	800566c <__mdiff+0x34>
 800572a:	f854 8b04 	ldr.w	r8, [r4], #4
 800572e:	fa1f f188 	uxth.w	r1, r8
 8005732:	4461      	add	r1, ip
 8005734:	1408      	asrs	r0, r1, #16
 8005736:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800573a:	b289      	uxth	r1, r1
 800573c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005744:	f846 1b04 	str.w	r1, [r6], #4
 8005748:	e7de      	b.n	8005708 <__mdiff+0xd0>
 800574a:	3f01      	subs	r7, #1
 800574c:	e7e8      	b.n	8005720 <__mdiff+0xe8>
 800574e:	bf00      	nop
 8005750:	08006623 	.word	0x08006623
 8005754:	08006634 	.word	0x08006634

08005758 <__d2b>:
 8005758:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800575c:	2101      	movs	r1, #1
 800575e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005762:	4690      	mov	r8, r2
 8005764:	461d      	mov	r5, r3
 8005766:	f7ff fcd1 	bl	800510c <_Balloc>
 800576a:	4604      	mov	r4, r0
 800576c:	b930      	cbnz	r0, 800577c <__d2b+0x24>
 800576e:	4602      	mov	r2, r0
 8005770:	f240 310a 	movw	r1, #778	; 0x30a
 8005774:	4b24      	ldr	r3, [pc, #144]	; (8005808 <__d2b+0xb0>)
 8005776:	4825      	ldr	r0, [pc, #148]	; (800580c <__d2b+0xb4>)
 8005778:	f000 f858 	bl	800582c <__assert_func>
 800577c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005780:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005784:	bb2d      	cbnz	r5, 80057d2 <__d2b+0x7a>
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	f1b8 0300 	subs.w	r3, r8, #0
 800578c:	d026      	beq.n	80057dc <__d2b+0x84>
 800578e:	4668      	mov	r0, sp
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	f7ff fd87 	bl	80052a4 <__lo0bits>
 8005796:	9900      	ldr	r1, [sp, #0]
 8005798:	b1f0      	cbz	r0, 80057d8 <__d2b+0x80>
 800579a:	9a01      	ldr	r2, [sp, #4]
 800579c:	f1c0 0320 	rsb	r3, r0, #32
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	430b      	orrs	r3, r1
 80057a6:	40c2      	lsrs	r2, r0
 80057a8:	6163      	str	r3, [r4, #20]
 80057aa:	9201      	str	r2, [sp, #4]
 80057ac:	9b01      	ldr	r3, [sp, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2102      	movne	r1, #2
 80057b4:	2101      	moveq	r1, #1
 80057b6:	61a3      	str	r3, [r4, #24]
 80057b8:	6121      	str	r1, [r4, #16]
 80057ba:	b1c5      	cbz	r5, 80057ee <__d2b+0x96>
 80057bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057c0:	4405      	add	r5, r0
 80057c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057c6:	603d      	str	r5, [r7, #0]
 80057c8:	6030      	str	r0, [r6, #0]
 80057ca:	4620      	mov	r0, r4
 80057cc:	b002      	add	sp, #8
 80057ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d6:	e7d6      	b.n	8005786 <__d2b+0x2e>
 80057d8:	6161      	str	r1, [r4, #20]
 80057da:	e7e7      	b.n	80057ac <__d2b+0x54>
 80057dc:	a801      	add	r0, sp, #4
 80057de:	f7ff fd61 	bl	80052a4 <__lo0bits>
 80057e2:	2101      	movs	r1, #1
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	6121      	str	r1, [r4, #16]
 80057e8:	6163      	str	r3, [r4, #20]
 80057ea:	3020      	adds	r0, #32
 80057ec:	e7e5      	b.n	80057ba <__d2b+0x62>
 80057ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80057f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057f6:	6038      	str	r0, [r7, #0]
 80057f8:	6918      	ldr	r0, [r3, #16]
 80057fa:	f7ff fd33 	bl	8005264 <__hi0bits>
 80057fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005802:	6031      	str	r1, [r6, #0]
 8005804:	e7e1      	b.n	80057ca <__d2b+0x72>
 8005806:	bf00      	nop
 8005808:	08006623 	.word	0x08006623
 800580c:	08006634 	.word	0x08006634

08005810 <_calloc_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	fb02 f501 	mul.w	r5, r2, r1
 8005816:	4629      	mov	r1, r5
 8005818:	f7fe f906 	bl	8003a28 <_malloc_r>
 800581c:	4604      	mov	r4, r0
 800581e:	b118      	cbz	r0, 8005828 <_calloc_r+0x18>
 8005820:	462a      	mov	r2, r5
 8005822:	2100      	movs	r1, #0
 8005824:	f7fe f8ac 	bl	8003980 <memset>
 8005828:	4620      	mov	r0, r4
 800582a:	bd38      	pop	{r3, r4, r5, pc}

0800582c <__assert_func>:
 800582c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800582e:	4614      	mov	r4, r2
 8005830:	461a      	mov	r2, r3
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <__assert_func+0x2c>)
 8005834:	4605      	mov	r5, r0
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68d8      	ldr	r0, [r3, #12]
 800583a:	b14c      	cbz	r4, 8005850 <__assert_func+0x24>
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <__assert_func+0x30>)
 800583e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005842:	9100      	str	r1, [sp, #0]
 8005844:	462b      	mov	r3, r5
 8005846:	4906      	ldr	r1, [pc, #24]	; (8005860 <__assert_func+0x34>)
 8005848:	f000 f80e 	bl	8005868 <fiprintf>
 800584c:	f000 fa58 	bl	8005d00 <abort>
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <__assert_func+0x38>)
 8005852:	461c      	mov	r4, r3
 8005854:	e7f3      	b.n	800583e <__assert_func+0x12>
 8005856:	bf00      	nop
 8005858:	2000000c 	.word	0x2000000c
 800585c:	08006794 	.word	0x08006794
 8005860:	080067a1 	.word	0x080067a1
 8005864:	080067cf 	.word	0x080067cf

08005868 <fiprintf>:
 8005868:	b40e      	push	{r1, r2, r3}
 800586a:	b503      	push	{r0, r1, lr}
 800586c:	4601      	mov	r1, r0
 800586e:	ab03      	add	r3, sp, #12
 8005870:	4805      	ldr	r0, [pc, #20]	; (8005888 <fiprintf+0x20>)
 8005872:	f853 2b04 	ldr.w	r2, [r3], #4
 8005876:	6800      	ldr	r0, [r0, #0]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	f000 f843 	bl	8005904 <_vfiprintf_r>
 800587e:	b002      	add	sp, #8
 8005880:	f85d eb04 	ldr.w	lr, [sp], #4
 8005884:	b003      	add	sp, #12
 8005886:	4770      	bx	lr
 8005888:	2000000c 	.word	0x2000000c

0800588c <__retarget_lock_init_recursive>:
 800588c:	4770      	bx	lr

0800588e <__retarget_lock_acquire_recursive>:
 800588e:	4770      	bx	lr

08005890 <__retarget_lock_release_recursive>:
 8005890:	4770      	bx	lr

08005892 <__ascii_mbtowc>:
 8005892:	b082      	sub	sp, #8
 8005894:	b901      	cbnz	r1, 8005898 <__ascii_mbtowc+0x6>
 8005896:	a901      	add	r1, sp, #4
 8005898:	b142      	cbz	r2, 80058ac <__ascii_mbtowc+0x1a>
 800589a:	b14b      	cbz	r3, 80058b0 <__ascii_mbtowc+0x1e>
 800589c:	7813      	ldrb	r3, [r2, #0]
 800589e:	600b      	str	r3, [r1, #0]
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	1e10      	subs	r0, r2, #0
 80058a4:	bf18      	it	ne
 80058a6:	2001      	movne	r0, #1
 80058a8:	b002      	add	sp, #8
 80058aa:	4770      	bx	lr
 80058ac:	4610      	mov	r0, r2
 80058ae:	e7fb      	b.n	80058a8 <__ascii_mbtowc+0x16>
 80058b0:	f06f 0001 	mvn.w	r0, #1
 80058b4:	e7f8      	b.n	80058a8 <__ascii_mbtowc+0x16>

080058b6 <__sfputc_r>:
 80058b6:	6893      	ldr	r3, [r2, #8]
 80058b8:	b410      	push	{r4}
 80058ba:	3b01      	subs	r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	6093      	str	r3, [r2, #8]
 80058c0:	da07      	bge.n	80058d2 <__sfputc_r+0x1c>
 80058c2:	6994      	ldr	r4, [r2, #24]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	db01      	blt.n	80058cc <__sfputc_r+0x16>
 80058c8:	290a      	cmp	r1, #10
 80058ca:	d102      	bne.n	80058d2 <__sfputc_r+0x1c>
 80058cc:	bc10      	pop	{r4}
 80058ce:	f000 b949 	b.w	8005b64 <__swbuf_r>
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	1c58      	adds	r0, r3, #1
 80058d6:	6010      	str	r0, [r2, #0]
 80058d8:	7019      	strb	r1, [r3, #0]
 80058da:	4608      	mov	r0, r1
 80058dc:	bc10      	pop	{r4}
 80058de:	4770      	bx	lr

080058e0 <__sfputs_r>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	4614      	mov	r4, r2
 80058e8:	18d5      	adds	r5, r2, r3
 80058ea:	42ac      	cmp	r4, r5
 80058ec:	d101      	bne.n	80058f2 <__sfputs_r+0x12>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e007      	b.n	8005902 <__sfputs_r+0x22>
 80058f2:	463a      	mov	r2, r7
 80058f4:	4630      	mov	r0, r6
 80058f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fa:	f7ff ffdc 	bl	80058b6 <__sfputc_r>
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	d1f3      	bne.n	80058ea <__sfputs_r+0xa>
 8005902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005904 <_vfiprintf_r>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	460d      	mov	r5, r1
 800590a:	4614      	mov	r4, r2
 800590c:	4698      	mov	r8, r3
 800590e:	4606      	mov	r6, r0
 8005910:	b09d      	sub	sp, #116	; 0x74
 8005912:	b118      	cbz	r0, 800591c <_vfiprintf_r+0x18>
 8005914:	6983      	ldr	r3, [r0, #24]
 8005916:	b90b      	cbnz	r3, 800591c <_vfiprintf_r+0x18>
 8005918:	f000 fb14 	bl	8005f44 <__sinit>
 800591c:	4b89      	ldr	r3, [pc, #548]	; (8005b44 <_vfiprintf_r+0x240>)
 800591e:	429d      	cmp	r5, r3
 8005920:	d11b      	bne.n	800595a <_vfiprintf_r+0x56>
 8005922:	6875      	ldr	r5, [r6, #4]
 8005924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	d405      	bmi.n	8005936 <_vfiprintf_r+0x32>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d402      	bmi.n	8005936 <_vfiprintf_r+0x32>
 8005930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005932:	f7ff ffac 	bl	800588e <__retarget_lock_acquire_recursive>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	071b      	lsls	r3, r3, #28
 800593a:	d501      	bpl.n	8005940 <_vfiprintf_r+0x3c>
 800593c:	692b      	ldr	r3, [r5, #16]
 800593e:	b9eb      	cbnz	r3, 800597c <_vfiprintf_r+0x78>
 8005940:	4629      	mov	r1, r5
 8005942:	4630      	mov	r0, r6
 8005944:	f000 f96e 	bl	8005c24 <__swsetup_r>
 8005948:	b1c0      	cbz	r0, 800597c <_vfiprintf_r+0x78>
 800594a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800594c:	07dc      	lsls	r4, r3, #31
 800594e:	d50e      	bpl.n	800596e <_vfiprintf_r+0x6a>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	b01d      	add	sp, #116	; 0x74
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	4b7b      	ldr	r3, [pc, #492]	; (8005b48 <_vfiprintf_r+0x244>)
 800595c:	429d      	cmp	r5, r3
 800595e:	d101      	bne.n	8005964 <_vfiprintf_r+0x60>
 8005960:	68b5      	ldr	r5, [r6, #8]
 8005962:	e7df      	b.n	8005924 <_vfiprintf_r+0x20>
 8005964:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <_vfiprintf_r+0x248>)
 8005966:	429d      	cmp	r5, r3
 8005968:	bf08      	it	eq
 800596a:	68f5      	ldreq	r5, [r6, #12]
 800596c:	e7da      	b.n	8005924 <_vfiprintf_r+0x20>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	0598      	lsls	r0, r3, #22
 8005972:	d4ed      	bmi.n	8005950 <_vfiprintf_r+0x4c>
 8005974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005976:	f7ff ff8b 	bl	8005890 <__retarget_lock_release_recursive>
 800597a:	e7e9      	b.n	8005950 <_vfiprintf_r+0x4c>
 800597c:	2300      	movs	r3, #0
 800597e:	9309      	str	r3, [sp, #36]	; 0x24
 8005980:	2320      	movs	r3, #32
 8005982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005986:	2330      	movs	r3, #48	; 0x30
 8005988:	f04f 0901 	mov.w	r9, #1
 800598c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005990:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b50 <_vfiprintf_r+0x24c>
 8005994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005998:	4623      	mov	r3, r4
 800599a:	469a      	mov	sl, r3
 800599c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059a0:	b10a      	cbz	r2, 80059a6 <_vfiprintf_r+0xa2>
 80059a2:	2a25      	cmp	r2, #37	; 0x25
 80059a4:	d1f9      	bne.n	800599a <_vfiprintf_r+0x96>
 80059a6:	ebba 0b04 	subs.w	fp, sl, r4
 80059aa:	d00b      	beq.n	80059c4 <_vfiprintf_r+0xc0>
 80059ac:	465b      	mov	r3, fp
 80059ae:	4622      	mov	r2, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ff94 	bl	80058e0 <__sfputs_r>
 80059b8:	3001      	adds	r0, #1
 80059ba:	f000 80aa 	beq.w	8005b12 <_vfiprintf_r+0x20e>
 80059be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059c0:	445a      	add	r2, fp
 80059c2:	9209      	str	r2, [sp, #36]	; 0x24
 80059c4:	f89a 3000 	ldrb.w	r3, [sl]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a2 	beq.w	8005b12 <_vfiprintf_r+0x20e>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059d8:	f10a 0a01 	add.w	sl, sl, #1
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	9307      	str	r3, [sp, #28]
 80059e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059e4:	931a      	str	r3, [sp, #104]	; 0x68
 80059e6:	4654      	mov	r4, sl
 80059e8:	2205      	movs	r2, #5
 80059ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ee:	4858      	ldr	r0, [pc, #352]	; (8005b50 <_vfiprintf_r+0x24c>)
 80059f0:	f7ff fb64 	bl	80050bc <memchr>
 80059f4:	9a04      	ldr	r2, [sp, #16]
 80059f6:	b9d8      	cbnz	r0, 8005a30 <_vfiprintf_r+0x12c>
 80059f8:	06d1      	lsls	r1, r2, #27
 80059fa:	bf44      	itt	mi
 80059fc:	2320      	movmi	r3, #32
 80059fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a02:	0713      	lsls	r3, r2, #28
 8005a04:	bf44      	itt	mi
 8005a06:	232b      	movmi	r3, #43	; 0x2b
 8005a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a10:	2b2a      	cmp	r3, #42	; 0x2a
 8005a12:	d015      	beq.n	8005a40 <_vfiprintf_r+0x13c>
 8005a14:	4654      	mov	r4, sl
 8005a16:	2000      	movs	r0, #0
 8005a18:	f04f 0c0a 	mov.w	ip, #10
 8005a1c:	9a07      	ldr	r2, [sp, #28]
 8005a1e:	4621      	mov	r1, r4
 8005a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a24:	3b30      	subs	r3, #48	; 0x30
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d94e      	bls.n	8005ac8 <_vfiprintf_r+0x1c4>
 8005a2a:	b1b0      	cbz	r0, 8005a5a <_vfiprintf_r+0x156>
 8005a2c:	9207      	str	r2, [sp, #28]
 8005a2e:	e014      	b.n	8005a5a <_vfiprintf_r+0x156>
 8005a30:	eba0 0308 	sub.w	r3, r0, r8
 8005a34:	fa09 f303 	lsl.w	r3, r9, r3
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	46a2      	mov	sl, r4
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	e7d2      	b.n	80059e6 <_vfiprintf_r+0xe2>
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	1d19      	adds	r1, r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	9103      	str	r1, [sp, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bfbb      	ittet	lt
 8005a4c:	425b      	neglt	r3, r3
 8005a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a52:	9307      	strge	r3, [sp, #28]
 8005a54:	9307      	strlt	r3, [sp, #28]
 8005a56:	bfb8      	it	lt
 8005a58:	9204      	strlt	r2, [sp, #16]
 8005a5a:	7823      	ldrb	r3, [r4, #0]
 8005a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a5e:	d10c      	bne.n	8005a7a <_vfiprintf_r+0x176>
 8005a60:	7863      	ldrb	r3, [r4, #1]
 8005a62:	2b2a      	cmp	r3, #42	; 0x2a
 8005a64:	d135      	bne.n	8005ad2 <_vfiprintf_r+0x1ce>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	3402      	adds	r4, #2
 8005a6a:	1d1a      	adds	r2, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	9203      	str	r2, [sp, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfb8      	it	lt
 8005a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b60 <_vfiprintf_r+0x25c>
 8005a7e:	2203      	movs	r2, #3
 8005a80:	4650      	mov	r0, sl
 8005a82:	7821      	ldrb	r1, [r4, #0]
 8005a84:	f7ff fb1a 	bl	80050bc <memchr>
 8005a88:	b140      	cbz	r0, 8005a9c <_vfiprintf_r+0x198>
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	eba0 000a 	sub.w	r0, r0, sl
 8005a90:	fa03 f000 	lsl.w	r0, r3, r0
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	3401      	adds	r4, #1
 8005a98:	4303      	orrs	r3, r0
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa0:	2206      	movs	r2, #6
 8005aa2:	482c      	ldr	r0, [pc, #176]	; (8005b54 <_vfiprintf_r+0x250>)
 8005aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aa8:	f7ff fb08 	bl	80050bc <memchr>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d03f      	beq.n	8005b30 <_vfiprintf_r+0x22c>
 8005ab0:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <_vfiprintf_r+0x254>)
 8005ab2:	bb1b      	cbnz	r3, 8005afc <_vfiprintf_r+0x1f8>
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	3307      	adds	r3, #7
 8005ab8:	f023 0307 	bic.w	r3, r3, #7
 8005abc:	3308      	adds	r3, #8
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac2:	443b      	add	r3, r7
 8005ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac6:	e767      	b.n	8005998 <_vfiprintf_r+0x94>
 8005ac8:	460c      	mov	r4, r1
 8005aca:	2001      	movs	r0, #1
 8005acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad0:	e7a5      	b.n	8005a1e <_vfiprintf_r+0x11a>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f04f 0c0a 	mov.w	ip, #10
 8005ad8:	4619      	mov	r1, r3
 8005ada:	3401      	adds	r4, #1
 8005adc:	9305      	str	r3, [sp, #20]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ae4:	3a30      	subs	r2, #48	; 0x30
 8005ae6:	2a09      	cmp	r2, #9
 8005ae8:	d903      	bls.n	8005af2 <_vfiprintf_r+0x1ee>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0c5      	beq.n	8005a7a <_vfiprintf_r+0x176>
 8005aee:	9105      	str	r1, [sp, #20]
 8005af0:	e7c3      	b.n	8005a7a <_vfiprintf_r+0x176>
 8005af2:	4604      	mov	r4, r0
 8005af4:	2301      	movs	r3, #1
 8005af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005afa:	e7f0      	b.n	8005ade <_vfiprintf_r+0x1da>
 8005afc:	ab03      	add	r3, sp, #12
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	462a      	mov	r2, r5
 8005b02:	4630      	mov	r0, r6
 8005b04:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <_vfiprintf_r+0x258>)
 8005b06:	a904      	add	r1, sp, #16
 8005b08:	f7fe f886 	bl	8003c18 <_printf_float>
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	1c78      	adds	r0, r7, #1
 8005b10:	d1d6      	bne.n	8005ac0 <_vfiprintf_r+0x1bc>
 8005b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b14:	07d9      	lsls	r1, r3, #31
 8005b16:	d405      	bmi.n	8005b24 <_vfiprintf_r+0x220>
 8005b18:	89ab      	ldrh	r3, [r5, #12]
 8005b1a:	059a      	lsls	r2, r3, #22
 8005b1c:	d402      	bmi.n	8005b24 <_vfiprintf_r+0x220>
 8005b1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b20:	f7ff feb6 	bl	8005890 <__retarget_lock_release_recursive>
 8005b24:	89ab      	ldrh	r3, [r5, #12]
 8005b26:	065b      	lsls	r3, r3, #25
 8005b28:	f53f af12 	bmi.w	8005950 <_vfiprintf_r+0x4c>
 8005b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b2e:	e711      	b.n	8005954 <_vfiprintf_r+0x50>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4630      	mov	r0, r6
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <_vfiprintf_r+0x258>)
 8005b3a:	a904      	add	r1, sp, #16
 8005b3c:	f7fe fb08 	bl	8004150 <_printf_i>
 8005b40:	e7e4      	b.n	8005b0c <_vfiprintf_r+0x208>
 8005b42:	bf00      	nop
 8005b44:	0800690c 	.word	0x0800690c
 8005b48:	0800692c 	.word	0x0800692c
 8005b4c:	080068ec 	.word	0x080068ec
 8005b50:	080067da 	.word	0x080067da
 8005b54:	080067e4 	.word	0x080067e4
 8005b58:	08003c19 	.word	0x08003c19
 8005b5c:	080058e1 	.word	0x080058e1
 8005b60:	080067e0 	.word	0x080067e0

08005b64 <__swbuf_r>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b118      	cbz	r0, 8005b76 <__swbuf_r+0x12>
 8005b6e:	6983      	ldr	r3, [r0, #24]
 8005b70:	b90b      	cbnz	r3, 8005b76 <__swbuf_r+0x12>
 8005b72:	f000 f9e7 	bl	8005f44 <__sinit>
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <__swbuf_r+0x98>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	d12b      	bne.n	8005bd4 <__swbuf_r+0x70>
 8005b7c:	686c      	ldr	r4, [r5, #4]
 8005b7e:	69a3      	ldr	r3, [r4, #24]
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	071a      	lsls	r2, r3, #28
 8005b86:	d52f      	bpl.n	8005be8 <__swbuf_r+0x84>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b36b      	cbz	r3, 8005be8 <__swbuf_r+0x84>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	b2f6      	uxtb	r6, r6
 8005b92:	1ac0      	subs	r0, r0, r3
 8005b94:	6963      	ldr	r3, [r4, #20]
 8005b96:	4637      	mov	r7, r6
 8005b98:	4283      	cmp	r3, r0
 8005b9a:	dc04      	bgt.n	8005ba6 <__swbuf_r+0x42>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f93c 	bl	8005e1c <_fflush_r>
 8005ba4:	bb30      	cbnz	r0, 8005bf4 <__swbuf_r+0x90>
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	3001      	adds	r0, #1
 8005baa:	3b01      	subs	r3, #1
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	701e      	strb	r6, [r3, #0]
 8005bb6:	6963      	ldr	r3, [r4, #20]
 8005bb8:	4283      	cmp	r3, r0
 8005bba:	d004      	beq.n	8005bc6 <__swbuf_r+0x62>
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	d506      	bpl.n	8005bd0 <__swbuf_r+0x6c>
 8005bc2:	2e0a      	cmp	r6, #10
 8005bc4:	d104      	bne.n	8005bd0 <__swbuf_r+0x6c>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 f927 	bl	8005e1c <_fflush_r>
 8005bce:	b988      	cbnz	r0, 8005bf4 <__swbuf_r+0x90>
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <__swbuf_r+0x9c>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <__swbuf_r+0x7a>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7cf      	b.n	8005b7e <__swbuf_r+0x1a>
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <__swbuf_r+0xa0>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7ca      	b.n	8005b7e <__swbuf_r+0x1a>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f81a 	bl	8005c24 <__swsetup_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d0cb      	beq.n	8005b8c <__swbuf_r+0x28>
 8005bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8005bf8:	e7ea      	b.n	8005bd0 <__swbuf_r+0x6c>
 8005bfa:	bf00      	nop
 8005bfc:	0800690c 	.word	0x0800690c
 8005c00:	0800692c 	.word	0x0800692c
 8005c04:	080068ec 	.word	0x080068ec

08005c08 <__ascii_wctomb>:
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	b141      	cbz	r1, 8005c20 <__ascii_wctomb+0x18>
 8005c0e:	2aff      	cmp	r2, #255	; 0xff
 8005c10:	d904      	bls.n	8005c1c <__ascii_wctomb+0x14>
 8005c12:	228a      	movs	r2, #138	; 0x8a
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	4770      	bx	lr
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	700a      	strb	r2, [r1, #0]
 8005c20:	4770      	bx	lr
	...

08005c24 <__swsetup_r>:
 8005c24:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <__swsetup_r+0xcc>)
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	b125      	cbz	r5, 8005c3a <__swsetup_r+0x16>
 8005c30:	69ab      	ldr	r3, [r5, #24]
 8005c32:	b913      	cbnz	r3, 8005c3a <__swsetup_r+0x16>
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 f985 	bl	8005f44 <__sinit>
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <__swsetup_r+0xd0>)
 8005c3c:	429c      	cmp	r4, r3
 8005c3e:	d10f      	bne.n	8005c60 <__swsetup_r+0x3c>
 8005c40:	686c      	ldr	r4, [r5, #4]
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c48:	0719      	lsls	r1, r3, #28
 8005c4a:	d42c      	bmi.n	8005ca6 <__swsetup_r+0x82>
 8005c4c:	06dd      	lsls	r5, r3, #27
 8005c4e:	d411      	bmi.n	8005c74 <__swsetup_r+0x50>
 8005c50:	2309      	movs	r3, #9
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	e03e      	b.n	8005cde <__swsetup_r+0xba>
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <__swsetup_r+0xd4>)
 8005c62:	429c      	cmp	r4, r3
 8005c64:	d101      	bne.n	8005c6a <__swsetup_r+0x46>
 8005c66:	68ac      	ldr	r4, [r5, #8]
 8005c68:	e7eb      	b.n	8005c42 <__swsetup_r+0x1e>
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <__swsetup_r+0xd8>)
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	bf08      	it	eq
 8005c70:	68ec      	ldreq	r4, [r5, #12]
 8005c72:	e7e6      	b.n	8005c42 <__swsetup_r+0x1e>
 8005c74:	0758      	lsls	r0, r3, #29
 8005c76:	d512      	bpl.n	8005c9e <__swsetup_r+0x7a>
 8005c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7a:	b141      	cbz	r1, 8005c8e <__swsetup_r+0x6a>
 8005c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c80:	4299      	cmp	r1, r3
 8005c82:	d002      	beq.n	8005c8a <__swsetup_r+0x66>
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7fd fe83 	bl	8003990 <_free_r>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	2300      	movs	r3, #0
 8005c98:	6063      	str	r3, [r4, #4]
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	f043 0308 	orr.w	r3, r3, #8
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	b94b      	cbnz	r3, 8005cbe <__swsetup_r+0x9a>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d003      	beq.n	8005cbe <__swsetup_r+0x9a>
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 fa05 	bl	80060c8 <__smakebuf_r>
 8005cbe:	89a0      	ldrh	r0, [r4, #12]
 8005cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc4:	f010 0301 	ands.w	r3, r0, #1
 8005cc8:	d00a      	beq.n	8005ce0 <__swsetup_r+0xbc>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60a3      	str	r3, [r4, #8]
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	61a3      	str	r3, [r4, #24]
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	b943      	cbnz	r3, 8005cea <__swsetup_r+0xc6>
 8005cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cdc:	d1ba      	bne.n	8005c54 <__swsetup_r+0x30>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	0781      	lsls	r1, r0, #30
 8005ce2:	bf58      	it	pl
 8005ce4:	6963      	ldrpl	r3, [r4, #20]
 8005ce6:	60a3      	str	r3, [r4, #8]
 8005ce8:	e7f4      	b.n	8005cd4 <__swsetup_r+0xb0>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e7f7      	b.n	8005cde <__swsetup_r+0xba>
 8005cee:	bf00      	nop
 8005cf0:	2000000c 	.word	0x2000000c
 8005cf4:	0800690c 	.word	0x0800690c
 8005cf8:	0800692c 	.word	0x0800692c
 8005cfc:	080068ec 	.word	0x080068ec

08005d00 <abort>:
 8005d00:	2006      	movs	r0, #6
 8005d02:	b508      	push	{r3, lr}
 8005d04:	f000 fa48 	bl	8006198 <raise>
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f7fb fc89 	bl	8001620 <_exit>
	...

08005d10 <__sflush_r>:
 8005d10:	898a      	ldrh	r2, [r1, #12]
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	4605      	mov	r5, r0
 8005d18:	0710      	lsls	r0, r2, #28
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	d458      	bmi.n	8005dd0 <__sflush_r+0xc0>
 8005d1e:	684b      	ldr	r3, [r1, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dc05      	bgt.n	8005d30 <__sflush_r+0x20>
 8005d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dc02      	bgt.n	8005d30 <__sflush_r+0x20>
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	d0f9      	beq.n	8005d2a <__sflush_r+0x1a>
 8005d36:	2300      	movs	r3, #0
 8005d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d3c:	682f      	ldr	r7, [r5, #0]
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	d032      	beq.n	8005da8 <__sflush_r+0x98>
 8005d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	075a      	lsls	r2, r3, #29
 8005d48:	d505      	bpl.n	8005d56 <__sflush_r+0x46>
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	1ac0      	subs	r0, r0, r3
 8005d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d50:	b10b      	cbz	r3, 8005d56 <__sflush_r+0x46>
 8005d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d54:	1ac0      	subs	r0, r0, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	47b0      	blx	r6
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	d106      	bne.n	8005d76 <__sflush_r+0x66>
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	291d      	cmp	r1, #29
 8005d6c:	d82c      	bhi.n	8005dc8 <__sflush_r+0xb8>
 8005d6e:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <__sflush_r+0x108>)
 8005d70:	40ca      	lsrs	r2, r1
 8005d72:	07d6      	lsls	r6, r2, #31
 8005d74:	d528      	bpl.n	8005dc8 <__sflush_r+0xb8>
 8005d76:	2200      	movs	r2, #0
 8005d78:	6062      	str	r2, [r4, #4]
 8005d7a:	6922      	ldr	r2, [r4, #16]
 8005d7c:	04d9      	lsls	r1, r3, #19
 8005d7e:	6022      	str	r2, [r4, #0]
 8005d80:	d504      	bpl.n	8005d8c <__sflush_r+0x7c>
 8005d82:	1c42      	adds	r2, r0, #1
 8005d84:	d101      	bne.n	8005d8a <__sflush_r+0x7a>
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	b903      	cbnz	r3, 8005d8c <__sflush_r+0x7c>
 8005d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d8e:	602f      	str	r7, [r5, #0]
 8005d90:	2900      	cmp	r1, #0
 8005d92:	d0ca      	beq.n	8005d2a <__sflush_r+0x1a>
 8005d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	d002      	beq.n	8005da2 <__sflush_r+0x92>
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7fd fdf7 	bl	8003990 <_free_r>
 8005da2:	2000      	movs	r0, #0
 8005da4:	6360      	str	r0, [r4, #52]	; 0x34
 8005da6:	e7c1      	b.n	8005d2c <__sflush_r+0x1c>
 8005da8:	6a21      	ldr	r1, [r4, #32]
 8005daa:	2301      	movs	r3, #1
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b0      	blx	r6
 8005db0:	1c41      	adds	r1, r0, #1
 8005db2:	d1c7      	bne.n	8005d44 <__sflush_r+0x34>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c4      	beq.n	8005d44 <__sflush_r+0x34>
 8005dba:	2b1d      	cmp	r3, #29
 8005dbc:	d001      	beq.n	8005dc2 <__sflush_r+0xb2>
 8005dbe:	2b16      	cmp	r3, #22
 8005dc0:	d101      	bne.n	8005dc6 <__sflush_r+0xb6>
 8005dc2:	602f      	str	r7, [r5, #0]
 8005dc4:	e7b1      	b.n	8005d2a <__sflush_r+0x1a>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	e7ad      	b.n	8005d2c <__sflush_r+0x1c>
 8005dd0:	690f      	ldr	r7, [r1, #16]
 8005dd2:	2f00      	cmp	r7, #0
 8005dd4:	d0a9      	beq.n	8005d2a <__sflush_r+0x1a>
 8005dd6:	0793      	lsls	r3, r2, #30
 8005dd8:	bf18      	it	ne
 8005dda:	2300      	movne	r3, #0
 8005ddc:	680e      	ldr	r6, [r1, #0]
 8005dde:	bf08      	it	eq
 8005de0:	694b      	ldreq	r3, [r1, #20]
 8005de2:	eba6 0807 	sub.w	r8, r6, r7
 8005de6:	600f      	str	r7, [r1, #0]
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	f1b8 0f00 	cmp.w	r8, #0
 8005dee:	dd9c      	ble.n	8005d2a <__sflush_r+0x1a>
 8005df0:	4643      	mov	r3, r8
 8005df2:	463a      	mov	r2, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	6a21      	ldr	r1, [r4, #32]
 8005df8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dfa:	47b0      	blx	r6
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	dc06      	bgt.n	8005e0e <__sflush_r+0xfe>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	e78e      	b.n	8005d2c <__sflush_r+0x1c>
 8005e0e:	4407      	add	r7, r0
 8005e10:	eba8 0800 	sub.w	r8, r8, r0
 8005e14:	e7e9      	b.n	8005dea <__sflush_r+0xda>
 8005e16:	bf00      	nop
 8005e18:	20400001 	.word	0x20400001

08005e1c <_fflush_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	690b      	ldr	r3, [r1, #16]
 8005e20:	4605      	mov	r5, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b913      	cbnz	r3, 8005e2c <_fflush_r+0x10>
 8005e26:	2500      	movs	r5, #0
 8005e28:	4628      	mov	r0, r5
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	b118      	cbz	r0, 8005e36 <_fflush_r+0x1a>
 8005e2e:	6983      	ldr	r3, [r0, #24]
 8005e30:	b90b      	cbnz	r3, 8005e36 <_fflush_r+0x1a>
 8005e32:	f000 f887 	bl	8005f44 <__sinit>
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <_fflush_r+0x6c>)
 8005e38:	429c      	cmp	r4, r3
 8005e3a:	d11b      	bne.n	8005e74 <_fflush_r+0x58>
 8005e3c:	686c      	ldr	r4, [r5, #4]
 8005e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0ef      	beq.n	8005e26 <_fflush_r+0xa>
 8005e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e48:	07d0      	lsls	r0, r2, #31
 8005e4a:	d404      	bmi.n	8005e56 <_fflush_r+0x3a>
 8005e4c:	0599      	lsls	r1, r3, #22
 8005e4e:	d402      	bmi.n	8005e56 <_fflush_r+0x3a>
 8005e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e52:	f7ff fd1c 	bl	800588e <__retarget_lock_acquire_recursive>
 8005e56:	4628      	mov	r0, r5
 8005e58:	4621      	mov	r1, r4
 8005e5a:	f7ff ff59 	bl	8005d10 <__sflush_r>
 8005e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e60:	4605      	mov	r5, r0
 8005e62:	07da      	lsls	r2, r3, #31
 8005e64:	d4e0      	bmi.n	8005e28 <_fflush_r+0xc>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	059b      	lsls	r3, r3, #22
 8005e6a:	d4dd      	bmi.n	8005e28 <_fflush_r+0xc>
 8005e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6e:	f7ff fd0f 	bl	8005890 <__retarget_lock_release_recursive>
 8005e72:	e7d9      	b.n	8005e28 <_fflush_r+0xc>
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <_fflush_r+0x70>)
 8005e76:	429c      	cmp	r4, r3
 8005e78:	d101      	bne.n	8005e7e <_fflush_r+0x62>
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	e7df      	b.n	8005e3e <_fflush_r+0x22>
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <_fflush_r+0x74>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	bf08      	it	eq
 8005e84:	68ec      	ldreq	r4, [r5, #12]
 8005e86:	e7da      	b.n	8005e3e <_fflush_r+0x22>
 8005e88:	0800690c 	.word	0x0800690c
 8005e8c:	0800692c 	.word	0x0800692c
 8005e90:	080068ec 	.word	0x080068ec

08005e94 <std>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea2:	6083      	str	r3, [r0, #8]
 8005ea4:	8181      	strh	r1, [r0, #12]
 8005ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea8:	81c2      	strh	r2, [r0, #14]
 8005eaa:	6183      	str	r3, [r0, #24]
 8005eac:	4619      	mov	r1, r3
 8005eae:	2208      	movs	r2, #8
 8005eb0:	305c      	adds	r0, #92	; 0x5c
 8005eb2:	f7fd fd65 	bl	8003980 <memset>
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <std+0x38>)
 8005eb8:	6224      	str	r4, [r4, #32]
 8005eba:	6263      	str	r3, [r4, #36]	; 0x24
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <std+0x3c>)
 8005ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <std+0x40>)
 8005ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <std+0x44>)
 8005ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	bf00      	nop
 8005ecc:	080061d1 	.word	0x080061d1
 8005ed0:	080061f3 	.word	0x080061f3
 8005ed4:	0800622b 	.word	0x0800622b
 8005ed8:	0800624f 	.word	0x0800624f

08005edc <_cleanup_r>:
 8005edc:	4901      	ldr	r1, [pc, #4]	; (8005ee4 <_cleanup_r+0x8>)
 8005ede:	f000 b8af 	b.w	8006040 <_fwalk_reent>
 8005ee2:	bf00      	nop
 8005ee4:	08005e1d 	.word	0x08005e1d

08005ee8 <__sfmoreglue>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	2568      	movs	r5, #104	; 0x68
 8005eec:	1e4a      	subs	r2, r1, #1
 8005eee:	4355      	muls	r5, r2
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ef6:	f7fd fd97 	bl	8003a28 <_malloc_r>
 8005efa:	4604      	mov	r4, r0
 8005efc:	b140      	cbz	r0, 8005f10 <__sfmoreglue+0x28>
 8005efe:	2100      	movs	r1, #0
 8005f00:	e9c0 1600 	strd	r1, r6, [r0]
 8005f04:	300c      	adds	r0, #12
 8005f06:	60a0      	str	r0, [r4, #8]
 8005f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f0c:	f7fd fd38 	bl	8003980 <memset>
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd70      	pop	{r4, r5, r6, pc}

08005f14 <__sfp_lock_acquire>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__sfp_lock_acquire+0x8>)
 8005f16:	f7ff bcba 	b.w	800588e <__retarget_lock_acquire_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	20000268 	.word	0x20000268

08005f20 <__sfp_lock_release>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__sfp_lock_release+0x8>)
 8005f22:	f7ff bcb5 	b.w	8005890 <__retarget_lock_release_recursive>
 8005f26:	bf00      	nop
 8005f28:	20000268 	.word	0x20000268

08005f2c <__sinit_lock_acquire>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sinit_lock_acquire+0x8>)
 8005f2e:	f7ff bcae 	b.w	800588e <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20000263 	.word	0x20000263

08005f38 <__sinit_lock_release>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sinit_lock_release+0x8>)
 8005f3a:	f7ff bca9 	b.w	8005890 <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000263 	.word	0x20000263

08005f44 <__sinit>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	f7ff fff0 	bl	8005f2c <__sinit_lock_acquire>
 8005f4c:	69a3      	ldr	r3, [r4, #24]
 8005f4e:	b11b      	cbz	r3, 8005f58 <__sinit+0x14>
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f54:	f7ff bff0 	b.w	8005f38 <__sinit_lock_release>
 8005f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <__sinit+0x68>)
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <__sinit+0x6c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	bf08      	it	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bf08      	it	eq
 8005f70:	61a3      	streq	r3, [r4, #24]
 8005f72:	f000 f81f 	bl	8005fb4 <__sfp>
 8005f76:	6060      	str	r0, [r4, #4]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 f81b 	bl	8005fb4 <__sfp>
 8005f7e:	60a0      	str	r0, [r4, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 f817 	bl	8005fb4 <__sfp>
 8005f86:	2200      	movs	r2, #0
 8005f88:	2104      	movs	r1, #4
 8005f8a:	60e0      	str	r0, [r4, #12]
 8005f8c:	6860      	ldr	r0, [r4, #4]
 8005f8e:	f7ff ff81 	bl	8005e94 <std>
 8005f92:	2201      	movs	r2, #1
 8005f94:	2109      	movs	r1, #9
 8005f96:	68a0      	ldr	r0, [r4, #8]
 8005f98:	f7ff ff7c 	bl	8005e94 <std>
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	2112      	movs	r1, #18
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	f7ff ff77 	bl	8005e94 <std>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61a3      	str	r3, [r4, #24]
 8005faa:	e7d1      	b.n	8005f50 <__sinit+0xc>
 8005fac:	08006568 	.word	0x08006568
 8005fb0:	08005edd 	.word	0x08005edd

08005fb4 <__sfp>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	f7ff ffac 	bl	8005f14 <__sfp_lock_acquire>
 8005fbc:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <__sfp+0x84>)
 8005fbe:	681e      	ldr	r6, [r3, #0]
 8005fc0:	69b3      	ldr	r3, [r6, #24]
 8005fc2:	b913      	cbnz	r3, 8005fca <__sfp+0x16>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff ffbd 	bl	8005f44 <__sinit>
 8005fca:	3648      	adds	r6, #72	; 0x48
 8005fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	d503      	bpl.n	8005fdc <__sfp+0x28>
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	b30b      	cbz	r3, 800601c <__sfp+0x68>
 8005fd8:	6836      	ldr	r6, [r6, #0]
 8005fda:	e7f7      	b.n	8005fcc <__sfp+0x18>
 8005fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fe0:	b9d5      	cbnz	r5, 8006018 <__sfp+0x64>
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <__sfp+0x88>)
 8005fe4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fe8:	60e3      	str	r3, [r4, #12]
 8005fea:	6665      	str	r5, [r4, #100]	; 0x64
 8005fec:	f7ff fc4e 	bl	800588c <__retarget_lock_init_recursive>
 8005ff0:	f7ff ff96 	bl	8005f20 <__sfp_lock_release>
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006000:	6025      	str	r5, [r4, #0]
 8006002:	61a5      	str	r5, [r4, #24]
 8006004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006008:	f7fd fcba 	bl	8003980 <memset>
 800600c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006014:	4620      	mov	r0, r4
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006018:	3468      	adds	r4, #104	; 0x68
 800601a:	e7d9      	b.n	8005fd0 <__sfp+0x1c>
 800601c:	2104      	movs	r1, #4
 800601e:	4638      	mov	r0, r7
 8006020:	f7ff ff62 	bl	8005ee8 <__sfmoreglue>
 8006024:	4604      	mov	r4, r0
 8006026:	6030      	str	r0, [r6, #0]
 8006028:	2800      	cmp	r0, #0
 800602a:	d1d5      	bne.n	8005fd8 <__sfp+0x24>
 800602c:	f7ff ff78 	bl	8005f20 <__sfp_lock_release>
 8006030:	230c      	movs	r3, #12
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	e7ee      	b.n	8006014 <__sfp+0x60>
 8006036:	bf00      	nop
 8006038:	08006568 	.word	0x08006568
 800603c:	ffff0001 	.word	0xffff0001

08006040 <_fwalk_reent>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	4606      	mov	r6, r0
 8006046:	4688      	mov	r8, r1
 8006048:	2700      	movs	r7, #0
 800604a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800604e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006052:	f1b9 0901 	subs.w	r9, r9, #1
 8006056:	d505      	bpl.n	8006064 <_fwalk_reent+0x24>
 8006058:	6824      	ldr	r4, [r4, #0]
 800605a:	2c00      	cmp	r4, #0
 800605c:	d1f7      	bne.n	800604e <_fwalk_reent+0xe>
 800605e:	4638      	mov	r0, r7
 8006060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006064:	89ab      	ldrh	r3, [r5, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d907      	bls.n	800607a <_fwalk_reent+0x3a>
 800606a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800606e:	3301      	adds	r3, #1
 8006070:	d003      	beq.n	800607a <_fwalk_reent+0x3a>
 8006072:	4629      	mov	r1, r5
 8006074:	4630      	mov	r0, r6
 8006076:	47c0      	blx	r8
 8006078:	4307      	orrs	r7, r0
 800607a:	3568      	adds	r5, #104	; 0x68
 800607c:	e7e9      	b.n	8006052 <_fwalk_reent+0x12>

0800607e <__swhatbuf_r>:
 800607e:	b570      	push	{r4, r5, r6, lr}
 8006080:	460e      	mov	r6, r1
 8006082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006086:	4614      	mov	r4, r2
 8006088:	2900      	cmp	r1, #0
 800608a:	461d      	mov	r5, r3
 800608c:	b096      	sub	sp, #88	; 0x58
 800608e:	da07      	bge.n	80060a0 <__swhatbuf_r+0x22>
 8006090:	2300      	movs	r3, #0
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	89b3      	ldrh	r3, [r6, #12]
 8006096:	061a      	lsls	r2, r3, #24
 8006098:	d410      	bmi.n	80060bc <__swhatbuf_r+0x3e>
 800609a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609e:	e00e      	b.n	80060be <__swhatbuf_r+0x40>
 80060a0:	466a      	mov	r2, sp
 80060a2:	f000 f8fb 	bl	800629c <_fstat_r>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	dbf2      	blt.n	8006090 <__swhatbuf_r+0x12>
 80060aa:	9a01      	ldr	r2, [sp, #4]
 80060ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060b4:	425a      	negs	r2, r3
 80060b6:	415a      	adcs	r2, r3
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	e7ee      	b.n	800609a <__swhatbuf_r+0x1c>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	2000      	movs	r0, #0
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	b016      	add	sp, #88	; 0x58
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080060c8 <__smakebuf_r>:
 80060c8:	898b      	ldrh	r3, [r1, #12]
 80060ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060cc:	079d      	lsls	r5, r3, #30
 80060ce:	4606      	mov	r6, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	d507      	bpl.n	80060e4 <__smakebuf_r+0x1c>
 80060d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	2301      	movs	r3, #1
 80060de:	6163      	str	r3, [r4, #20]
 80060e0:	b002      	add	sp, #8
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	466a      	mov	r2, sp
 80060e6:	ab01      	add	r3, sp, #4
 80060e8:	f7ff ffc9 	bl	800607e <__swhatbuf_r>
 80060ec:	9900      	ldr	r1, [sp, #0]
 80060ee:	4605      	mov	r5, r0
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fd fc99 	bl	8003a28 <_malloc_r>
 80060f6:	b948      	cbnz	r0, 800610c <__smakebuf_r+0x44>
 80060f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060fc:	059a      	lsls	r2, r3, #22
 80060fe:	d4ef      	bmi.n	80060e0 <__smakebuf_r+0x18>
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	e7e3      	b.n	80060d4 <__smakebuf_r+0xc>
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <__smakebuf_r+0x7c>)
 800610e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	6020      	str	r0, [r4, #0]
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	6120      	str	r0, [r4, #16]
 800611e:	6163      	str	r3, [r4, #20]
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	b15b      	cbz	r3, 800613c <__smakebuf_r+0x74>
 8006124:	4630      	mov	r0, r6
 8006126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800612a:	f000 f8c9 	bl	80062c0 <_isatty_r>
 800612e:	b128      	cbz	r0, 800613c <__smakebuf_r+0x74>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	89a0      	ldrh	r0, [r4, #12]
 800613e:	4305      	orrs	r5, r0
 8006140:	81a5      	strh	r5, [r4, #12]
 8006142:	e7cd      	b.n	80060e0 <__smakebuf_r+0x18>
 8006144:	08005edd 	.word	0x08005edd

08006148 <_raise_r>:
 8006148:	291f      	cmp	r1, #31
 800614a:	b538      	push	{r3, r4, r5, lr}
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	d904      	bls.n	800615c <_raise_r+0x14>
 8006152:	2316      	movs	r3, #22
 8006154:	6003      	str	r3, [r0, #0]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800615e:	b112      	cbz	r2, 8006166 <_raise_r+0x1e>
 8006160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006164:	b94b      	cbnz	r3, 800617a <_raise_r+0x32>
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f830 	bl	80061cc <_getpid_r>
 800616c:	462a      	mov	r2, r5
 800616e:	4601      	mov	r1, r0
 8006170:	4620      	mov	r0, r4
 8006172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006176:	f000 b817 	b.w	80061a8 <_kill_r>
 800617a:	2b01      	cmp	r3, #1
 800617c:	d00a      	beq.n	8006194 <_raise_r+0x4c>
 800617e:	1c59      	adds	r1, r3, #1
 8006180:	d103      	bne.n	800618a <_raise_r+0x42>
 8006182:	2316      	movs	r3, #22
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	2001      	movs	r0, #1
 8006188:	e7e7      	b.n	800615a <_raise_r+0x12>
 800618a:	2400      	movs	r4, #0
 800618c:	4628      	mov	r0, r5
 800618e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006192:	4798      	blx	r3
 8006194:	2000      	movs	r0, #0
 8006196:	e7e0      	b.n	800615a <_raise_r+0x12>

08006198 <raise>:
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <raise+0xc>)
 800619a:	4601      	mov	r1, r0
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f7ff bfd3 	b.w	8006148 <_raise_r>
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c

080061a8 <_kill_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	2300      	movs	r3, #0
 80061ac:	4d06      	ldr	r5, [pc, #24]	; (80061c8 <_kill_r+0x20>)
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	f7fb fa23 	bl	8001600 <_kill>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d102      	bne.n	80061c4 <_kill_r+0x1c>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	b103      	cbz	r3, 80061c4 <_kill_r+0x1c>
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	2000025c 	.word	0x2000025c

080061cc <_getpid_r>:
 80061cc:	f7fb ba11 	b.w	80015f2 <_getpid>

080061d0 <__sread>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	460c      	mov	r4, r1
 80061d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d8:	f000 f894 	bl	8006304 <_read_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	bfab      	itete	ge
 80061e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061e2:	89a3      	ldrhlt	r3, [r4, #12]
 80061e4:	181b      	addge	r3, r3, r0
 80061e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ea:	bfac      	ite	ge
 80061ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ee:	81a3      	strhlt	r3, [r4, #12]
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <__swrite>:
 80061f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f6:	461f      	mov	r7, r3
 80061f8:	898b      	ldrh	r3, [r1, #12]
 80061fa:	4605      	mov	r5, r0
 80061fc:	05db      	lsls	r3, r3, #23
 80061fe:	460c      	mov	r4, r1
 8006200:	4616      	mov	r6, r2
 8006202:	d505      	bpl.n	8006210 <__swrite+0x1e>
 8006204:	2302      	movs	r3, #2
 8006206:	2200      	movs	r2, #0
 8006208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620c:	f000 f868 	bl	80062e0 <_lseek_r>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	4632      	mov	r2, r6
 8006214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	4628      	mov	r0, r5
 800621c:	463b      	mov	r3, r7
 800621e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006226:	f000 b817 	b.w	8006258 <_write_r>

0800622a <__sseek>:
 800622a:	b510      	push	{r4, lr}
 800622c:	460c      	mov	r4, r1
 800622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006232:	f000 f855 	bl	80062e0 <_lseek_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	bf15      	itete	ne
 800623c:	6560      	strne	r0, [r4, #84]	; 0x54
 800623e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006246:	81a3      	strheq	r3, [r4, #12]
 8006248:	bf18      	it	ne
 800624a:	81a3      	strhne	r3, [r4, #12]
 800624c:	bd10      	pop	{r4, pc}

0800624e <__sclose>:
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	f000 b813 	b.w	800627c <_close_r>
	...

08006258 <_write_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	2200      	movs	r2, #0
 8006262:	4d05      	ldr	r5, [pc, #20]	; (8006278 <_write_r+0x20>)
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fb fa01 	bl	800166e <_write>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_write_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_write_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	2000025c 	.word	0x2000025c

0800627c <_close_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	2300      	movs	r3, #0
 8006280:	4d05      	ldr	r5, [pc, #20]	; (8006298 <_close_r+0x1c>)
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	f7fb fa0d 	bl	80016a6 <_close>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_close_r+0x1a>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_close_r+0x1a>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	2000025c 	.word	0x2000025c

0800629c <_fstat_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	2300      	movs	r3, #0
 80062a0:	4d06      	ldr	r5, [pc, #24]	; (80062bc <_fstat_r+0x20>)
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f7fb fa07 	bl	80016bc <_fstat>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d102      	bne.n	80062b8 <_fstat_r+0x1c>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	b103      	cbz	r3, 80062b8 <_fstat_r+0x1c>
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	2000025c 	.word	0x2000025c

080062c0 <_isatty_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	2300      	movs	r3, #0
 80062c4:	4d05      	ldr	r5, [pc, #20]	; (80062dc <_isatty_r+0x1c>)
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fb fa05 	bl	80016da <_isatty>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_isatty_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_isatty_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	2000025c 	.word	0x2000025c

080062e0 <_lseek_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	2200      	movs	r2, #0
 80062ea:	4d05      	ldr	r5, [pc, #20]	; (8006300 <_lseek_r+0x20>)
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fb f9fd 	bl	80016ee <_lseek>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_lseek_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_lseek_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	2000025c 	.word	0x2000025c

08006304 <_read_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	2200      	movs	r2, #0
 800630e:	4d05      	ldr	r5, [pc, #20]	; (8006324 <_read_r+0x20>)
 8006310:	602a      	str	r2, [r5, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f7fb f98e 	bl	8001634 <_read>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_read_r+0x1e>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_read_r+0x1e>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	2000025c 	.word	0x2000025c

08006328 <_init>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	bf00      	nop
 800632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632e:	bc08      	pop	{r3}
 8006330:	469e      	mov	lr, r3
 8006332:	4770      	bx	lr

08006334 <_fini>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr
