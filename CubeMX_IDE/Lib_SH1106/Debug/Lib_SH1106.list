
Lib_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007170  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08007280  08007280  00017280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800789c  0800789c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800789c  0800789c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800789c  0800789c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001dc  08007a80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08007a80  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd90  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  0002cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001904f  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dac4  00000000  00000000  0004977f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088db2  00000000  00000000  00057243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  000e0048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007268 	.word	0x08007268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007268 	.word	0x08007268

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <MX_ADC1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fc2:	f001 fb2b 	bl	800261c <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 fbeb 	bl	80017a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fe2:	f001 fdd3 	bl	8002b8c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fec:	f000 fbdb 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000204 	.word	0x20000204
 8000ffc:	40012400 	.word	0x40012400

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_ADC_MspInit+0x6c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d121      	bne.n	8001064 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	2303      	movs	r3, #3
 8001056:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0x74>)
 8001060:	f002 f898 	bl	8003194 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40012400 	.word	0x40012400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_GPIO_Init+0x70>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_GPIO_Init+0x70>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C2_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C2_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C2_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C2_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C2_Init+0x50>)
 800112a:	f002 f9b7 	bl	800349c <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fb37 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000234 	.word	0x20000234
 8001140:	40005800 	.word	0x40005800
 8001144:	00061a80 	.word	0x00061a80

08001148 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_I2C_MspInit+0x74>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d124      	bne.n	80011b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001180:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <HAL_I2C_MspInit+0x7c>)
 8001196:	f001 fffd 	bl	8003194 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40005800 	.word	0x40005800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <Jogador_new>:
void desenhaJogador(TOLED* _oled, TJogador* _jogador);

uint16_t getValorPot1();


TJogador* Jogador_new(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  TJogador* auxJogador;

  auxJogador = malloc(sizeof(TJogador));
 80011ce:	2005      	movs	r0, #5
 80011d0:	f003 fb6c 	bl	80048ac <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	607b      	str	r3, [r7, #4]

  return auxJogador;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <Bola_new>:

TBola* Bola_new(){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
  TBola* auxBola;

  auxBola = malloc(sizeof(TBola));
 80011e8:	200c      	movs	r0, #12
 80011ea:	f003 fb5f 	bl	80048ac <malloc>
 80011ee:	4603      	mov	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]

  return auxBola;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f001 f985 	bl	8002510 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f995 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f7ff ff35 	bl	8001078 <MX_GPIO_Init>
  MX_I2C2_Init();
 800120e:	f7ff ff6d 	bl	80010ec <MX_I2C2_Init>
  MX_ADC1_Init();
 8001212:	f7ff feb7 	bl	8000f84 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TOLED* oled;
  TOLED* oledBuffer;

  oled = J3_SH1106_new(&hi2c2,0x78);
 8001216:	2178      	movs	r1, #120	; 0x78
 8001218:	48a8      	ldr	r0, [pc, #672]	; (80014bc <main+0x2c0>)
 800121a:	f000 fc5d 	bl	8001ad8 <J3_SH1106_new>
 800121e:	6178      	str	r0, [r7, #20]
  oledBuffer = J3_SH1106_new(NULL,0x00);
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fc58 	bl	8001ad8 <J3_SH1106_new>
 8001228:	6138      	str	r0, [r7, #16]

  HAL_Delay(1000); // Espera estabilizar o display
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f001 f9d1 	bl	80025d4 <HAL_Delay>

  J3_SH1106_offDisplay(oled);
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f000 fc82 	bl	8001b3c <J3_SH1106_offDisplay>
  J3_SH1106_setNormal(oled);
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f000 fcdd 	bl	8001bf8 <J3_SH1106_setNormal>
  J3_SH1106_setContrast(oled,255);
 800123e:	21ff      	movs	r1, #255	; 0xff
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f000 fc87 	bl	8001b54 <J3_SH1106_setContrast>
  //J3_SH1106_onDisplay(oled);
  J3_SH1106_setDisplayClock(oled);
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f000 fce2 	bl	8001c10 <J3_SH1106_setDisplayClock>
  J3_SH1106_clrDisplay(oled);
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f000 fc94 	bl	8001b7a <J3_SH1106_clrDisplay>

  TJogador *J1, *J2;
  TBola* bola;

  bola = Bola_new();
 8001252:	f7ff ffc6 	bl	80011e2 <Bola_new>
 8001256:	60f8      	str	r0, [r7, #12]
  bola->posX = 63;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	223f      	movs	r2, #63	; 0x3f
 800125c:	721a      	strb	r2, [r3, #8]
  bola->posY = 3;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2203      	movs	r2, #3
 8001262:	725a      	strb	r2, [r3, #9]
  bola->velX = 2;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126a:	601a      	str	r2, [r3, #0]
  bola->velY = 3;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a94      	ldr	r2, [pc, #592]	; (80014c0 <main+0x2c4>)
 8001270:	605a      	str	r2, [r3, #4]

  J1 = Jogador_new();
 8001272:	f7ff ffa9 	bl	80011c8 <Jogador_new>
 8001276:	60b8      	str	r0, [r7, #8]
  J1->tamX = 5;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2205      	movs	r2, #5
 800127c:	701a      	strb	r2, [r3, #0]
  J1->tamY = 15;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	220f      	movs	r2, #15
 8001282:	705a      	strb	r2, [r3, #1]
  J1->posX = 5;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2205      	movs	r2, #5
 8001288:	709a      	strb	r2, [r3, #2]
  J1->posY = 30;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	221e      	movs	r2, #30
 800128e:	70da      	strb	r2, [r3, #3]
  J1->pontos = 0;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2200      	movs	r2, #0
 8001294:	711a      	strb	r2, [r3, #4]

  J2 = Jogador_new();
 8001296:	f7ff ff97 	bl	80011c8 <Jogador_new>
 800129a:	6078      	str	r0, [r7, #4]
  J2->tamX = 5;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2205      	movs	r2, #5
 80012a0:	701a      	strb	r2, [r3, #0]
  J2->tamY = 15;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	220f      	movs	r2, #15
 80012a6:	705a      	strb	r2, [r3, #1]
  J2->posX = 122;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	227a      	movs	r2, #122	; 0x7a
 80012ac:	709a      	strb	r2, [r3, #2]
  J2->posY = 30;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	221e      	movs	r2, #30
 80012b2:	70da      	strb	r2, [r3, #3]
  J2->pontos = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	711a      	strb	r2, [r3, #4]


  int16_t adP1;

  J3_SH1106_draw(oled, (uint8_t *)pong, 0,0,128,32);
 80012ba:	2320      	movs	r3, #32
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	497f      	ldr	r1, [pc, #508]	; (80014c4 <main+0x2c8>)
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f001 f852 	bl	8002372 <J3_SH1106_draw>
  HAL_Delay(7000);
 80012ce:	f641 3058 	movw	r0, #7000	; 0x1b58
 80012d2:	f001 f97f 	bl	80025d4 <HAL_Delay>
  J3_SH1106_clrDisplayByBuffer(oled);
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f000 fdfa 	bl	8001ed0 <J3_SH1106_clrDisplayByBuffer>


  HAL_ADCEx_Calibration_Start(&hadc1);
 80012dc:	487a      	ldr	r0, [pc, #488]	; (80014c8 <main+0x2cc>)
 80012de:	f001 fdd9 	bl	8002e94 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//J3_SH1106_clrDisplay(oled);
	J3_SH1106_clrBuffer(oledBuffer);
 80012e2:	6938      	ldr	r0, [r7, #16]
 80012e4:	f000 fc78 	bl	8001bd8 <J3_SH1106_clrBuffer>


	J3_SH1106_setBox(oledBuffer, 0,0,127,63,0);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	233f      	movs	r3, #63	; 0x3f
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	237f      	movs	r3, #127	; 0x7f
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	6938      	ldr	r0, [r7, #16]
 80012f8:	f001 f896 	bl	8002428 <J3_SH1106_setBox>
	J3_SH1106_lineDash(oledBuffer, 63,0,63,127);
 80012fc:	237f      	movs	r3, #127	; 0x7f
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	233f      	movs	r3, #63	; 0x3f
 8001302:	2200      	movs	r2, #0
 8001304:	213f      	movs	r1, #63	; 0x3f
 8001306:	6938      	ldr	r0, [r7, #16]
 8001308:	f000 ff07 	bl	800211a <J3_SH1106_lineDash>
	J3_SH1106_lineDash(oledBuffer, 64,0,64,127);
 800130c:	237f      	movs	r3, #127	; 0x7f
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	2200      	movs	r2, #0
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 feff 	bl	800211a <J3_SH1106_lineDash>


	desenhaBola(oledBuffer, bola);
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	6938      	ldr	r0, [r7, #16]
 8001320:	f000 f963 	bl	80015ea <desenhaBola>
	desenhaJogador(oledBuffer, J1);
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6938      	ldr	r0, [r7, #16]
 8001328:	f000 f9c8 	bl	80016bc <desenhaJogador>
	desenhaJogador(oledBuffer, J2);
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	6938      	ldr	r0, [r7, #16]
 8001330:	f000 f9c4 	bl	80016bc <desenhaJogador>

	J3_SH1106_fillBuffer2(oled, oledBuffer);
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f000 fc7a 	bl	8001c30 <J3_SH1106_fillBuffer2>
	HAL_Delay(20);
 800133c:	2014      	movs	r0, #20
 800133e:	f001 f949 	bl	80025d4 <HAL_Delay>

	//bola->posX = bola->posX + bola->velX;
	bola->posX += bola->velX;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	7a1b      	ldrb	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc58 	bl	8000bfc <__aeabi_i2f>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f7ff fb9d 	bl	8000a94 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fdf1 	bl	8000f44 <__aeabi_f2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	721a      	strb	r2, [r3, #8]
	bola->posY += bola->velY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7a5b      	ldrb	r3, [r3, #9]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc44 	bl	8000bfc <__aeabi_i2f>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fb89 	bl	8000a94 <__addsf3>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fddd 	bl	8000f44 <__aeabi_f2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	b2da      	uxtb	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	725a      	strb	r2, [r3, #9]

	if(bola->posX >= 120){
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	2b77      	cmp	r3, #119	; 0x77
 8001398:	d92c      	bls.n	80013f4 <main+0x1f8>
	  if(bola->posY >= (J2->posY-5) && bola->posY <= (J2->posY+5)){
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	7a5b      	ldrb	r3, [r3, #9]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	3b05      	subs	r3, #5
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db13      	blt.n	80013d2 <main+0x1d6>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	7a5b      	ldrb	r3, [r3, #9]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	3305      	adds	r3, #5
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dc0b      	bgt.n	80013d2 <main+0x1d6>
	    bola->velX = bola->velX * (-1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
	    bola->velY = bola->velY * (-1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
	  }
      if(bola->posX >= 123){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	7a1b      	ldrb	r3, [r3, #8]
 80013d6:	2b7a      	cmp	r3, #122	; 0x7a
 80013d8:	d90c      	bls.n	80013f4 <main+0x1f8>
    	  bola->posX = 64;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	721a      	strb	r2, [r3, #8]
		  bola->velX = bola->velX * (-1);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
		  bola->velX = 1;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f2:	601a      	str	r2, [r3, #0]
	  }
	}

	if(bola->posX <= 7){
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d82c      	bhi.n	8001456 <main+0x25a>
	  if(bola->posY >= (J1->posY-5) && bola->posY <= (J1->posY+5)){
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	7a5b      	ldrb	r3, [r3, #9]
 8001400:	461a      	mov	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	3b05      	subs	r3, #5
 8001408:	429a      	cmp	r2, r3
 800140a:	db13      	blt.n	8001434 <main+0x238>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	3305      	adds	r3, #5
 8001418:	429a      	cmp	r2, r3
 800141a:	dc0b      	bgt.n	8001434 <main+0x238>
	    bola->velX = bola->velX * (-1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
	    bola->velY = bola->velY * (-1);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
	  }
      if (bola->posX <= 4){
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	7a1b      	ldrb	r3, [r3, #8]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d80c      	bhi.n	8001456 <main+0x25a>
    	  bola->posX = 63;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	223f      	movs	r2, #63	; 0x3f
 8001440:	721a      	strb	r2, [r3, #8]
		   bola->velX = bola->velX * (-1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]
		   bola->velX = 1;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001454:	601a      	str	r2, [r3, #0]
	  }
	}

	if(bola->posY >= 61){
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	7a5b      	ldrb	r3, [r3, #9]
 800145a:	2b3c      	cmp	r3, #60	; 0x3c
 800145c:	d908      	bls.n	8001470 <main+0x274>
	  bola->posY = 61;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	223d      	movs	r2, #61	; 0x3d
 8001462:	725a      	strb	r2, [r3, #9]
	  bola->velY = bola->velY * (-1);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
	}
	if(bola->posY <= 2){
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	7a5b      	ldrb	r3, [r3, #9]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d808      	bhi.n	800148a <main+0x28e>
	  bola->posY = 2;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2202      	movs	r2, #2
 800147c:	725a      	strb	r2, [r3, #9]
	  bola->velY = bola->velY * (-1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
		  if(J2->posY > 58 )
		    J2->posY = 58;
		}
	 }
*/
	 if(bola->posX <= 55){
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	7a1b      	ldrb	r3, [r3, #8]
 800148e:	2b37      	cmp	r3, #55	; 0x37
 8001490:	d82f      	bhi.n	80014f2 <main+0x2f6>
		if(J1->posY > bola->posY){
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	78da      	ldrb	r2, [r3, #3]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	7a5b      	ldrb	r3, [r3, #9]
 800149a:	429a      	cmp	r2, r3
 800149c:	d916      	bls.n	80014cc <main+0x2d0>
		  J1->posY = J1->posY - 2;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	3b02      	subs	r3, #2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	70da      	strb	r2, [r3, #3]
		  if(J1->posY <= 6)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d80c      	bhi.n	80014cc <main+0x2d0>
		    J1->posY = 6;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2206      	movs	r2, #6
 80014b6:	70da      	strb	r2, [r3, #3]
 80014b8:	e008      	b.n	80014cc <main+0x2d0>
 80014ba:	bf00      	nop
 80014bc:	20000234 	.word	0x20000234
 80014c0:	40400000 	.word	0x40400000
 80014c4:	080072a0 	.word	0x080072a0
 80014c8:	20000204 	.word	0x20000204
		}
		if(J1->posY < bola->posY){
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	78da      	ldrb	r2, [r3, #3]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7a5b      	ldrb	r3, [r3, #9]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d20c      	bcs.n	80014f2 <main+0x2f6>
    	  J1->posY = J1->posY + 2;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	3302      	adds	r3, #2
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	70da      	strb	r2, [r3, #3]
		  if(J1->posY > 58 )
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	78db      	ldrb	r3, [r3, #3]
 80014e8:	2b3a      	cmp	r3, #58	; 0x3a
 80014ea:	d902      	bls.n	80014f2 <main+0x2f6>
		    J1->posY = 58;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	223a      	movs	r2, #58	; 0x3a
 80014f0:	70da      	strb	r2, [r3, #3]


	 /* 12bits ADC = 4096 */
	 /* 54                */

	 HAL_ADC_Start(&hadc1);
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <main+0x330>)
 80014f4:	f001 f96a 	bl	80027cc <HAL_ADC_Start>

	 HAL_ADC_PollForConversion(&hadc1, 200);
 80014f8:	21c8      	movs	r1, #200	; 0xc8
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <main+0x330>)
 80014fc:	f001 fa40 	bl	8002980 <HAL_ADC_PollForConversion>
	 adP1 = HAL_ADC_GetValue(&hadc1);
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <main+0x330>)
 8001502:	f001 fb37 	bl	8002b74 <HAL_ADC_GetValue>
 8001506:	4603      	mov	r3, r0
 8001508:	807b      	strh	r3, [r7, #2]
	 HAL_ADC_Stop(&hadc1);
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <main+0x330>)
 800150c:	f001 fa0c 	bl	8002928 <HAL_ADC_Stop>

	 J2->posY = (adP1 / 81) ;
 8001510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <main+0x334>)
 8001516:	fb82 1203 	smull	r1, r2, r2, r3
 800151a:	10d2      	asrs	r2, r2, #3
 800151c:	17db      	asrs	r3, r3, #31
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b21b      	sxth	r3, r3
 8001522:	b2da      	uxtb	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	70da      	strb	r2, [r3, #3]
	J3_SH1106_clrBuffer(oledBuffer);
 8001528:	e6db      	b.n	80012e2 <main+0xe6>
 800152a:	bf00      	nop
 800152c:	20000204 	.word	0x20000204
 8001530:	1948b0fd 	.word	0x1948b0fd

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	; 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	2228      	movs	r2, #40	; 0x28
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f9ba 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001564:	2301      	movs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001572:	2301      	movs	r3, #1
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001576:	2302      	movs	r3, #2
 8001578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001580:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fbd0 	bl	8003d30 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001596:	f000 f906 	bl	80017a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2102      	movs	r1, #2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fe3a 	bl	8004230 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015c2:	f000 f8f0 	bl	80017a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015c6:	2302      	movs	r3, #2
 80015c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 ffc6 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015de:	f000 f8e2 	bl	80017a6 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3750      	adds	r7, #80	; 0x50
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <desenhaBola>:

/* USER CODE BEGIN 4 */
void desenhaBola(TOLED* _oled, TBola* _bola){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY-1);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7a1b      	ldrb	r3, [r3, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2d9      	uxtb	r1, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7a5b      	ldrb	r3, [r3, #9]
 8001600:	3b01      	subs	r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fba9 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	7a1b      	ldrb	r3, [r3, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	7a5b      	ldrb	r3, [r3, #9]
 8001618:	461a      	mov	r2, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fb9f 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY+1);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7a1b      	ldrb	r3, [r3, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	b2d9      	uxtb	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	7a5b      	ldrb	r3, [r3, #9]
 800162c:	3301      	adds	r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fb93 	bl	8001d5e <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY-1);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	7a19      	ldrb	r1, [r3, #8]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	7a5b      	ldrb	r3, [r3, #9]
 8001640:	3b01      	subs	r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fb89 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	7a19      	ldrb	r1, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	7a5b      	ldrb	r3, [r3, #9]
 8001654:	461a      	mov	r2, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fb81 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY+1);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7a19      	ldrb	r1, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7a5b      	ldrb	r3, [r3, #9]
 8001664:	3301      	adds	r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fb77 	bl	8001d5e <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY-1);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7a1b      	ldrb	r3, [r3, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	7a5b      	ldrb	r3, [r3, #9]
 800167c:	3b01      	subs	r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fb6b 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7a1b      	ldrb	r3, [r3, #8]
 800168c:	3301      	adds	r3, #1
 800168e:	b2d9      	uxtb	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7a5b      	ldrb	r3, [r3, #9]
 8001694:	461a      	mov	r2, r3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fb61 	bl	8001d5e <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY+1);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	7a1b      	ldrb	r3, [r3, #8]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2d9      	uxtb	r1, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	7a5b      	ldrb	r3, [r3, #9]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fb55 	bl	8001d5e <J3_SH1106_setPixel>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <desenhaJogador>:

void desenhaJogador(TOLED* _oled, TJogador* _jogador){
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b087      	sub	sp, #28
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  const int8_t play_altura = 5;
 80016c6:	2305      	movs	r3, #5
 80016c8:	73fb      	strb	r3, [r7, #15]
  const int8_t play_largura = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73bb      	strb	r3, [r7, #14]
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY-play_altura,_jogador->posX+play_largura,_jogador->posY-play_altura);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	789a      	ldrb	r2, [r3, #2]
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	78da      	ldrb	r2, [r3, #3]
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b2d8      	uxtb	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	789a      	ldrb	r2, [r3, #2]
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2dc      	uxtb	r4, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	78da      	ldrb	r2, [r3, #3]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	4602      	mov	r2, r0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fc26 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY-play_altura,_jogador->posX-play_largura,_jogador->posY+play_altura);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	789a      	ldrb	r2, [r3, #2]
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b2d9      	uxtb	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	78da      	ldrb	r2, [r3, #3]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	789a      	ldrb	r2, [r3, #2]
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2dc      	uxtb	r4, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	78da      	ldrb	r2, [r3, #3]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4413      	add	r3, r2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	4602      	mov	r2, r0
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fc0c 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY+play_altura,_jogador->posX+play_largura,_jogador->posY+play_altura);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	789a      	ldrb	r2, [r3, #2]
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2d9      	uxtb	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	78da      	ldrb	r2, [r3, #3]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	4413      	add	r3, r2
 8001748:	b2d8      	uxtb	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	789a      	ldrb	r2, [r3, #2]
 800174e:	7bbb      	ldrb	r3, [r7, #14]
 8001750:	4413      	add	r3, r2
 8001752:	b2dc      	uxtb	r4, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	78da      	ldrb	r2, [r3, #3]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4623      	mov	r3, r4
 8001762:	4602      	mov	r2, r0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fbf2 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX+play_largura,_jogador->posY+play_altura,_jogador->posX+play_largura,_jogador->posY-play_altura);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	789a      	ldrb	r2, [r3, #2]
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	4413      	add	r3, r2
 8001772:	b2d9      	uxtb	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	78da      	ldrb	r2, [r3, #3]
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	4413      	add	r3, r2
 800177c:	b2d8      	uxtb	r0, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	789a      	ldrb	r2, [r3, #2]
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	4413      	add	r3, r2
 8001786:	b2dc      	uxtb	r4, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	78da      	ldrb	r2, [r3, #3]
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4623      	mov	r3, r4
 8001796:	4602      	mov	r2, r0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fbd8 	bl	8001f4e <J3_SH1106_line>
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}

080017a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017aa:	b672      	cpsid	i
}
 80017ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ae:	e7fe      	b.n	80017ae <Error_Handler+0x8>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185a:	f000 fe9f 	bl	800259c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
	return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187a:	f002 ffed 	bl	8004858 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
	}

return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
	}
	return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193c:	605a      	str	r2, [r3, #4]
	return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f002 ff56 	bl	8004858 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20005000 	.word	0x20005000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	200001f8 	.word	0x200001f8
 80019e0:	200002a0 	.word	0x200002a0

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <j3_sh1106_sendCmd>:
};

typedef struct TOLED TOLED;

/* Enviar comando para o display */
void j3_sh1106_sendCmd(TOLED* _oled, uint8_t _cmd){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <j3_sh1106_sendCmd+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x00;
 8001a04:	2300      	movs	r3, #0
 8001a06:	733b      	strb	r3, [r7, #12]
    buf[1] = _cmd;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	b299      	uxth	r1, r3
 8001a16:	f107 020c 	add.w	r2, r7, #12
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	f001 fe7f 	bl	8003724 <HAL_I2C_Master_Transmit>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <j3_sh1106_sendDado>:

/* Enviar dados para o display */
void j3_sh1106_sendDado(TOLED* _oled, uint8_t _dado){
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <j3_sh1106_sendDado+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x40;
 8001a46:	2340      	movs	r3, #64	; 0x40
 8001a48:	733b      	strb	r3, [r7, #12]
    buf[1] = _dado;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	b299      	uxth	r1, r3
 8001a58:	f107 020c 	add.w	r2, r7, #12
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2302      	movs	r3, #2
 8001a64:	f001 fe5e 	bl	8003724 <HAL_I2C_Master_Transmit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <j3_sh1106_getIndexBuffer>:

/* Retorna i de X e Y */
uint16_t j3_sh1106_getIndexBuffer(uint8_t _x, uint8_t _y){
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71bb      	strb	r3, [r7, #6]
  return (_y * 128) + _x;
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <j3_sh1106_getXBuffer>:
/* Retorna X de i */
uint8_t j3_sh1106_getXBuffer(uint16_t _i){
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	80fb      	strh	r3, [r7, #6]
  return (_i % 128);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <j3_sh1106_getYBuffer>:
/* Retorna Y de i */
uint8_t j3_sh1106_getYBuffer(uint16_t _i){
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  return (_i / 128);
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	09db      	lsrs	r3, r3, #7
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <J3_SH1106_new>:
}
*/



TOLED* J3_SH1106_new(I2C_HandleTypeDef* _i2c, uint8_t _i2c_address){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  TOLED* auxOLED;

  auxOLED = malloc(sizeof(TOLED));
 8001ae4:	200c      	movs	r0, #12
 8001ae6:	f002 fee1 	bl	80048ac <malloc>
 8001aea:	4603      	mov	r3, r0
 8001aec:	60fb      	str	r3, [r7, #12]
  auxOLED->address = _i2c_address;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	711a      	strb	r2, [r3, #4]
  auxOLED->i2c = _i2c;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
  auxOLED->buffer = malloc(128 * 8 * sizeof(uint8_t));
 8001afa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001afe:	f002 fed5 	bl	80048ac <malloc>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	609a      	str	r2, [r3, #8]
  memset(auxOLED->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fed1 	bl	80048bc <memset>
  return auxOLED;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <J3_SH1106_onDisplay>:

void J3_SH1106_onDisplay(TOLED* _oled){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAF);                     // turn on OLED panel
 8001b2c:	21af      	movs	r1, #175	; 0xaf
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff5e 	bl	80019f0 <j3_sh1106_sendCmd>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <J3_SH1106_offDisplay>:

void J3_SH1106_offDisplay(TOLED* _oled){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAE) ;                     // turn off OLED panel
 8001b44:	21ae      	movs	r1, #174	; 0xae
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff52 	bl	80019f0 <j3_sh1106_sendCmd>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <J3_SH1106_setContrast>:

void J3_SH1106_setContrast(TOLED* _oled, uint8_t _valContraste){// set contrast control register
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  j3_sh1106_sendCmd(_oled,0x81);
 8001b60:	2181      	movs	r1, #129	; 0x81
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff44 	bl	80019f0 <j3_sh1106_sendCmd>
  j3_sh1106_sendCmd(_oled,_valContraste);
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff3f 	bl	80019f0 <j3_sh1106_sendCmd>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <J3_SH1106_clrDisplay>:

void J3_SH1106_clrDisplay(TOLED* _oled){
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  J3_SH1106_offDisplay(_oled);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffda 	bl	8001b3c <J3_SH1106_offDisplay>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e01a      	b.n	8001bc4 <J3_SH1106_clrDisplay+0x4a>
    J3_SH1106_cursorY(_oled, line);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8b8 	bl	8001d08 <J3_SH1106_cursorY>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73bb      	strb	r3, [r7, #14]
 8001b9c:	e00b      	b.n	8001bb6 <J3_SH1106_clrDisplay+0x3c>
	  J3_SH1106_cursorX(_oled, x);
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f88d 	bl	8001cc2 <J3_SH1106_cursorX>
	  j3_sh1106_sendDado(_oled,0x00);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff41 	bl	8001a32 <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	73bb      	strb	r3, [r7, #14]
 8001bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	daef      	bge.n	8001b9e <J3_SH1106_clrDisplay+0x24>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d9e1      	bls.n	8001b8e <J3_SH1106_clrDisplay+0x14>
	}
  }
  J3_SH1106_onDisplay(_oled);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffaa 	bl	8001b24 <J3_SH1106_onDisplay>
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <J3_SH1106_clrBuffer>:

void J3_SH1106_clrBuffer(TOLED* _oled){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  memset(_oled->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe66 	bl	80048bc <memset>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <J3_SH1106_setNormal>:

void J3_SH1106_setDisplayLine(TOLED* _oled) {
  j3_sh1106_sendCmd(_oled, 0x40) ;
}

void J3_SH1106_setNormal(TOLED* _oled){// set
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xA6);
 8001c00:	21a6      	movs	r1, #166	; 0xa6
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fef4 	bl	80019f0 <j3_sh1106_sendCmd>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <J3_SH1106_setDisplayClock>:

void J3_SH1106_setReverse(TOLED* _oled){// set
  j3_sh1106_sendCmd(_oled, 0xA7);
}

void J3_SH1106_setDisplayClock(TOLED* _oled){// set
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xD5);
 8001c18:	21d5      	movs	r1, #213	; 0xd5
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fee8 	bl	80019f0 <j3_sh1106_sendCmd>
  //j3_sh1106_sendCmd(_oled, 0xF0);
  j3_sh1106_sendCmd(_oled, 0x00);
 8001c20:	2100      	movs	r1, #0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fee4 	bl	80019f0 <j3_sh1106_sendCmd>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <J3_SH1106_fillBuffer2>:
	  }
    }
  }
}

void J3_SH1106_fillBuffer2(TOLED* _oled, TOLED* _oledBuffer){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint8_t y = 0, x = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	737b      	strb	r3, [r7, #13]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	733b      	strb	r3, [r7, #12]
  for(uint16_t i = 0; i < 1024; i++){
 8001c42:	2300      	movs	r3, #0
 8001c44:	81fb      	strh	r3, [r7, #14]
 8001c46:	e033      	b.n	8001cb0 <J3_SH1106_fillBuffer2+0x80>
    if(_oled->buffer[i] != _oledBuffer->buffer[i]){
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	440b      	add	r3, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d024      	beq.n	8001caa <J3_SH1106_fillBuffer2+0x7a>
      x = j3_sh1106_getXBuffer(i);
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff1b 	bl	8001a9e <j3_sh1106_getXBuffer>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	733b      	strb	r3, [r7, #12]
      y = j3_sh1106_getYBuffer(i);
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff24 	bl	8001abc <j3_sh1106_getYBuffer>
 8001c74:	4603      	mov	r3, r0
 8001c76:	737b      	strb	r3, [r7, #13]
      J3_SH1106_cursorXY(_oled, x, y);
 8001c78:	7b7a      	ldrb	r2, [r7, #13]
 8001c7a:	7b3b      	ldrb	r3, [r7, #12]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f857 	bl	8001d32 <J3_SH1106_cursorXY>
      _oled->buffer[i] = _oledBuffer->buffer[i];
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	441a      	add	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	440b      	add	r3, r1
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	701a      	strb	r2, [r3, #0]
      j3_sh1106_sendDado(_oled, _oled->buffer[i]);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fec4 	bl	8001a32 <j3_sh1106_sendDado>
  for(uint16_t i = 0; i < 1024; i++){
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	3301      	adds	r3, #1
 8001cae:	81fb      	strh	r3, [r7, #14]
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d3c7      	bcc.n	8001c48 <J3_SH1106_fillBuffer2+0x18>
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <J3_SH1106_cursorX>:




void J3_SH1106_cursorX(TOLED* _oled, uint8_t _address){ //Set column address for Page Addressing Mode
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  if(_address <= 127){
 8001cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db14      	blt.n	8001d00 <J3_SH1106_cursorX+0x3e>
	_address = _address + sXOffset ;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	70fb      	strb	r3, [r7, #3]
    j3_sh1106_sendCmd(_oled, 0x10 | (_address>>4)) ; //  shift high 4
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe80 	bl	80019f0 <j3_sh1106_sendCmd>
    j3_sh1106_sendCmd(_oled, 0x0F & _address) ;      // low 4
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fe78 	bl	80019f0 <j3_sh1106_sendCmd>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <J3_SH1106_cursorY>:

void J3_SH1106_cursorY(TOLED* _oled, uint8_t _page) { //Set page 0..7 Addressing Mode
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  if (_page <= 7){
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	2b07      	cmp	r3, #7
 8001d18:	d807      	bhi.n	8001d2a <J3_SH1106_cursorY+0x22>
    j3_sh1106_sendCmd(_oled, 0xB0 | _page);
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fe63 	bl	80019f0 <j3_sh1106_sendCmd>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <J3_SH1106_cursorXY>:


void J3_SH1106_cursorXY(TOLED* _oled, uint8_t x, uint8_t y){ // Position cursor to column, line
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	70fb      	strb	r3, [r7, #3]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	70bb      	strb	r3, [r7, #2]
  J3_SH1106_cursorY(_oled, y) ; // Y axis = line 0-7
 8001d42:	78bb      	ldrb	r3, [r7, #2]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffde 	bl	8001d08 <J3_SH1106_cursorY>
  J3_SH1106_cursorX(_oled, x) ; // X axis = column 0 - (sWidth - 1)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffb6 	bl	8001cc2 <J3_SH1106_cursorX>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <J3_SH1106_setPixel>:
    j3_sh1106_sendDado(_oled, dado);
  }
}
*/

void J3_SH1106_setPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db4a      	blt.n	8001e0c <J3_SH1106_setPixel+0xae>
 8001d76:	78bb      	ldrb	r3, [r7, #2]
 8001d78:	2b3f      	cmp	r3, #63	; 0x3f
 8001d7a:	d847      	bhi.n	8001e0c <J3_SH1106_setPixel+0xae>
    uint8_t page = _y / 8;
 8001d7c:	78bb      	ldrb	r3, [r7, #2]
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;

    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe73 	bl	8001a74 <j3_sh1106_getIndexBuffer>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	72fb      	strb	r3, [r7, #11]
    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] | (0x01 << resto)) ){ /* Verifica se o byte esta diferente no buffer */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	89bb      	ldrh	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	89bb      	ldrh	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	7afb      	ldrb	r3, [r7, #11]
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	4303      	orrs	r3, r0
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d025      	beq.n	8001e0c <J3_SH1106_setPixel+0xae>
      _oled->buffer[auxIndex]  = (_oled->buffer[auxIndex] | (0x01 << resto));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b25a      	sxtb	r2, r3
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b259      	sxtb	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	89bb      	ldrh	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff69 	bl	8001cc2 <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff87 	bl	8001d08 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	89bb      	ldrh	r3, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fe13 	bl	8001a32 <j3_sh1106_sendDado>
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <J3_SH1106_setClsPixel>:

    j3_sh1106_sendDado(_oled, dado);
  }
}*/

void J3_SH1106_setClsPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db4d      	blt.n	8001ec8 <J3_SH1106_setClsPixel+0xb4>
 8001e2c:	78bb      	ldrb	r3, [r7, #2]
 8001e2e:	2b3f      	cmp	r3, #63	; 0x3f
 8001e30:	d84a      	bhi.n	8001ec8 <J3_SH1106_setClsPixel+0xb4>
    uint8_t page = _y / 8;
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;
    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe18 	bl	8001a74 <j3_sh1106_getIndexBuffer>
 8001e44:	4603      	mov	r3, r0
 8001e46:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001e48:	78bb      	ldrb	r3, [r7, #2]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	72fb      	strb	r3, [r7, #11]

    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] & (~(0x01 << resto)) ) ){
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4003      	ands	r3, r0
 8001e74:	4299      	cmp	r1, r3
 8001e76:	d027      	beq.n	8001ec8 <J3_SH1106_setClsPixel+0xb4>
      _oled->buffer[auxIndex]  = _oled->buffer[auxIndex] & (~(0x01 << resto));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b25a      	sxtb	r2, r3
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	4013      	ands	r3, r2
 8001e94:	b259      	sxtb	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	89bb      	ldrh	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff0b 	bl	8001cc2 <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	89bb      	ldrh	r3, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fdb5 	bl	8001a32 <j3_sh1106_sendDado>
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <J3_SH1106_clrDisplayByBuffer>:

void J3_SH1106_setChar(TOLED*_oled, unsigned char _c){

}

void J3_SH1106_clrDisplayByBuffer(TOLED* _oled){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint16_t auxIndex;
  for (uint8_t line = 0 ; line <= 7; line++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e02f      	b.n	8001f3e <J3_SH1106_clrDisplayByBuffer+0x6e>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73bb      	strb	r3, [r7, #14]
 8001ee2:	e025      	b.n	8001f30 <J3_SH1106_clrDisplayByBuffer+0x60>
	  auxIndex = j3_sh1106_getIndexBuffer(x,line);
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fdc2 	bl	8001a74 <j3_sh1106_getIndexBuffer>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	81bb      	strh	r3, [r7, #12]
	  if( _oled->buffer[auxIndex] != 0x00){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	89bb      	ldrh	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d013      	beq.n	8001f2a <J3_SH1106_clrDisplayByBuffer+0x5a>
	    _oled->buffer[auxIndex] = 0x00;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	89bb      	ldrh	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    	J3_SH1106_cursorY(_oled, line);
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fef8 	bl	8001d08 <J3_SH1106_cursorY>
		J3_SH1106_cursorX(_oled, x);
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fed0 	bl	8001cc2 <J3_SH1106_cursorX>
		j3_sh1106_sendDado(_oled,0x00);
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fd84 	bl	8001a32 <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73bb      	strb	r3, [r7, #14]
 8001f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	dad5      	bge.n	8001ee4 <J3_SH1106_clrDisplayByBuffer+0x14>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b07      	cmp	r3, #7
 8001f42:	d9cc      	bls.n	8001ede <J3_SH1106_clrDisplayByBuffer+0xe>
	  }
	}
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <J3_SH1106_line>:

void J3_SH1106_line(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b089      	sub	sp, #36	; 0x24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	4608      	mov	r0, r1
 8001f58:	4611      	mov	r1, r2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	70fb      	strb	r3, [r7, #3]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70bb      	strb	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	787b      	ldrb	r3, [r7, #1]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10b      	bne.n	8001f88 <J3_SH1106_line+0x3a>
 8001f70:	78ba      	ldrb	r2, [r7, #2]
 8001f72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d106      	bne.n	8001f88 <J3_SH1106_line+0x3a>
	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8001f7a:	78ba      	ldrb	r2, [r7, #2]
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff feec 	bl	8001d5e <J3_SH1106_setPixel>
    return;
 8001f86:	e0c5      	b.n	8002114 <J3_SH1106_line+0x1c6>
  }
  int8_t dx, dy, sx, sy;

  dx = _x1 - _x0;
 8001f88:	787a      	ldrb	r2, [r7, #1]
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	77fb      	strb	r3, [r7, #31]
  sx = (dx < 0) ? -1 : 1;
 8001f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da02      	bge.n	8001fa0 <J3_SH1106_line+0x52>
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e000      	b.n	8001fa2 <J3_SH1106_line+0x54>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	77bb      	strb	r3, [r7, #30]
  dy = _y1 - _y0;
 8001fa4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fa8:	78bb      	ldrb	r3, [r7, #2]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	777b      	strb	r3, [r7, #29]
  sy = (dy < 0) ? -1 : 1;
 8001fb0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da02      	bge.n	8001fbe <J3_SH1106_line+0x70>
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	e000      	b.n	8001fc0 <J3_SH1106_line+0x72>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	773b      	strb	r3, [r7, #28]

  if (abs(dy) < abs(dx)){
 8001fc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bfb8      	it	lt
 8001fca:	425b      	neglt	r3, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bfb8      	it	lt
 8001fd6:	425b      	neglt	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d249      	bcs.n	8002072 <J3_SH1106_line+0x124>
    float m = (float) dy / dx;
 8001fde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe0a 	bl	8000bfc <__aeabi_i2f>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe04 	bl	8000bfc <__aeabi_i2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7fe ff07 	bl	8000e0c <__aeabi_fdiv>
 8001ffe:	4603      	mov	r3, r0
 8002000:	613b      	str	r3, [r7, #16]
    float b = _y0 - m * _x0;
 8002002:	78bb      	ldrb	r3, [r7, #2]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fdf9 	bl	8000bfc <__aeabi_i2f>
 800200a:	4604      	mov	r4, r0
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdf4 	bl	8000bfc <__aeabi_i2f>
 8002014:	4603      	mov	r3, r0
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fe43 	bl	8000ca4 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	4619      	mov	r1, r3
 8002022:	4620      	mov	r0, r4
 8002024:	f7fe fd34 	bl	8000a90 <__aeabi_fsub>
 8002028:	4603      	mov	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]

    while (_x0 != _x1){
 800202c:	e01c      	b.n	8002068 <J3_SH1106_line+0x11a>
      J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fde3 	bl	8000bfc <__aeabi_i2f>
 8002036:	4603      	mov	r3, r0
 8002038:	6939      	ldr	r1, [r7, #16]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fe32 	bl	8000ca4 <__aeabi_fmul>
 8002040:	4603      	mov	r3, r0
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fd25 	bl	8000a94 <__addsf3>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ff79 	bl	8000f44 <__aeabi_f2uiz>
 8002052:	4603      	mov	r3, r0
 8002054:	b2da      	uxtb	r2, r3
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fe7f 	bl	8001d5e <J3_SH1106_setPixel>
      _x0 += sx;
 8002060:	7fba      	ldrb	r2, [r7, #30]
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	4413      	add	r3, r2
 8002066:	70fb      	strb	r3, [r7, #3]
    while (_x0 != _x1){
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	787b      	ldrb	r3, [r7, #1]
 800206c:	429a      	cmp	r2, r3
 800206e:	d1de      	bne.n	800202e <J3_SH1106_line+0xe0>
 8002070:	e049      	b.n	8002106 <J3_SH1106_line+0x1b8>
    }
  }
  else {
    float m = (float) dx / dy;
 8002072:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fdc0 	bl	8000bfc <__aeabi_i2f>
 800207c:	4604      	mov	r4, r0
 800207e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fdba 	bl	8000bfc <__aeabi_i2f>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f7fe febd 	bl	8000e0c <__aeabi_fdiv>
 8002092:	4603      	mov	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]
    float b = _x0 - m * _y0;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fdaf 	bl	8000bfc <__aeabi_i2f>
 800209e:	4604      	mov	r4, r0
 80020a0:	78bb      	ldrb	r3, [r7, #2]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdaa 	bl	8000bfc <__aeabi_i2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fdf9 	bl	8000ca4 <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4619      	mov	r1, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7fe fcea 	bl	8000a90 <__aeabi_fsub>
 80020bc:	4603      	mov	r3, r0
 80020be:	617b      	str	r3, [r7, #20]

    while (_y0 != _y1){
 80020c0:	e01c      	b.n	80020fc <J3_SH1106_line+0x1ae>
      J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 80020c2:	78bb      	ldrb	r3, [r7, #2]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd99 	bl	8000bfc <__aeabi_i2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	69b9      	ldr	r1, [r7, #24]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fde8 	bl	8000ca4 <__aeabi_fmul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fcdb 	bl	8000a94 <__addsf3>
 80020de:	4603      	mov	r3, r0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe ff2f 	bl	8000f44 <__aeabi_f2uiz>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	78ba      	ldrb	r2, [r7, #2]
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fe35 	bl	8001d5e <J3_SH1106_setPixel>
          _y0 += sy;
 80020f4:	7f3a      	ldrb	r2, [r7, #28]
 80020f6:	78bb      	ldrb	r3, [r7, #2]
 80020f8:	4413      	add	r3, r2
 80020fa:	70bb      	strb	r3, [r7, #2]
    while (_y0 != _y1){
 80020fc:	78ba      	ldrb	r2, [r7, #2]
 80020fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002102:	429a      	cmp	r2, r3
 8002104:	d1dd      	bne.n	80020c2 <J3_SH1106_line+0x174>
    }
  }

  J3_SH1106_setPixel(_oled, _x1, _y1);
 8002106:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800210a:	787b      	ldrb	r3, [r7, #1]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe25 	bl	8001d5e <J3_SH1106_setPixel>
}
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}

0800211a <J3_SH1106_lineDash>:

void J3_SH1106_lineDash(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b089      	sub	sp, #36	; 0x24
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	4608      	mov	r0, r1
 8002124:	4611      	mov	r1, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	70fb      	strb	r3, [r7, #3]
 800212c:	460b      	mov	r3, r1
 800212e:	70bb      	strb	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	787b      	ldrb	r3, [r7, #1]
 8002138:	429a      	cmp	r2, r3
 800213a:	d10b      	bne.n	8002154 <J3_SH1106_lineDash+0x3a>
 800213c:	78ba      	ldrb	r2, [r7, #2]
 800213e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002142:	429a      	cmp	r2, r3
 8002144:	d106      	bne.n	8002154 <J3_SH1106_lineDash+0x3a>
 	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8002146:	78ba      	ldrb	r2, [r7, #2]
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fe06 	bl	8001d5e <J3_SH1106_setPixel>
     return;
 8002152:	e10b      	b.n	800236c <J3_SH1106_lineDash+0x252>
   }
   int8_t dx, dy, sx, sy;
   int8_t p = 1;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]

   dx = _x1 - _x0;
 8002158:	787a      	ldrb	r2, [r7, #1]
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	77bb      	strb	r3, [r7, #30]
   sx = (dx < 0) ? -1 : 1;
 8002162:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da02      	bge.n	8002170 <J3_SH1106_lineDash+0x56>
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e000      	b.n	8002172 <J3_SH1106_lineDash+0x58>
 8002170:	2301      	movs	r3, #1
 8002172:	777b      	strb	r3, [r7, #29]
   dy = _y1 - _y0;
 8002174:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002178:	78bb      	ldrb	r3, [r7, #2]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	773b      	strb	r3, [r7, #28]
   sy = (dy < 0) ? -1 : 1;
 8002180:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	da02      	bge.n	800218e <J3_SH1106_lineDash+0x74>
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e000      	b.n	8002190 <J3_SH1106_lineDash+0x76>
 800218e:	2301      	movs	r3, #1
 8002190:	76fb      	strb	r3, [r7, #27]

   if (abs(dy) < abs(dx)){
 8002192:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	bfb8      	it	lt
 800219a:	425b      	neglt	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bfb8      	it	lt
 80021a6:	425b      	neglt	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d26b      	bcs.n	8002286 <J3_SH1106_lineDash+0x16c>
     float m = (float) dy / dx;
 80021ae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fd22 	bl	8000bfc <__aeabi_i2f>
 80021b8:	4604      	mov	r4, r0
 80021ba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd1c 	bl	8000bfc <__aeabi_i2f>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe fe1f 	bl	8000e0c <__aeabi_fdiv>
 80021ce:	4603      	mov	r3, r0
 80021d0:	60fb      	str	r3, [r7, #12]
     float b = _y0 - m * _x0;
 80021d2:	78bb      	ldrb	r3, [r7, #2]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd11 	bl	8000bfc <__aeabi_i2f>
 80021da:	4604      	mov	r4, r0
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fd0c 	bl	8000bfc <__aeabi_i2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fd5b 	bl	8000ca4 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7fe fc4c 	bl	8000a90 <__aeabi_fsub>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60bb      	str	r3, [r7, #8]

     while (_x0 != _x1){
 80021fc:	e03e      	b.n	800227c <J3_SH1106_lineDash+0x162>
       if(p){
 80021fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01b      	beq.n	800223e <J3_SH1106_lineDash+0x124>
         J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fcf7 	bl	8000bfc <__aeabi_i2f>
 800220e:	4603      	mov	r3, r0
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fd46 	bl	8000ca4 <__aeabi_fmul>
 8002218:	4603      	mov	r3, r0
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fc39 	bl	8000a94 <__addsf3>
 8002222:	4603      	mov	r3, r0
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe8d 	bl	8000f44 <__aeabi_f2uiz>
 800222a:	4603      	mov	r3, r0
 800222c:	b2da      	uxtb	r2, r3
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fd93 	bl	8001d5e <J3_SH1106_setPixel>
         p = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e01a      	b.n	8002274 <J3_SH1106_lineDash+0x15a>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fcdb 	bl	8000bfc <__aeabi_i2f>
 8002246:	4603      	mov	r3, r0
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd2a 	bl	8000ca4 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fc1d 	bl	8000a94 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fe71 	bl	8000f44 <__aeabi_f2uiz>
 8002262:	4603      	mov	r3, r0
 8002264:	b2da      	uxtb	r2, r3
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fdd2 	bl	8001e14 <J3_SH1106_setClsPixel>
    	 p = 1;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
       }

       _x0 += sx;
 8002274:	7f7a      	ldrb	r2, [r7, #29]
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	4413      	add	r3, r2
 800227a:	70fb      	strb	r3, [r7, #3]
     while (_x0 != _x1){
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1bc      	bne.n	80021fe <J3_SH1106_lineDash+0xe4>
 8002284:	e06b      	b.n	800235e <J3_SH1106_lineDash+0x244>
     }
   }
   else {
     float m = (float) dx / dy;
 8002286:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fcb6 	bl	8000bfc <__aeabi_i2f>
 8002290:	4604      	mov	r4, r0
 8002292:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fcb0 	bl	8000bfc <__aeabi_i2f>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7fe fdb3 	bl	8000e0c <__aeabi_fdiv>
 80022a6:	4603      	mov	r3, r0
 80022a8:	617b      	str	r3, [r7, #20]
     float b = _x0 - m * _y0;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fca5 	bl	8000bfc <__aeabi_i2f>
 80022b2:	4604      	mov	r4, r0
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fca0 	bl	8000bfc <__aeabi_i2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	6979      	ldr	r1, [r7, #20]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fcef 	bl	8000ca4 <__aeabi_fmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4619      	mov	r1, r3
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7fe fbe0 	bl	8000a90 <__aeabi_fsub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]

     while (_y0 != _y1){
 80022d4:	e03e      	b.n	8002354 <J3_SH1106_lineDash+0x23a>
       if(p){
 80022d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01b      	beq.n	8002316 <J3_SH1106_lineDash+0x1fc>
         J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 80022de:	78bb      	ldrb	r3, [r7, #2]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fc8b 	bl	8000bfc <__aeabi_i2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fcda 	bl	8000ca4 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	6939      	ldr	r1, [r7, #16]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fbcd 	bl	8000a94 <__addsf3>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fe21 	bl	8000f44 <__aeabi_f2uiz>
 8002302:	4603      	mov	r3, r0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fd27 	bl	8001d5e <J3_SH1106_setPixel>
         p = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	77fb      	strb	r3, [r7, #31]
 8002314:	e01a      	b.n	800234c <J3_SH1106_lineDash+0x232>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 8002316:	78bb      	ldrb	r3, [r7, #2]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fc6f 	bl	8000bfc <__aeabi_i2f>
 800231e:	4603      	mov	r3, r0
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fcbe 	bl	8000ca4 <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fbb1 	bl	8000a94 <__addsf3>
 8002332:	4603      	mov	r3, r0
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe05 	bl	8000f44 <__aeabi_f2uiz>
 800233a:	4603      	mov	r3, r0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fd66 	bl	8001e14 <J3_SH1106_setClsPixel>
    	 p = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
       }
       _y0 += sy;
 800234c:	7efa      	ldrb	r2, [r7, #27]
 800234e:	78bb      	ldrb	r3, [r7, #2]
 8002350:	4413      	add	r3, r2
 8002352:	70bb      	strb	r3, [r7, #2]
     while (_y0 != _y1){
 8002354:	78ba      	ldrb	r2, [r7, #2]
 8002356:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800235a:	429a      	cmp	r2, r3
 800235c:	d1bb      	bne.n	80022d6 <J3_SH1106_lineDash+0x1bc>
     }
   }

   J3_SH1106_setPixel(_oled, _x1, _y1);
 800235e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002362:	787b      	ldrb	r3, [r7, #1]
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fcf9 	bl	8001d5e <J3_SH1106_setPixel>
}
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <J3_SH1106_draw>:
	  else
		J3_SH1106_setClsPixel(_oled, _x, _y + i);
  }
}

void J3_SH1106_draw(TOLED* _oled, uint8_t* _draw, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h){
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	4611      	mov	r1, r2
 800237e:	461a      	mov	r2, r3
 8002380:	460b      	mov	r3, r1
 8002382:	71fb      	strb	r3, [r7, #7]
 8002384:	4613      	mov	r3, r2
 8002386:	71bb      	strb	r3, [r7, #6]
  uint16_t tam = _w * _h;
 8002388:	f897 3020 	ldrb.w	r3, [r7, #32]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002392:	b292      	uxth	r2, r2
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	827b      	strh	r3, [r7, #18]
  uint16_t contX = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	82fb      	strh	r3, [r7, #22]
  uint8_t aux = 0x80;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	747b      	strb	r3, [r7, #17]

  for(uint16_t i = 0; i<tam; i++){
 80023a2:	2300      	movs	r3, #0
 80023a4:	82bb      	strh	r3, [r7, #20]
 80023a6:	e036      	b.n	8002416 <J3_SH1106_draw+0xa4>
	if(_draw[i/8] & (aux >> (i % 8)) ){
 80023a8:	8abb      	ldrh	r3, [r7, #20]
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	7c7a      	ldrb	r2, [r7, #17]
 80023ba:	8abb      	ldrh	r3, [r7, #20]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	fa42 f303 	asr.w	r3, r2, r3
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <J3_SH1106_draw+0x6e>
	  J3_SH1106_setPixel(_oled, _x + contX, _y);
 80023ca:	8afb      	ldrh	r3, [r7, #22]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4413      	add	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	79ba      	ldrb	r2, [r7, #6]
 80023d6:	4619      	mov	r1, r3
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff fcc0 	bl	8001d5e <J3_SH1106_setPixel>
 80023de:	e009      	b.n	80023f4 <J3_SH1106_draw+0x82>
	}
    else{
    	J3_SH1106_setClsPixel(_oled, _x + contX, _y);
 80023e0:	8afb      	ldrh	r3, [r7, #22]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	79ba      	ldrb	r2, [r7, #6]
 80023ec:	4619      	mov	r1, r3
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff fd10 	bl	8001e14 <J3_SH1106_setClsPixel>
	}
    contX++;
 80023f4:	8afb      	ldrh	r3, [r7, #22]
 80023f6:	3301      	adds	r3, #1
 80023f8:	82fb      	strh	r3, [r7, #22]
    if(contX == _w){
 80023fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	8afa      	ldrh	r2, [r7, #22]
 8002402:	429a      	cmp	r2, r3
 8002404:	d104      	bne.n	8002410 <J3_SH1106_draw+0x9e>
      _y++;
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	3301      	adds	r3, #1
 800240a:	71bb      	strb	r3, [r7, #6]
	  contX = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i<tam; i++){
 8002410:	8abb      	ldrh	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	82bb      	strh	r3, [r7, #20]
 8002416:	8aba      	ldrh	r2, [r7, #20]
 8002418:	8a7b      	ldrh	r3, [r7, #18]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3c4      	bcc.n	80023a8 <J3_SH1106_draw+0x36>
    }
  }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <J3_SH1106_setBox>:

void J3_SH1106_setBox(TOLED* _oled, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h,  uint8_t _fill){
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af02      	add	r7, sp, #8
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	70fb      	strb	r3, [r7, #3]
 800243a:	460b      	mov	r3, r1
 800243c:	70bb      	strb	r3, [r7, #2]
 800243e:	4613      	mov	r3, r2
 8002440:	707b      	strb	r3, [r7, #1]
  J3_SH1106_line(_oled, _x, _y, _x + _w, _y);
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	4413      	add	r3, r2
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	78ba      	ldrb	r2, [r7, #2]
 800244c:	78f9      	ldrb	r1, [r7, #3]
 800244e:	78bb      	ldrb	r3, [r7, #2]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4603      	mov	r3, r0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fd7a 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y, _x, _y + _h);
 800245a:	78ba      	ldrb	r2, [r7, #2]
 800245c:	7e3b      	ldrb	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	b2db      	uxtb	r3, r3
 8002462:	78f8      	ldrb	r0, [r7, #3]
 8002464:	78ba      	ldrb	r2, [r7, #2]
 8002466:	78f9      	ldrb	r1, [r7, #3]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4603      	mov	r3, r0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fd6e 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _x +_w, _y, _x + _w, _y + _h);
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	4413      	add	r3, r2
 8002478:	b2d9      	uxtb	r1, r3
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	4413      	add	r3, r2
 8002480:	b2d8      	uxtb	r0, r3
 8002482:	78ba      	ldrb	r2, [r7, #2]
 8002484:	7e3b      	ldrb	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	78ba      	ldrb	r2, [r7, #2]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4603      	mov	r3, r0
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fd5c 	bl	8001f4e <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y + _h, _x + _w, _y + _h);
 8002496:	78ba      	ldrb	r2, [r7, #2]
 8002498:	7e3b      	ldrb	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	b2d8      	uxtb	r0, r3
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	4413      	add	r3, r2
 80024a4:	b2dc      	uxtb	r4, r3
 80024a6:	78ba      	ldrb	r2, [r7, #2]
 80024a8:	7e3b      	ldrb	r3, [r7, #24]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	78f9      	ldrb	r1, [r7, #3]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4623      	mov	r3, r4
 80024b4:	4602      	mov	r2, r0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fd49 	bl	8001f4e <J3_SH1106_line>
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024c6:	e003      	b.n	80024d0 <LoopCopyDataInit>

080024c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024ce:	3104      	adds	r1, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024d0:	480a      	ldr	r0, [pc, #40]	; (80024fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024d8:	d3f6      	bcc.n	80024c8 <CopyDataInit>
  ldr r2, =_sbss
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024dc:	e002      	b.n	80024e4 <LoopFillZerobss>

080024de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024e0:	f842 3b04 	str.w	r3, [r2], #4

080024e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024e8:	d3f9      	bcc.n	80024de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ea:	f7ff fa7b 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f002 f9b9 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024f2:	f7fe fe83 	bl	80011fc <main>
  bx lr
 80024f6:	4770      	bx	lr
  ldr r3, =_sidata
 80024f8:	080078a4 	.word	0x080078a4
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002500:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002504:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002508:	2000029c 	.word	0x2000029c

0800250c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC1_2_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_Init+0x28>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <HAL_Init+0x28>)
 800251a:	f043 0310 	orr.w	r3, r3, #16
 800251e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002520:	2003      	movs	r0, #3
 8002522:	f000 fe03 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002526:	2000      	movs	r0, #0
 8002528:	f000 f808 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800252c:	f7ff f940 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x54>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_InitTick+0x58>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	fbb3 f3f1 	udiv	r3, r3, r1
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fe0d 	bl	800317a <HAL_SYSTICK_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00e      	b.n	8002588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d80a      	bhi.n	8002586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f000 fde3 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800257c:	4a06      	ldr	r2, [pc, #24]	; (8002598 <HAL_InitTick+0x5c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000000 	.word	0x20000000
 8002594:	20000008 	.word	0x20000008
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_IncTick+0x1c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_IncTick+0x20>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_IncTick+0x20>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20000288 	.word	0x20000288

080025c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <HAL_GetTick+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000288 	.word	0x20000288

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fa:	bf00      	nop
 80025fc:	f7ff ffe0 	bl	80025c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008

0800261c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0be      	b.n	80027bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fcd0 	bl	8001000 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fbdd 	bl	8002e20 <ADC_ConversionStop_Disable>
 8002666:	4603      	mov	r3, r0
 8002668:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8099 	bne.w	80027aa <HAL_ADC_Init+0x18e>
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 8095 	bne.w	80027aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800269c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7b1b      	ldrb	r3, [r3, #12]
 80026a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d003      	beq.n	80026be <HAL_ADC_Init+0xa2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_ADC_Init+0xa8>
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	e000      	b.n	80026c6 <HAL_ADC_Init+0xaa>
 80026c4:	2300      	movs	r3, #0
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7d1b      	ldrb	r3, [r3, #20]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d119      	bne.n	8002708 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	035a      	lsls	r2, r3, #13
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	e00b      	b.n	8002708 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_ADC_Init+0x1a8>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002738:	d003      	beq.n	8002742 <HAL_ADC_Init+0x126>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d104      	bne.n	800274c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	3b01      	subs	r3, #1
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	430a      	orrs	r2, r1
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_ADC_Init+0x1ac>)
 8002768:	4013      	ands	r3, r2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002786:	e018      	b.n	80027ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f023 0312 	bic.w	r3, r3, #18
 8002790:	f043 0210 	orr.w	r2, r3, #16
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a8:	e007      	b.n	80027ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	ffe1f7fd 	.word	0xffe1f7fd
 80027c8:	ff1f0efe 	.word	0xff1f0efe

080027cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Start+0x1a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e098      	b.n	8002918 <HAL_ADC_Start+0x14c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fac4 	bl	8002d7c <ADC_Enable>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 8087 	bne.w	800290e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a41      	ldr	r2, [pc, #260]	; (8002920 <HAL_ADC_Start+0x154>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d105      	bne.n	800282a <HAL_ADC_Start+0x5e>
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_ADC_Start+0x158>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	2b00      	cmp	r3, #0
 8002842:	d026      	beq.n	8002892 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800284c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002854:	e01d      	b.n	8002892 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <HAL_ADC_Start+0x158>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_ADC_Start+0xaa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2b      	ldr	r2, [pc, #172]	; (8002920 <HAL_ADC_Start+0x154>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <HAL_ADC_Start+0xc6>
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_ADC_Start+0x158>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800288a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f023 0206 	bic.w	r2, r3, #6
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0202 	mvn.w	r2, #2
 80028c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028d2:	d113      	bne.n	80028fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_ADC_Start+0x154>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_ADC_Start+0x158>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d108      	bne.n	80028fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	e00c      	b.n	8002916 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e003      	b.n	8002916 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40012800 	.word	0x40012800
 8002924:	40012400 	.word	0x40012400

08002928 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADC_Stop+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e01a      	b.n	8002978 <HAL_ADC_Stop+0x50>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa68 	bl	8002e20 <ADC_ConversionStop_Disable>
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002996:	f7ff fe13 	bl	80025c0 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0c8      	b.n	8002b54 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d12a      	bne.n	8002a26 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029de:	e01a      	b.n	8002a16 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d016      	beq.n	8002a16 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_ADC_PollForConversion+0x7e>
 80029ee:	f7ff fde7 	bl	80025c0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20b      	bcs.n	8002a16 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e09e      	b.n	8002b54 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0dd      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a24:	e06c      	b.n	8002b00 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a26:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <HAL_ADC_PollForConversion+0x1dc>)
 8002a28:	681c      	ldr	r4, [r3, #0]
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f001 fe50 	bl	80046d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a30:	4603      	mov	r3, r0
 8002a32:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6919      	ldr	r1, [r3, #16]
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_ADC_PollForConversion+0x1e0>)
 8002a3e:	400b      	ands	r3, r1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d118      	bne.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_ADC_PollForConversion+0x1e4>)
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d111      	bne.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_ADC_PollForConversion+0x1e8>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_ADC_PollForConversion+0xf2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_ADC_PollForConversion+0x1ec>)
 8002a68:	400b      	ands	r3, r1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_PollForConversion+0xf2>
 8002a6e:	2314      	movs	r3, #20
 8002a70:	e020      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x134>
 8002a72:	2329      	movs	r3, #41	; 0x29
 8002a74:	e01e      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x134>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6919      	ldr	r1, [r3, #16]
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_ADC_PollForConversion+0x1e8>)
 8002a7e:	400b      	ands	r3, r1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_PollForConversion+0x112>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68d9      	ldr	r1, [r3, #12]
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_ADC_PollForConversion+0x1ec>)
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_ADC_PollForConversion+0x12e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6919      	ldr	r1, [r3, #16]
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_ADC_PollForConversion+0x1f0>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x132>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_ADC_PollForConversion+0x1f0>)
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x132>
 8002aae:	2354      	movs	r3, #84	; 0x54
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x134>
 8002ab2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002aba:	e01d      	b.n	8002af8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d016      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_ADC_PollForConversion+0x15a>
 8002aca:	f7ff fd79 	bl	80025c0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d20b      	bcs.n	8002af2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e030      	b.n	8002b54 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3301      	adds	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8dd      	bhi.n	8002abc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0212 	mvn.w	r2, #18
 8002b08:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b24:	d115      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	24924924 	.word	0x24924924
 8002b64:	00924924 	.word	0x00924924
 8002b68:	12492492 	.word	0x12492492
 8002b6c:	00492492 	.word	0x00492492
 8002b70:	00249249 	.word	0x00249249

08002b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x20>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0dc      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x1da>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d81c      	bhi.n	8002bf6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b05      	subs	r3, #5
 8002bce:	221f      	movs	r2, #31
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4019      	ands	r1, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	3b05      	subs	r3, #5
 8002be8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf4:	e03c      	b.n	8002c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d81c      	bhi.n	8002c38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b23      	subs	r3, #35	; 0x23
 8002c10:	221f      	movs	r2, #31
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4019      	ands	r1, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	3b23      	subs	r3, #35	; 0x23
 8002c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	e01b      	b.n	8002c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3b41      	subs	r3, #65	; 0x41
 8002c4a:	221f      	movs	r2, #31
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4019      	ands	r1, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b41      	subs	r3, #65	; 0x41
 8002c64:	fa00 f203 	lsl.w	r2, r0, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d91c      	bls.n	8002cb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	3b1e      	subs	r3, #30
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4019      	ands	r1, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6898      	ldr	r0, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b1e      	subs	r3, #30
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	e019      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6919      	ldr	r1, [r3, #16]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4019      	ands	r1, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6898      	ldr	r0, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d003      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cf2:	2b11      	cmp	r3, #17
 8002cf4:	d132      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d125      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d126      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d1c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d11a      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	0c9a      	lsrs	r2, r3, #18
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d3c:	e002      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f9      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x1b2>
 8002d4a:	e007      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	40012400 	.word	0x40012400
 8002d74:	20000000 	.word	0x20000000
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d039      	beq.n	8002e0e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <ADC_Enable+0x9c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <ADC_Enable+0xa0>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9b      	lsrs	r3, r3, #18
 8002db6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002db8:	e002      	b.n	8002dc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dc6:	f7ff fbfb 	bl	80025c0 <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dcc:	e018      	b.n	8002e00 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dce:	f7ff fbf7 	bl	80025c0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d911      	bls.n	8002e00 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d1df      	bne.n	8002dce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	431bde83 	.word	0x431bde83

08002e20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d127      	bne.n	8002e8a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e4a:	f7ff fbb9 	bl	80025c0 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e50:	e014      	b.n	8002e7c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e52:	f7ff fbb5 	bl	80025c0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d90d      	bls.n	8002e7c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f043 0210 	orr.w	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d0e3      	beq.n	8002e52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e086      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffb0 	bl	8002e20 <ADC_ConversionStop_Disable>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d175      	bne.n	8002fb6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed2:	f023 0302 	bic.w	r3, r3, #2
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_ADCEx_Calibration_Start+0x134>)
 8002ee0:	681c      	ldr	r4, [r3, #0]
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	f001 fbf4 	bl	80046d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002eee:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ef0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002ef2:	e002      	b.n	8002efa <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff3b 	bl	8002d7c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0208 	orr.w	r2, r2, #8
 8002f14:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f16:	f7ff fb53 	bl	80025c0 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f1c:	e014      	b.n	8002f48 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f1e:	f7ff fb4f 	bl	80025c0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	d90d      	bls.n	8002f48 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f023 0312 	bic.w	r3, r3, #18
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e03b      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0204 	orr.w	r2, r2, #4
 8002f64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f66:	f7ff fb2b 	bl	80025c0 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f6c:	e014      	b.n	8002f98 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f6e:	f7ff fb27 	bl	80025c0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	d90d      	bls.n	8002f98 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f023 0312 	bic.w	r3, r3, #18
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e013      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e3      	bne.n	8002f6e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	20000000 	.word	0x20000000

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	; (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	; (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	; 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff90 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff49 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff5e 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff90 	bl	8003084 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5f 	bl	8003030 <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ffb0 	bl	80030e8 <SysTick_Config>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b08b      	sub	sp, #44	; 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	e169      	b.n	800347c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a8:	2201      	movs	r2, #1
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8158 	bne.w	8003476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a9a      	ldr	r2, [pc, #616]	; (8003434 <HAL_GPIO_Init+0x2a0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d05e      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031d0:	4a98      	ldr	r2, [pc, #608]	; (8003434 <HAL_GPIO_Init+0x2a0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d875      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031d6:	4a98      	ldr	r2, [pc, #608]	; (8003438 <HAL_GPIO_Init+0x2a4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d058      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031dc:	4a96      	ldr	r2, [pc, #600]	; (8003438 <HAL_GPIO_Init+0x2a4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d86f      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031e2:	4a96      	ldr	r2, [pc, #600]	; (800343c <HAL_GPIO_Init+0x2a8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d052      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031e8:	4a94      	ldr	r2, [pc, #592]	; (800343c <HAL_GPIO_Init+0x2a8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d869      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031ee:	4a94      	ldr	r2, [pc, #592]	; (8003440 <HAL_GPIO_Init+0x2ac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d04c      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031f4:	4a92      	ldr	r2, [pc, #584]	; (8003440 <HAL_GPIO_Init+0x2ac>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d863      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031fa:	4a92      	ldr	r2, [pc, #584]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d046      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 8003200:	4a90      	ldr	r2, [pc, #576]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d85d      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 8003206:	2b12      	cmp	r3, #18
 8003208:	d82a      	bhi.n	8003260 <HAL_GPIO_Init+0xcc>
 800320a:	2b12      	cmp	r3, #18
 800320c:	d859      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_GPIO_Init+0x80>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	0800328f 	.word	0x0800328f
 8003218:	08003269 	.word	0x08003269
 800321c:	0800327b 	.word	0x0800327b
 8003220:	080032bd 	.word	0x080032bd
 8003224:	080032c3 	.word	0x080032c3
 8003228:	080032c3 	.word	0x080032c3
 800322c:	080032c3 	.word	0x080032c3
 8003230:	080032c3 	.word	0x080032c3
 8003234:	080032c3 	.word	0x080032c3
 8003238:	080032c3 	.word	0x080032c3
 800323c:	080032c3 	.word	0x080032c3
 8003240:	080032c3 	.word	0x080032c3
 8003244:	080032c3 	.word	0x080032c3
 8003248:	080032c3 	.word	0x080032c3
 800324c:	080032c3 	.word	0x080032c3
 8003250:	080032c3 	.word	0x080032c3
 8003254:	080032c3 	.word	0x080032c3
 8003258:	08003271 	.word	0x08003271
 800325c:	08003285 	.word	0x08003285
 8003260:	4a79      	ldr	r2, [pc, #484]	; (8003448 <HAL_GPIO_Init+0x2b4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003266:	e02c      	b.n	80032c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	623b      	str	r3, [r7, #32]
          break;
 800326e:	e029      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	3304      	adds	r3, #4
 8003276:	623b      	str	r3, [r7, #32]
          break;
 8003278:	e024      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	3308      	adds	r3, #8
 8003280:	623b      	str	r3, [r7, #32]
          break;
 8003282:	e01f      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	330c      	adds	r3, #12
 800328a:	623b      	str	r3, [r7, #32]
          break;
 800328c:	e01a      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003296:	2304      	movs	r3, #4
 8003298:	623b      	str	r3, [r7, #32]
          break;
 800329a:	e013      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a4:	2308      	movs	r3, #8
 80032a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	611a      	str	r2, [r3, #16]
          break;
 80032ae:	e009      	b.n	80032c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b0:	2308      	movs	r3, #8
 80032b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	615a      	str	r2, [r3, #20]
          break;
 80032ba:	e003      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032bc:	2300      	movs	r3, #0
 80032be:	623b      	str	r3, [r7, #32]
          break;
 80032c0:	e000      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          break;
 80032c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	d801      	bhi.n	80032ce <HAL_GPIO_Init+0x13a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	e001      	b.n	80032d2 <HAL_GPIO_Init+0x13e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2bff      	cmp	r3, #255	; 0xff
 80032d8:	d802      	bhi.n	80032e0 <HAL_GPIO_Init+0x14c>
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	e002      	b.n	80032e6 <HAL_GPIO_Init+0x152>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	3b08      	subs	r3, #8
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	210f      	movs	r1, #15
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80b1 	beq.w	8003476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_GPIO_Init+0x2b8>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a4c      	ldr	r2, [pc, #304]	; (800344c <HAL_GPIO_Init+0x2b8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_GPIO_Init+0x2b8>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800332c:	4a48      	ldr	r2, [pc, #288]	; (8003450 <HAL_GPIO_Init+0x2bc>)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220f      	movs	r2, #15
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a40      	ldr	r2, [pc, #256]	; (8003454 <HAL_GPIO_Init+0x2c0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_Init+0x1ec>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <HAL_GPIO_Init+0x2c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_Init+0x1e8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3e      	ldr	r2, [pc, #248]	; (800345c <HAL_GPIO_Init+0x2c8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_Init+0x1e4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <HAL_GPIO_Init+0x2cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_Init+0x1e0>
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003374:	2304      	movs	r3, #4
 8003376:	e004      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003378:	2302      	movs	r3, #2
 800337a:	e002      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003380:	2300      	movs	r3, #0
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	f002 0203 	and.w	r2, r2, #3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4093      	lsls	r3, r2
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003392:	492f      	ldr	r1, [pc, #188]	; (8003450 <HAL_GPIO_Init+0x2bc>)
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	492c      	ldr	r1, [pc, #176]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4922      	ldr	r1, [pc, #136]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	491e      	ldr	r1, [pc, #120]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4918      	ldr	r1, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	43db      	mvns	r3, r3
 8003412:	4914      	ldr	r1, [pc, #80]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003414:	4013      	ands	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
 8003430:	e021      	b.n	8003476 <HAL_GPIO_Init+0x2e2>
 8003432:	bf00      	nop
 8003434:	10320000 	.word	0x10320000
 8003438:	10310000 	.word	0x10310000
 800343c:	10220000 	.word	0x10220000
 8003440:	10210000 	.word	0x10210000
 8003444:	10120000 	.word	0x10120000
 8003448:	10110000 	.word	0x10110000
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	40010800 	.word	0x40010800
 8003458:	40010c00 	.word	0x40010c00
 800345c:	40011000 	.word	0x40011000
 8003460:	40011400 	.word	0x40011400
 8003464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_GPIO_Init+0x304>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	4909      	ldr	r1, [pc, #36]	; (8003498 <HAL_GPIO_Init+0x304>)
 8003472:	4013      	ands	r3, r2
 8003474:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	3301      	adds	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f47f ae8e 	bne.w	80031a8 <HAL_GPIO_Init+0x14>
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	372c      	adds	r7, #44	; 0x2c
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40010400 	.word	0x40010400

0800349c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e12b      	b.n	8003706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fe40 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003500:	f000 ffea 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8003504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a81      	ldr	r2, [pc, #516]	; (8003710 <HAL_I2C_Init+0x274>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d807      	bhi.n	8003520 <HAL_I2C_Init+0x84>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a80      	ldr	r2, [pc, #512]	; (8003714 <HAL_I2C_Init+0x278>)
 8003514:	4293      	cmp	r3, r2
 8003516:	bf94      	ite	ls
 8003518:	2301      	movls	r3, #1
 800351a:	2300      	movhi	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e006      	b.n	800352e <HAL_I2C_Init+0x92>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a7d      	ldr	r2, [pc, #500]	; (8003718 <HAL_I2C_Init+0x27c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0e7      	b.n	8003706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a78      	ldr	r2, [pc, #480]	; (800371c <HAL_I2C_Init+0x280>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c9b      	lsrs	r3, r3, #18
 8003540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <HAL_I2C_Init+0x274>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d802      	bhi.n	8003570 <HAL_I2C_Init+0xd4>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3301      	adds	r3, #1
 800356e:	e009      	b.n	8003584 <HAL_I2C_Init+0xe8>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_I2C_Init+0x284>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	3301      	adds	r3, #1
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	430b      	orrs	r3, r1
 800358a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	495c      	ldr	r1, [pc, #368]	; (8003710 <HAL_I2C_Init+0x274>)
 80035a0:	428b      	cmp	r3, r1
 80035a2:	d819      	bhi.n	80035d8 <HAL_I2C_Init+0x13c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e59      	subs	r1, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035b8:	400b      	ands	r3, r1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_I2C_Init+0x138>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e59      	subs	r1, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	e051      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 80035d4:	2304      	movs	r3, #4
 80035d6:	e04f      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d111      	bne.n	8003604 <HAL_I2C_Init+0x168>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e012      	b.n	800362a <HAL_I2C_Init+0x18e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Init+0x196>
 800362e:	2301      	movs	r3, #1
 8003630:	e022      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10e      	bne.n	8003658 <HAL_I2C_Init+0x1bc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e58      	subs	r0, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	440b      	add	r3, r1
 8003648:	fbb0 f3f3 	udiv	r3, r0, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003656:	e00f      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	0099      	lsls	r1, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6809      	ldr	r1, [r1, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6911      	ldr	r1, [r2, #16]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d2      	ldr	r2, [r2, #12]
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	000186a0 	.word	0x000186a0
 8003714:	001e847f 	.word	0x001e847f
 8003718:	003d08ff 	.word	0x003d08ff
 800371c:	431bde83 	.word	0x431bde83
 8003720:	10624dd3 	.word	0x10624dd3

08003724 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	817b      	strh	r3, [r7, #10]
 8003734:	4613      	mov	r3, r2
 8003736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7fe ff42 	bl	80025c0 <HAL_GetTick>
 800373c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	f040 80e0 	bne.w	800390c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	4970      	ldr	r1, [pc, #448]	; (8003918 <HAL_I2C_Master_Transmit+0x1f4>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f964 	bl	8003a24 <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	e0d3      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2C_Master_Transmit+0x50>
 8003770:	2302      	movs	r3, #2
 8003772:	e0cc      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b01      	cmp	r3, #1
 8003788:	d007      	beq.n	800379a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2210      	movs	r2, #16
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	893a      	ldrh	r2, [r7, #8]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a50      	ldr	r2, [pc, #320]	; (800391c <HAL_I2C_Master_Transmit+0x1f8>)
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f89c 	bl	8003920 <I2C_MasterRequestWrite>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e08d      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003808:	e066      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f9de 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06b      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d11b      	bne.n	80038ac <HAL_I2C_Master_Transmit+0x188>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d017      	beq.n	80038ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	6a39      	ldr	r1, [r7, #32]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f9ce 	bl	8003c52 <I2C_WaitOnBTFFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d107      	bne.n	80038d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e01a      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d194      	bne.n	800380a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	00100002 	.word	0x00100002
 800391c:	ffff0000 	.word	0xffff0000

08003920 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d006      	beq.n	800394a <I2C_MasterRequestWrite+0x2a>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d003      	beq.n	800394a <I2C_MasterRequestWrite+0x2a>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003948:	d108      	bne.n	800395c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00b      	b.n	8003974 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b12      	cmp	r3, #18
 8003962:	d107      	bne.n	8003974 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f84f 	bl	8003a24 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	d103      	bne.n	80039a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e035      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b0:	d108      	bne.n	80039c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c0:	611a      	str	r2, [r3, #16]
 80039c2:	e01b      	b.n	80039fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c4:	897b      	ldrh	r3, [r7, #10]
 80039c6:	11db      	asrs	r3, r3, #7
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0306 	and.w	r3, r3, #6
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f063 030f 	orn	r3, r3, #15
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <I2C_MasterRequestWrite+0xfc>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f875 	bl	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e010      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <I2C_MasterRequestWrite+0x100>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f865 	bl	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	00010008 	.word	0x00010008
 8003a20:	00010002 	.word	0x00010002

08003a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a34:	e025      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d021      	beq.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fdbf 	bl	80025c0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e023      	b.n	8003aca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10d      	bne.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	e00c      	b.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d0b6      	beq.n	8003a36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae0:	e051      	b.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d123      	bne.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e046      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d021      	beq.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fe fd3d 	bl	80025c0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d116      	bne.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e020      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10c      	bne.n	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e00b      	b.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d18d      	bne.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bdc:	e02d      	b.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f878 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e02d      	b.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d021      	beq.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fe fce3 	bl	80025c0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d116      	bne.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e007      	b.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d1ca      	bne.n	8003bde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c5e:	e02d      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f837 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e02d      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d021      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c78:	f7fe fca2 	bl	80025c0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e007      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d1ca      	bne.n	8003c60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d11b      	bne.n	8003d24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e26c      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d00c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d112      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
 8003d68:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x12c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d168      	bne.n	8003e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e246      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x76>
 8003d98:	4b80      	ldr	r3, [pc, #512]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7f      	ldr	r2, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b78      	ldr	r3, [pc, #480]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a77      	ldr	r2, [pc, #476]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0xbc>
 8003dd2:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a71      	ldr	r2, [pc, #452]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fbd8 	bl	80025c0 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fbd4 	bl	80025c0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1fa      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe4>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fbc4 	bl	80025c0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fbc0 	bl	80025c0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1e6      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x10c>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e6a:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1ba      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4939      	ldr	r1, [pc, #228]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fb79 	bl	80025c0 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fb75 	bl	80025c0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e19b      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4927      	ldr	r1, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fb58 	bl	80025c0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fe fb54 	bl	80025c0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e17a      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03a      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fb38 	bl	80025c0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fe fb34 	bl	80025c0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e15a      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f000 fad8 	bl	8004528 <RCC_Delay>
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe fb1e 	bl	80025c0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe fb1a 	bl	80025c0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d908      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e140      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	42420000 	.word	0x42420000
 8003fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	4b9e      	ldr	r3, [pc, #632]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e9      	bne.n	8003f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc6:	4b97      	ldr	r3, [pc, #604]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b94      	ldr	r3, [pc, #592]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a93      	ldr	r2, [pc, #588]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	4b91      	ldr	r3, [pc, #580]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	4b8e      	ldr	r3, [pc, #568]	; (8004228 <HAL_RCC_OscConfig+0x4f8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffa:	4b8b      	ldr	r3, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x4f8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a8a      	ldr	r2, [pc, #552]	; (8004228 <HAL_RCC_OscConfig+0x4f8>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fe fadb 	bl	80025c0 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fe fad7 	bl	80025c0 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	; 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0fd      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x4f8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x312>
 8004034:	4b7b      	ldr	r3, [pc, #492]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4a7a      	ldr	r2, [pc, #488]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6213      	str	r3, [r2, #32]
 8004040:	e02d      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x334>
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a75      	ldr	r2, [pc, #468]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b73      	ldr	r3, [pc, #460]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a72      	ldr	r2, [pc, #456]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	e01c      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_OscConfig+0x356>
 800406c:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a6c      	ldr	r2, [pc, #432]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a69      	ldr	r2, [pc, #420]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6213      	str	r3, [r2, #32]
 8004084:	e00b      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a66      	ldr	r2, [pc, #408]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6213      	str	r3, [r2, #32]
 8004092:	4b64      	ldr	r3, [pc, #400]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a63      	ldr	r2, [pc, #396]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d015      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fe fa8b 	bl	80025c0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe fa87 	bl	80025c0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0ab      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCC_OscConfig+0x37e>
 80040d0:	e014      	b.n	80040fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fa75 	bl	80025c0 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fe fa71 	bl	80025c0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e095      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a47      	ldr	r2, [pc, #284]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8081 	beq.w	800421a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004118:	4b42      	ldr	r3, [pc, #264]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d061      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d146      	bne.n	80041ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_OscConfig+0x4fc>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fa45 	bl	80025c0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fa41 	bl	80025c0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e067      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004162:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	492d      	ldr	r1, [pc, #180]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a19      	ldr	r1, [r3, #32]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	4927      	ldr	r1, [pc, #156]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x4fc>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fa15 	bl	80025c0 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fe fa11 	bl	80025c0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e037      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x46a>
 80041b8:	e02f      	b.n	800421a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <HAL_RCC_OscConfig+0x4fc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe f9fe 	bl	80025c0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe f9fa 	bl	80025c0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e020      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x498>
 80041e6:	e018      	b.n	800421a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e013      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	429a      	cmp	r2, r3
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
 800422c:	42420060 	.word	0x42420060

08004230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0d0      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d910      	bls.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4965      	ldr	r1, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d040      	beq.n	8004350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d115      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e073      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06b      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4936      	ldr	r1, [pc, #216]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fe f94e 	bl	80025c0 <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fe f94a 	bl	80025c0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e053      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d210      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4922      	ldr	r1, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1cc>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f8ac 	bl	800253c <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40021000 	.word	0x40021000
 80043f8:	080074a0 	.word	0x080074a0
 80043fc:	20000000 	.word	0x20000000
 8004400:	20000004 	.word	0x20000004

08004404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	b490      	push	{r4, r7}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800440c:	1d3c      	adds	r4, r7, #4
 800440e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004414:	f240 2301 	movw	r3, #513	; 0x201
 8004418:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x40>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x46>
 8004442:	e02d      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004446:	623b      	str	r3, [r7, #32]
      break;
 8004448:	e02d      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	0c9b      	lsrs	r3, r3, #18
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004456:	4413      	add	r3, r2
 8004458:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800445c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0c5b      	lsrs	r3, r3, #17
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004476:	4413      	add	r3, r2
 8004478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800447c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004482:	fb02 f203 	mul.w	r2, r2, r3
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e004      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	623b      	str	r3, [r7, #32]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a2:	623b      	str	r3, [r7, #32]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	6a3b      	ldr	r3, [r7, #32]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc90      	pop	{r4, r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	08007280 	.word	0x08007280
 80044b8:	40021000 	.word	0x40021000
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	003d0900 	.word	0x003d0900

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	20000000 	.word	0x20000000

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff2 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	080074b0 	.word	0x080074b0

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffde 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	0adb      	lsrs	r3, r3, #11
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	080074b0 	.word	0x080074b0

08004528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <RCC_Delay+0x34>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <RCC_Delay+0x38>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0a5b      	lsrs	r3, r3, #9
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004544:	bf00      	nop
  }
  while (Delay --);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	60fa      	str	r2, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f9      	bne.n	8004544 <RCC_Delay+0x1c>
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	20000000 	.word	0x20000000
 8004560:	10624dd3 	.word	0x10624dd3

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07d      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4a4b      	ldr	r2, [pc, #300]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	61d3      	str	r3, [r2, #28]
 800459c:	4b49      	ldr	r3, [pc, #292]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d118      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b8:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a42      	ldr	r2, [pc, #264]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c4:	f7fd fffc 	bl	80025c0 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fd fff8 	bl	80025c0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e06d      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02e      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d027      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004608:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004618:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800461e:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d014      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fd ffc7 	bl	80025c0 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd ffc3 	bl	80025c0 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e036      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4917      	ldr	r1, [pc, #92]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	4313      	orrs	r3, r2
 8004668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	490b      	ldr	r1, [pc, #44]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4904      	ldr	r1, [pc, #16]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42420440 	.word	0x42420440

080046d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b08d      	sub	sp, #52	; 0x34
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046d8:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80046da:	f107 040c 	add.w	r4, r7, #12
 80046de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80046e4:	f240 2301 	movw	r3, #513	; 0x201
 80046e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	2300      	movs	r3, #0
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b10      	cmp	r3, #16
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b10      	cmp	r3, #16
 8004708:	f200 8091 	bhi.w	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d04c      	beq.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d07c      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004718:	e089      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800471a:	4b4b      	ldr	r3, [pc, #300]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8082 	beq.w	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	0c9b      	lsrs	r3, r3, #18
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800473a:	4413      	add	r3, r2
 800473c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004740:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c5b      	lsrs	r3, r3, #17
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800475a:	4413      	add	r3, r2
 800475c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800476c:	4a37      	ldr	r2, [pc, #220]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	fbb2 f2f3 	udiv	r2, r2, r3
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477c:	e004      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	4a33      	ldr	r2, [pc, #204]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004788:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004794:	d102      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800479a:	e04a      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80047aa:	e042      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80047ac:	4b26      	ldr	r3, [pc, #152]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047bc:	d108      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80047c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	e01f      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047da:	d109      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80047e8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ee:	e00f      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fa:	d11c      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004808:	f24f 4324 	movw	r3, #62500	; 0xf424
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800480e:	e012      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004810:	e011      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004812:	f7ff fe75 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	0b9b      	lsrs	r3, r3, #14
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	3301      	adds	r3, #1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800482c:	e004      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004836:	bf00      	nop
    }
  }
  return (frequency);
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800483a:	4618      	mov	r0, r3
 800483c:	3734      	adds	r7, #52	; 0x34
 800483e:	46bd      	mov	sp, r7
 8004840:	bd90      	pop	{r4, r7, pc}
 8004842:	bf00      	nop
 8004844:	08007290 	.word	0x08007290
 8004848:	40021000 	.word	0x40021000
 800484c:	007a1200 	.word	0x007a1200
 8004850:	003d0900 	.word	0x003d0900
 8004854:	aaaaaaab 	.word	0xaaaaaaab

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	2600      	movs	r6, #0
 8004868:	4d0c      	ldr	r5, [pc, #48]	; (800489c <__libc_init_array+0x38>)
 800486a:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486c:	1b64      	subs	r4, r4, r5
 800486e:	10a4      	asrs	r4, r4, #2
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	f002 fcf8 	bl	8007268 <_init>
 8004878:	2600      	movs	r6, #0
 800487a:	4d0a      	ldr	r5, [pc, #40]	; (80048a4 <__libc_init_array+0x40>)
 800487c:	4c0a      	ldr	r4, [pc, #40]	; (80048a8 <__libc_init_array+0x44>)
 800487e:	1b64      	subs	r4, r4, r5
 8004880:	10a4      	asrs	r4, r4, #2
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	0800789c 	.word	0x0800789c
 80048a0:	0800789c 	.word	0x0800789c
 80048a4:	0800789c 	.word	0x0800789c
 80048a8:	080078a0 	.word	0x080078a0

080048ac <malloc>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <malloc+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f000 b857 	b.w	8004964 <_malloc_r>
 80048b6:	bf00      	nop
 80048b8:	2000000c 	.word	0x2000000c

080048bc <memset>:
 80048bc:	4603      	mov	r3, r0
 80048be:	4402      	add	r2, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d043      	beq.n	800495c <_free_r+0x90>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f001 fba8 	bl	8006034 <__malloc_lock>
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <_free_r+0x94>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	4610      	mov	r0, r2
 80048ea:	b933      	cbnz	r3, 80048fa <_free_r+0x2e>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f6:	f001 bba3 	b.w	8006040 <__malloc_unlock>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d90a      	bls.n	8004914 <_free_r+0x48>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	1862      	adds	r2, r4, r1
 8004902:	4293      	cmp	r3, r2
 8004904:	bf01      	itttt	eq
 8004906:	681a      	ldreq	r2, [r3, #0]
 8004908:	685b      	ldreq	r3, [r3, #4]
 800490a:	1852      	addeq	r2, r2, r1
 800490c:	6022      	streq	r2, [r4, #0]
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6004      	str	r4, [r0, #0]
 8004912:	e7ed      	b.n	80048f0 <_free_r+0x24>
 8004914:	461a      	mov	r2, r3
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	b10b      	cbz	r3, 800491e <_free_r+0x52>
 800491a:	42a3      	cmp	r3, r4
 800491c:	d9fa      	bls.n	8004914 <_free_r+0x48>
 800491e:	6811      	ldr	r1, [r2, #0]
 8004920:	1850      	adds	r0, r2, r1
 8004922:	42a0      	cmp	r0, r4
 8004924:	d10b      	bne.n	800493e <_free_r+0x72>
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	4401      	add	r1, r0
 800492a:	1850      	adds	r0, r2, r1
 800492c:	4283      	cmp	r3, r0
 800492e:	6011      	str	r1, [r2, #0]
 8004930:	d1de      	bne.n	80048f0 <_free_r+0x24>
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4401      	add	r1, r0
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	6053      	str	r3, [r2, #4]
 800493c:	e7d8      	b.n	80048f0 <_free_r+0x24>
 800493e:	d902      	bls.n	8004946 <_free_r+0x7a>
 8004940:	230c      	movs	r3, #12
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	e7d4      	b.n	80048f0 <_free_r+0x24>
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1821      	adds	r1, r4, r0
 800494a:	428b      	cmp	r3, r1
 800494c:	bf01      	itttt	eq
 800494e:	6819      	ldreq	r1, [r3, #0]
 8004950:	685b      	ldreq	r3, [r3, #4]
 8004952:	1809      	addeq	r1, r1, r0
 8004954:	6021      	streq	r1, [r4, #0]
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	6054      	str	r4, [r2, #4]
 800495a:	e7c9      	b.n	80048f0 <_free_r+0x24>
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	200001fc 	.word	0x200001fc

08004964 <_malloc_r>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	1ccd      	adds	r5, r1, #3
 8004968:	f025 0503 	bic.w	r5, r5, #3
 800496c:	3508      	adds	r5, #8
 800496e:	2d0c      	cmp	r5, #12
 8004970:	bf38      	it	cc
 8004972:	250c      	movcc	r5, #12
 8004974:	2d00      	cmp	r5, #0
 8004976:	4606      	mov	r6, r0
 8004978:	db01      	blt.n	800497e <_malloc_r+0x1a>
 800497a:	42a9      	cmp	r1, r5
 800497c:	d903      	bls.n	8004986 <_malloc_r+0x22>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	2000      	movs	r0, #0
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	f001 fb55 	bl	8006034 <__malloc_lock>
 800498a:	4921      	ldr	r1, [pc, #132]	; (8004a10 <_malloc_r+0xac>)
 800498c:	680a      	ldr	r2, [r1, #0]
 800498e:	4614      	mov	r4, r2
 8004990:	b99c      	cbnz	r4, 80049ba <_malloc_r+0x56>
 8004992:	4f20      	ldr	r7, [pc, #128]	; (8004a14 <_malloc_r+0xb0>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b923      	cbnz	r3, 80049a2 <_malloc_r+0x3e>
 8004998:	4621      	mov	r1, r4
 800499a:	4630      	mov	r0, r6
 800499c:	f000 fc9c 	bl	80052d8 <_sbrk_r>
 80049a0:	6038      	str	r0, [r7, #0]
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 fc97 	bl	80052d8 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d123      	bne.n	80049f6 <_malloc_r+0x92>
 80049ae:	230c      	movs	r3, #12
 80049b0:	4630      	mov	r0, r6
 80049b2:	6033      	str	r3, [r6, #0]
 80049b4:	f001 fb44 	bl	8006040 <__malloc_unlock>
 80049b8:	e7e3      	b.n	8004982 <_malloc_r+0x1e>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	1b5b      	subs	r3, r3, r5
 80049be:	d417      	bmi.n	80049f0 <_malloc_r+0x8c>
 80049c0:	2b0b      	cmp	r3, #11
 80049c2:	d903      	bls.n	80049cc <_malloc_r+0x68>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	441c      	add	r4, r3
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	e004      	b.n	80049d6 <_malloc_r+0x72>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	42a2      	cmp	r2, r4
 80049d0:	bf0c      	ite	eq
 80049d2:	600b      	streq	r3, [r1, #0]
 80049d4:	6053      	strne	r3, [r2, #4]
 80049d6:	4630      	mov	r0, r6
 80049d8:	f001 fb32 	bl	8006040 <__malloc_unlock>
 80049dc:	f104 000b 	add.w	r0, r4, #11
 80049e0:	1d23      	adds	r3, r4, #4
 80049e2:	f020 0007 	bic.w	r0, r0, #7
 80049e6:	1ac2      	subs	r2, r0, r3
 80049e8:	d0cc      	beq.n	8004984 <_malloc_r+0x20>
 80049ea:	1a1b      	subs	r3, r3, r0
 80049ec:	50a3      	str	r3, [r4, r2]
 80049ee:	e7c9      	b.n	8004984 <_malloc_r+0x20>
 80049f0:	4622      	mov	r2, r4
 80049f2:	6864      	ldr	r4, [r4, #4]
 80049f4:	e7cc      	b.n	8004990 <_malloc_r+0x2c>
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d0e3      	beq.n	80049c8 <_malloc_r+0x64>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 fc68 	bl	80052d8 <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1dd      	bne.n	80049c8 <_malloc_r+0x64>
 8004a0c:	e7cf      	b.n	80049ae <_malloc_r+0x4a>
 8004a0e:	bf00      	nop
 8004a10:	200001fc 	.word	0x200001fc
 8004a14:	20000200 	.word	0x20000200

08004a18 <__cvt>:
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1e:	461f      	mov	r7, r3
 8004a20:	bfbb      	ittet	lt
 8004a22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	461f      	movlt	r7, r3
 8004a28:	2300      	movge	r3, #0
 8004a2a:	232d      	movlt	r3, #45	; 0x2d
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	4614      	mov	r4, r2
 8004a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a34:	7013      	strb	r3, [r2, #0]
 8004a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a3c:	f023 0820 	bic.w	r8, r3, #32
 8004a40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a44:	d005      	beq.n	8004a52 <__cvt+0x3a>
 8004a46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a4a:	d100      	bne.n	8004a4e <__cvt+0x36>
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e000      	b.n	8004a54 <__cvt+0x3c>
 8004a52:	2303      	movs	r3, #3
 8004a54:	aa07      	add	r2, sp, #28
 8004a56:	9204      	str	r2, [sp, #16]
 8004a58:	aa06      	add	r2, sp, #24
 8004a5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a5e:	e9cd 3500 	strd	r3, r5, [sp]
 8004a62:	4622      	mov	r2, r4
 8004a64:	463b      	mov	r3, r7
 8004a66:	f000 fcd7 	bl	8005418 <_dtoa_r>
 8004a6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a6e:	4606      	mov	r6, r0
 8004a70:	d102      	bne.n	8004a78 <__cvt+0x60>
 8004a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a74:	07db      	lsls	r3, r3, #31
 8004a76:	d522      	bpl.n	8004abe <__cvt+0xa6>
 8004a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a7c:	eb06 0905 	add.w	r9, r6, r5
 8004a80:	d110      	bne.n	8004aa4 <__cvt+0x8c>
 8004a82:	7833      	ldrb	r3, [r6, #0]
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d10a      	bne.n	8004a9e <__cvt+0x86>
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f7fb ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8004a94:	b918      	cbnz	r0, 8004a9e <__cvt+0x86>
 8004a96:	f1c5 0501 	rsb	r5, r5, #1
 8004a9a:	f8ca 5000 	str.w	r5, [sl]
 8004a9e:	f8da 3000 	ldr.w	r3, [sl]
 8004aa2:	4499      	add	r9, r3
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab0:	b108      	cbz	r0, 8004ab6 <__cvt+0x9e>
 8004ab2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ab6:	2230      	movs	r2, #48	; 0x30
 8004ab8:	9b07      	ldr	r3, [sp, #28]
 8004aba:	454b      	cmp	r3, r9
 8004abc:	d307      	bcc.n	8004ace <__cvt+0xb6>
 8004abe:	4630      	mov	r0, r6
 8004ac0:	9b07      	ldr	r3, [sp, #28]
 8004ac2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ac4:	1b9b      	subs	r3, r3, r6
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	b008      	add	sp, #32
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	9107      	str	r1, [sp, #28]
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e7f0      	b.n	8004ab8 <__cvt+0xa0>

08004ad6 <__exponent>:
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ada:	2900      	cmp	r1, #0
 8004adc:	f803 2b02 	strb.w	r2, [r3], #2
 8004ae0:	bfb6      	itet	lt
 8004ae2:	222d      	movlt	r2, #45	; 0x2d
 8004ae4:	222b      	movge	r2, #43	; 0x2b
 8004ae6:	4249      	neglt	r1, r1
 8004ae8:	2909      	cmp	r1, #9
 8004aea:	7042      	strb	r2, [r0, #1]
 8004aec:	dd2b      	ble.n	8004b46 <__exponent+0x70>
 8004aee:	f10d 0407 	add.w	r4, sp, #7
 8004af2:	46a4      	mov	ip, r4
 8004af4:	270a      	movs	r7, #10
 8004af6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004afa:	460a      	mov	r2, r1
 8004afc:	46a6      	mov	lr, r4
 8004afe:	fb07 1516 	mls	r5, r7, r6, r1
 8004b02:	2a63      	cmp	r2, #99	; 0x63
 8004b04:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b08:	4631      	mov	r1, r6
 8004b0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b12:	dcf0      	bgt.n	8004af6 <__exponent+0x20>
 8004b14:	3130      	adds	r1, #48	; 0x30
 8004b16:	f1ae 0502 	sub.w	r5, lr, #2
 8004b1a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	1c44      	adds	r4, r0, #1
 8004b22:	4561      	cmp	r1, ip
 8004b24:	d30a      	bcc.n	8004b3c <__exponent+0x66>
 8004b26:	f10d 0209 	add.w	r2, sp, #9
 8004b2a:	eba2 020e 	sub.w	r2, r2, lr
 8004b2e:	4565      	cmp	r5, ip
 8004b30:	bf88      	it	hi
 8004b32:	2200      	movhi	r2, #0
 8004b34:	4413      	add	r3, r2
 8004b36:	1a18      	subs	r0, r3, r0
 8004b38:	b003      	add	sp, #12
 8004b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b40:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b44:	e7ed      	b.n	8004b22 <__exponent+0x4c>
 8004b46:	2330      	movs	r3, #48	; 0x30
 8004b48:	3130      	adds	r1, #48	; 0x30
 8004b4a:	7083      	strb	r3, [r0, #2]
 8004b4c:	70c1      	strb	r1, [r0, #3]
 8004b4e:	1d03      	adds	r3, r0, #4
 8004b50:	e7f1      	b.n	8004b36 <__exponent+0x60>
	...

08004b54 <_printf_float>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b091      	sub	sp, #68	; 0x44
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b60:	4616      	mov	r6, r2
 8004b62:	461f      	mov	r7, r3
 8004b64:	4605      	mov	r5, r0
 8004b66:	f001 fa45 	bl	8005ff4 <_localeconv_r>
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	f7fb faee 	bl	8000150 <strlen>
 8004b74:	2300      	movs	r3, #0
 8004b76:	930e      	str	r3, [sp, #56]	; 0x38
 8004b78:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7c:	900a      	str	r0, [sp, #40]	; 0x28
 8004b7e:	3307      	adds	r3, #7
 8004b80:	f023 0307 	bic.w	r3, r3, #7
 8004b84:	f103 0208 	add.w	r2, r3, #8
 8004b88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b90:	f8c8 2000 	str.w	r2, [r8]
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b9c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ba0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	4640      	mov	r0, r8
 8004bac:	4b9c      	ldr	r3, [pc, #624]	; (8004e20 <_printf_float+0x2cc>)
 8004bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bb0:	f7fb ff2c 	bl	8000a0c <__aeabi_dcmpun>
 8004bb4:	bb70      	cbnz	r0, 8004c14 <_printf_float+0xc0>
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4b98      	ldr	r3, [pc, #608]	; (8004e20 <_printf_float+0x2cc>)
 8004bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bc0:	f7fb ff06 	bl	80009d0 <__aeabi_dcmple>
 8004bc4:	bb30      	cbnz	r0, 8004c14 <_printf_float+0xc0>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4651      	mov	r1, sl
 8004bce:	f7fb fef5 	bl	80009bc <__aeabi_dcmplt>
 8004bd2:	b110      	cbz	r0, 8004bda <_printf_float+0x86>
 8004bd4:	232d      	movs	r3, #45	; 0x2d
 8004bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bda:	4b92      	ldr	r3, [pc, #584]	; (8004e24 <_printf_float+0x2d0>)
 8004bdc:	4892      	ldr	r0, [pc, #584]	; (8004e28 <_printf_float+0x2d4>)
 8004bde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004be2:	bf94      	ite	ls
 8004be4:	4698      	movls	r8, r3
 8004be6:	4680      	movhi	r8, r0
 8004be8:	2303      	movs	r3, #3
 8004bea:	f04f 0a00 	mov.w	sl, #0
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	f02b 0304 	bic.w	r3, fp, #4
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	4633      	mov	r3, r6
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	9700      	str	r7, [sp, #0]
 8004bfe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c00:	f000 f9d4 	bl	8004fac <_printf_common>
 8004c04:	3001      	adds	r0, #1
 8004c06:	f040 8090 	bne.w	8004d2a <_printf_float+0x1d6>
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	b011      	add	sp, #68	; 0x44
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	4642      	mov	r2, r8
 8004c16:	4653      	mov	r3, sl
 8004c18:	4640      	mov	r0, r8
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	f7fb fef6 	bl	8000a0c <__aeabi_dcmpun>
 8004c20:	b148      	cbz	r0, 8004c36 <_printf_float+0xe2>
 8004c22:	f1ba 0f00 	cmp.w	sl, #0
 8004c26:	bfb8      	it	lt
 8004c28:	232d      	movlt	r3, #45	; 0x2d
 8004c2a:	4880      	ldr	r0, [pc, #512]	; (8004e2c <_printf_float+0x2d8>)
 8004c2c:	bfb8      	it	lt
 8004c2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c32:	4b7f      	ldr	r3, [pc, #508]	; (8004e30 <_printf_float+0x2dc>)
 8004c34:	e7d3      	b.n	8004bde <_printf_float+0x8a>
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	d142      	bne.n	8004cc6 <_printf_float+0x172>
 8004c40:	2306      	movs	r3, #6
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	9206      	str	r2, [sp, #24]
 8004c48:	aa0e      	add	r2, sp, #56	; 0x38
 8004c4a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c4e:	aa0d      	add	r2, sp, #52	; 0x34
 8004c50:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c54:	9203      	str	r2, [sp, #12]
 8004c56:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	4642      	mov	r2, r8
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4628      	mov	r0, r5
 8004c68:	4653      	mov	r3, sl
 8004c6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c6c:	f7ff fed4 	bl	8004a18 <__cvt>
 8004c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c72:	4680      	mov	r8, r0
 8004c74:	2947      	cmp	r1, #71	; 0x47
 8004c76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c78:	d108      	bne.n	8004c8c <_printf_float+0x138>
 8004c7a:	1cc8      	adds	r0, r1, #3
 8004c7c:	db02      	blt.n	8004c84 <_printf_float+0x130>
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	4299      	cmp	r1, r3
 8004c82:	dd40      	ble.n	8004d06 <_printf_float+0x1b2>
 8004c84:	f1a9 0902 	sub.w	r9, r9, #2
 8004c88:	fa5f f989 	uxtb.w	r9, r9
 8004c8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c90:	d81f      	bhi.n	8004cd2 <_printf_float+0x17e>
 8004c92:	464a      	mov	r2, r9
 8004c94:	3901      	subs	r1, #1
 8004c96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c9a:	910d      	str	r1, [sp, #52]	; 0x34
 8004c9c:	f7ff ff1b 	bl	8004ad6 <__exponent>
 8004ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	1813      	adds	r3, r2, r0
 8004ca6:	2a01      	cmp	r2, #1
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	dc02      	bgt.n	8004cb2 <_printf_float+0x15e>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	07d2      	lsls	r2, r2, #31
 8004cb0:	d501      	bpl.n	8004cb6 <_printf_float+0x162>
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d09b      	beq.n	8004bf6 <_printf_float+0xa2>
 8004cbe:	232d      	movs	r3, #45	; 0x2d
 8004cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc4:	e797      	b.n	8004bf6 <_printf_float+0xa2>
 8004cc6:	2947      	cmp	r1, #71	; 0x47
 8004cc8:	d1bc      	bne.n	8004c44 <_printf_float+0xf0>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ba      	bne.n	8004c44 <_printf_float+0xf0>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e7b7      	b.n	8004c42 <_printf_float+0xee>
 8004cd2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004cd6:	d118      	bne.n	8004d0a <_printf_float+0x1b6>
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	dd0b      	ble.n	8004cf6 <_printf_float+0x1a2>
 8004cde:	6121      	str	r1, [r4, #16]
 8004ce0:	b913      	cbnz	r3, 8004ce8 <_printf_float+0x194>
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	07d0      	lsls	r0, r2, #31
 8004ce6:	d502      	bpl.n	8004cee <_printf_float+0x19a>
 8004ce8:	3301      	adds	r3, #1
 8004cea:	440b      	add	r3, r1
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	f04f 0a00 	mov.w	sl, #0
 8004cf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cf4:	e7df      	b.n	8004cb6 <_printf_float+0x162>
 8004cf6:	b913      	cbnz	r3, 8004cfe <_printf_float+0x1aa>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	07d2      	lsls	r2, r2, #31
 8004cfc:	d501      	bpl.n	8004d02 <_printf_float+0x1ae>
 8004cfe:	3302      	adds	r3, #2
 8004d00:	e7f4      	b.n	8004cec <_printf_float+0x198>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7f2      	b.n	8004cec <_printf_float+0x198>
 8004d06:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	db05      	blt.n	8004d1c <_printf_float+0x1c8>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	6121      	str	r1, [r4, #16]
 8004d14:	07d8      	lsls	r0, r3, #31
 8004d16:	d5ea      	bpl.n	8004cee <_printf_float+0x19a>
 8004d18:	1c4b      	adds	r3, r1, #1
 8004d1a:	e7e7      	b.n	8004cec <_printf_float+0x198>
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	bfcc      	ite	gt
 8004d20:	2201      	movgt	r2, #1
 8004d22:	f1c1 0202 	rsble	r2, r1, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	e7e0      	b.n	8004cec <_printf_float+0x198>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	055a      	lsls	r2, r3, #21
 8004d2e:	d407      	bmi.n	8004d40 <_printf_float+0x1ec>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	4642      	mov	r2, r8
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d12b      	bne.n	8004d96 <_printf_float+0x242>
 8004d3e:	e764      	b.n	8004c0a <_printf_float+0xb6>
 8004d40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d44:	f240 80dd 	bls.w	8004f02 <_printf_float+0x3ae>
 8004d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f7fb fe2a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d033      	beq.n	8004dc0 <_printf_float+0x26c>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <_printf_float+0x2e0>)
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f af51 	beq.w	8004c0a <_printf_float+0xb6>
 8004d68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	db02      	blt.n	8004d76 <_printf_float+0x222>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07d8      	lsls	r0, r3, #31
 8004d74:	d50f      	bpl.n	8004d96 <_printf_float+0x242>
 8004d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f af42 	beq.w	8004c0a <_printf_float+0xb6>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	f104 091a 	add.w	r9, r4, #26
 8004d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d90:	3b01      	subs	r3, #1
 8004d92:	4543      	cmp	r3, r8
 8004d94:	dc09      	bgt.n	8004daa <_printf_float+0x256>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	079b      	lsls	r3, r3, #30
 8004d9a:	f100 8102 	bmi.w	8004fa2 <_printf_float+0x44e>
 8004d9e:	68e0      	ldr	r0, [r4, #12]
 8004da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004da2:	4298      	cmp	r0, r3
 8004da4:	bfb8      	it	lt
 8004da6:	4618      	movlt	r0, r3
 8004da8:	e731      	b.n	8004c0e <_printf_float+0xba>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f af28 	beq.w	8004c0a <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7e6      	b.n	8004d8e <_printf_float+0x23a>
 8004dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	dc38      	bgt.n	8004e38 <_printf_float+0x2e4>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <_printf_float+0x2e0>)
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af1a 	beq.w	8004c0a <_printf_float+0xb6>
 8004dd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	d102      	bne.n	8004de4 <_printf_float+0x290>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	07d9      	lsls	r1, r3, #31
 8004de2:	d5d8      	bpl.n	8004d96 <_printf_float+0x242>
 8004de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f af0b 	beq.w	8004c0a <_printf_float+0xb6>
 8004df4:	f04f 0900 	mov.w	r9, #0
 8004df8:	f104 0a1a 	add.w	sl, r4, #26
 8004dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dfe:	425b      	negs	r3, r3
 8004e00:	454b      	cmp	r3, r9
 8004e02:	dc01      	bgt.n	8004e08 <_printf_float+0x2b4>
 8004e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e06:	e794      	b.n	8004d32 <_printf_float+0x1de>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f aef9 	beq.w	8004c0a <_printf_float+0xb6>
 8004e18:	f109 0901 	add.w	r9, r9, #1
 8004e1c:	e7ee      	b.n	8004dfc <_printf_float+0x2a8>
 8004e1e:	bf00      	nop
 8004e20:	7fefffff 	.word	0x7fefffff
 8004e24:	080074bc 	.word	0x080074bc
 8004e28:	080074c0 	.word	0x080074c0
 8004e2c:	080074c8 	.word	0x080074c8
 8004e30:	080074c4 	.word	0x080074c4
 8004e34:	080074cc 	.word	0x080074cc
 8004e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bfa8      	it	ge
 8004e40:	461a      	movge	r2, r3
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	4691      	mov	r9, r2
 8004e46:	dc37      	bgt.n	8004eb8 <_printf_float+0x364>
 8004e48:	f04f 0b00 	mov.w	fp, #0
 8004e4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e50:	f104 021a 	add.w	r2, r4, #26
 8004e54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e58:	ebaa 0309 	sub.w	r3, sl, r9
 8004e5c:	455b      	cmp	r3, fp
 8004e5e:	dc33      	bgt.n	8004ec8 <_printf_float+0x374>
 8004e60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e64:	429a      	cmp	r2, r3
 8004e66:	db3b      	blt.n	8004ee0 <_printf_float+0x38c>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	07da      	lsls	r2, r3, #31
 8004e6c:	d438      	bmi.n	8004ee0 <_printf_float+0x38c>
 8004e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e72:	eba2 030a 	sub.w	r3, r2, sl
 8004e76:	eba2 0901 	sub.w	r9, r2, r1
 8004e7a:	4599      	cmp	r9, r3
 8004e7c:	bfa8      	it	ge
 8004e7e:	4699      	movge	r9, r3
 8004e80:	f1b9 0f00 	cmp.w	r9, #0
 8004e84:	dc34      	bgt.n	8004ef0 <_printf_float+0x39c>
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e8e:	f104 0a1a 	add.w	sl, r4, #26
 8004e92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	eba3 0309 	sub.w	r3, r3, r9
 8004e9c:	4543      	cmp	r3, r8
 8004e9e:	f77f af7a 	ble.w	8004d96 <_printf_float+0x242>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f aeac 	beq.w	8004c0a <_printf_float+0xb6>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	e7ec      	b.n	8004e92 <_printf_float+0x33e>
 8004eb8:	4613      	mov	r3, r2
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d1c0      	bne.n	8004e48 <_printf_float+0x2f4>
 8004ec6:	e6a0      	b.n	8004c0a <_printf_float+0xb6>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f ae99 	beq.w	8004c0a <_printf_float+0xb6>
 8004ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004eda:	f10b 0b01 	add.w	fp, fp, #1
 8004ede:	e7b9      	b.n	8004e54 <_printf_float+0x300>
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b8      	blx	r7
 8004eea:	3001      	adds	r0, #1
 8004eec:	d1bf      	bne.n	8004e6e <_printf_float+0x31a>
 8004eee:	e68c      	b.n	8004c0a <_printf_float+0xb6>
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	eb08 020a 	add.w	r2, r8, sl
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	d1c2      	bne.n	8004e86 <_printf_float+0x332>
 8004f00:	e683      	b.n	8004c0a <_printf_float+0xb6>
 8004f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f04:	2a01      	cmp	r2, #1
 8004f06:	dc01      	bgt.n	8004f0c <_printf_float+0x3b8>
 8004f08:	07db      	lsls	r3, r3, #31
 8004f0a:	d537      	bpl.n	8004f7c <_printf_float+0x428>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4642      	mov	r2, r8
 8004f10:	4631      	mov	r1, r6
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f ae77 	beq.w	8004c0a <_printf_float+0xb6>
 8004f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f ae6f 	beq.w	8004c0a <_printf_float+0xb6>
 8004f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	f7fb fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8004f38:	b9d8      	cbnz	r0, 8004f72 <_printf_float+0x41e>
 8004f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f3c:	f108 0201 	add.w	r2, r8, #1
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d10e      	bne.n	8004f6a <_printf_float+0x416>
 8004f4c:	e65d      	b.n	8004c0a <_printf_float+0xb6>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	464a      	mov	r2, r9
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f ae56 	beq.w	8004c0a <_printf_float+0xb6>
 8004f5e:	f108 0801 	add.w	r8, r8, #1
 8004f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f64:	3b01      	subs	r3, #1
 8004f66:	4543      	cmp	r3, r8
 8004f68:	dcf1      	bgt.n	8004f4e <_printf_float+0x3fa>
 8004f6a:	4653      	mov	r3, sl
 8004f6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f70:	e6e0      	b.n	8004d34 <_printf_float+0x1e0>
 8004f72:	f04f 0800 	mov.w	r8, #0
 8004f76:	f104 091a 	add.w	r9, r4, #26
 8004f7a:	e7f2      	b.n	8004f62 <_printf_float+0x40e>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4642      	mov	r2, r8
 8004f80:	e7df      	b.n	8004f42 <_printf_float+0x3ee>
 8004f82:	2301      	movs	r3, #1
 8004f84:	464a      	mov	r2, r9
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f43f ae3c 	beq.w	8004c0a <_printf_float+0xb6>
 8004f92:	f108 0801 	add.w	r8, r8, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	4543      	cmp	r3, r8
 8004f9e:	dcf0      	bgt.n	8004f82 <_printf_float+0x42e>
 8004fa0:	e6fd      	b.n	8004d9e <_printf_float+0x24a>
 8004fa2:	f04f 0800 	mov.w	r8, #0
 8004fa6:	f104 0919 	add.w	r9, r4, #25
 8004faa:	e7f4      	b.n	8004f96 <_printf_float+0x442>

08004fac <_printf_common>:
 8004fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	4699      	mov	r9, r3
 8004fb4:	688a      	ldr	r2, [r1, #8]
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	4607      	mov	r7, r0
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	bfb8      	it	lt
 8004fbe:	4613      	movlt	r3, r2
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fcc:	b10a      	cbz	r2, 8004fd2 <_printf_common+0x26>
 8004fce:	3301      	adds	r3, #1
 8004fd0:	6033      	str	r3, [r6, #0]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	0699      	lsls	r1, r3, #26
 8004fd6:	bf42      	ittt	mi
 8004fd8:	6833      	ldrmi	r3, [r6, #0]
 8004fda:	3302      	addmi	r3, #2
 8004fdc:	6033      	strmi	r3, [r6, #0]
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	f015 0506 	ands.w	r5, r5, #6
 8004fe4:	d106      	bne.n	8004ff4 <_printf_common+0x48>
 8004fe6:	f104 0a19 	add.w	sl, r4, #25
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	6832      	ldr	r2, [r6, #0]
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dc28      	bgt.n	8005046 <_printf_common+0x9a>
 8004ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ff8:	1e13      	subs	r3, r2, #0
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	bf18      	it	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	0692      	lsls	r2, r2, #26
 8005002:	d42d      	bmi.n	8005060 <_printf_common+0xb4>
 8005004:	4649      	mov	r1, r9
 8005006:	4638      	mov	r0, r7
 8005008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d020      	beq.n	8005054 <_printf_common+0xa8>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	68e5      	ldr	r5, [r4, #12]
 8005016:	f003 0306 	and.w	r3, r3, #6
 800501a:	2b04      	cmp	r3, #4
 800501c:	bf18      	it	ne
 800501e:	2500      	movne	r5, #0
 8005020:	6832      	ldr	r2, [r6, #0]
 8005022:	f04f 0600 	mov.w	r6, #0
 8005026:	68a3      	ldr	r3, [r4, #8]
 8005028:	bf08      	it	eq
 800502a:	1aad      	subeq	r5, r5, r2
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	bf08      	it	eq
 8005030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005034:	4293      	cmp	r3, r2
 8005036:	bfc4      	itt	gt
 8005038:	1a9b      	subgt	r3, r3, r2
 800503a:	18ed      	addgt	r5, r5, r3
 800503c:	341a      	adds	r4, #26
 800503e:	42b5      	cmp	r5, r6
 8005040:	d11a      	bne.n	8005078 <_printf_common+0xcc>
 8005042:	2000      	movs	r0, #0
 8005044:	e008      	b.n	8005058 <_printf_common+0xac>
 8005046:	2301      	movs	r3, #1
 8005048:	4652      	mov	r2, sl
 800504a:	4649      	mov	r1, r9
 800504c:	4638      	mov	r0, r7
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d103      	bne.n	800505c <_printf_common+0xb0>
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	3501      	adds	r5, #1
 800505e:	e7c4      	b.n	8004fea <_printf_common+0x3e>
 8005060:	2030      	movs	r0, #48	; 0x30
 8005062:	18e1      	adds	r1, r4, r3
 8005064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800506e:	4422      	add	r2, r4
 8005070:	3302      	adds	r3, #2
 8005072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005076:	e7c5      	b.n	8005004 <_printf_common+0x58>
 8005078:	2301      	movs	r3, #1
 800507a:	4622      	mov	r2, r4
 800507c:	4649      	mov	r1, r9
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d0e6      	beq.n	8005054 <_printf_common+0xa8>
 8005086:	3601      	adds	r6, #1
 8005088:	e7d9      	b.n	800503e <_printf_common+0x92>
	...

0800508c <_printf_i>:
 800508c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	460c      	mov	r4, r1
 8005092:	7e27      	ldrb	r7, [r4, #24]
 8005094:	4691      	mov	r9, r2
 8005096:	2f78      	cmp	r7, #120	; 0x78
 8005098:	4680      	mov	r8, r0
 800509a:	469a      	mov	sl, r3
 800509c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800509e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a2:	d807      	bhi.n	80050b4 <_printf_i+0x28>
 80050a4:	2f62      	cmp	r7, #98	; 0x62
 80050a6:	d80a      	bhi.n	80050be <_printf_i+0x32>
 80050a8:	2f00      	cmp	r7, #0
 80050aa:	f000 80d9 	beq.w	8005260 <_printf_i+0x1d4>
 80050ae:	2f58      	cmp	r7, #88	; 0x58
 80050b0:	f000 80a4 	beq.w	80051fc <_printf_i+0x170>
 80050b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050bc:	e03a      	b.n	8005134 <_printf_i+0xa8>
 80050be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050c2:	2b15      	cmp	r3, #21
 80050c4:	d8f6      	bhi.n	80050b4 <_printf_i+0x28>
 80050c6:	a001      	add	r0, pc, #4	; (adr r0, 80050cc <_printf_i+0x40>)
 80050c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005139 	.word	0x08005139
 80050d4:	080050b5 	.word	0x080050b5
 80050d8:	080050b5 	.word	0x080050b5
 80050dc:	080050b5 	.word	0x080050b5
 80050e0:	080050b5 	.word	0x080050b5
 80050e4:	08005139 	.word	0x08005139
 80050e8:	080050b5 	.word	0x080050b5
 80050ec:	080050b5 	.word	0x080050b5
 80050f0:	080050b5 	.word	0x080050b5
 80050f4:	080050b5 	.word	0x080050b5
 80050f8:	08005247 	.word	0x08005247
 80050fc:	08005169 	.word	0x08005169
 8005100:	08005229 	.word	0x08005229
 8005104:	080050b5 	.word	0x080050b5
 8005108:	080050b5 	.word	0x080050b5
 800510c:	08005269 	.word	0x08005269
 8005110:	080050b5 	.word	0x080050b5
 8005114:	08005169 	.word	0x08005169
 8005118:	080050b5 	.word	0x080050b5
 800511c:	080050b5 	.word	0x080050b5
 8005120:	08005231 	.word	0x08005231
 8005124:	680b      	ldr	r3, [r1, #0]
 8005126:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	600a      	str	r2, [r1, #0]
 8005130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005134:	2301      	movs	r3, #1
 8005136:	e0a4      	b.n	8005282 <_printf_i+0x1f6>
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	6808      	ldr	r0, [r1, #0]
 800513c:	062e      	lsls	r6, r5, #24
 800513e:	f100 0304 	add.w	r3, r0, #4
 8005142:	d50a      	bpl.n	800515a <_printf_i+0xce>
 8005144:	6805      	ldr	r5, [r0, #0]
 8005146:	600b      	str	r3, [r1, #0]
 8005148:	2d00      	cmp	r5, #0
 800514a:	da03      	bge.n	8005154 <_printf_i+0xc8>
 800514c:	232d      	movs	r3, #45	; 0x2d
 800514e:	426d      	negs	r5, r5
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005154:	230a      	movs	r3, #10
 8005156:	485e      	ldr	r0, [pc, #376]	; (80052d0 <_printf_i+0x244>)
 8005158:	e019      	b.n	800518e <_printf_i+0x102>
 800515a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800515e:	6805      	ldr	r5, [r0, #0]
 8005160:	600b      	str	r3, [r1, #0]
 8005162:	bf18      	it	ne
 8005164:	b22d      	sxthne	r5, r5
 8005166:	e7ef      	b.n	8005148 <_printf_i+0xbc>
 8005168:	680b      	ldr	r3, [r1, #0]
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	1d18      	adds	r0, r3, #4
 800516e:	6008      	str	r0, [r1, #0]
 8005170:	0628      	lsls	r0, r5, #24
 8005172:	d501      	bpl.n	8005178 <_printf_i+0xec>
 8005174:	681d      	ldr	r5, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0xf2>
 8005178:	0669      	lsls	r1, r5, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0xe8>
 800517c:	881d      	ldrh	r5, [r3, #0]
 800517e:	2f6f      	cmp	r7, #111	; 0x6f
 8005180:	bf0c      	ite	eq
 8005182:	2308      	moveq	r3, #8
 8005184:	230a      	movne	r3, #10
 8005186:	4852      	ldr	r0, [pc, #328]	; (80052d0 <_printf_i+0x244>)
 8005188:	2100      	movs	r1, #0
 800518a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800518e:	6866      	ldr	r6, [r4, #4]
 8005190:	2e00      	cmp	r6, #0
 8005192:	bfa8      	it	ge
 8005194:	6821      	ldrge	r1, [r4, #0]
 8005196:	60a6      	str	r6, [r4, #8]
 8005198:	bfa4      	itt	ge
 800519a:	f021 0104 	bicge.w	r1, r1, #4
 800519e:	6021      	strge	r1, [r4, #0]
 80051a0:	b90d      	cbnz	r5, 80051a6 <_printf_i+0x11a>
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	d04d      	beq.n	8005242 <_printf_i+0x1b6>
 80051a6:	4616      	mov	r6, r2
 80051a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ac:	fb03 5711 	mls	r7, r3, r1, r5
 80051b0:	5dc7      	ldrb	r7, [r0, r7]
 80051b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051b6:	462f      	mov	r7, r5
 80051b8:	42bb      	cmp	r3, r7
 80051ba:	460d      	mov	r5, r1
 80051bc:	d9f4      	bls.n	80051a8 <_printf_i+0x11c>
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d10b      	bne.n	80051da <_printf_i+0x14e>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	07df      	lsls	r7, r3, #31
 80051c6:	d508      	bpl.n	80051da <_printf_i+0x14e>
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	6861      	ldr	r1, [r4, #4]
 80051cc:	4299      	cmp	r1, r3
 80051ce:	bfde      	ittt	le
 80051d0:	2330      	movle	r3, #48	; 0x30
 80051d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051da:	1b92      	subs	r2, r2, r6
 80051dc:	6122      	str	r2, [r4, #16]
 80051de:	464b      	mov	r3, r9
 80051e0:	4621      	mov	r1, r4
 80051e2:	4640      	mov	r0, r8
 80051e4:	f8cd a000 	str.w	sl, [sp]
 80051e8:	aa03      	add	r2, sp, #12
 80051ea:	f7ff fedf 	bl	8004fac <_printf_common>
 80051ee:	3001      	adds	r0, #1
 80051f0:	d14c      	bne.n	800528c <_printf_i+0x200>
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	b004      	add	sp, #16
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	4834      	ldr	r0, [pc, #208]	; (80052d0 <_printf_i+0x244>)
 80051fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005202:	680e      	ldr	r6, [r1, #0]
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f856 5b04 	ldr.w	r5, [r6], #4
 800520a:	061f      	lsls	r7, r3, #24
 800520c:	600e      	str	r6, [r1, #0]
 800520e:	d514      	bpl.n	800523a <_printf_i+0x1ae>
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	bf44      	itt	mi
 8005214:	f043 0320 	orrmi.w	r3, r3, #32
 8005218:	6023      	strmi	r3, [r4, #0]
 800521a:	b91d      	cbnz	r5, 8005224 <_printf_i+0x198>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f023 0320 	bic.w	r3, r3, #32
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	2310      	movs	r3, #16
 8005226:	e7af      	b.n	8005188 <_printf_i+0xfc>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	2378      	movs	r3, #120	; 0x78
 8005232:	4828      	ldr	r0, [pc, #160]	; (80052d4 <_printf_i+0x248>)
 8005234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005238:	e7e3      	b.n	8005202 <_printf_i+0x176>
 800523a:	065e      	lsls	r6, r3, #25
 800523c:	bf48      	it	mi
 800523e:	b2ad      	uxthmi	r5, r5
 8005240:	e7e6      	b.n	8005210 <_printf_i+0x184>
 8005242:	4616      	mov	r6, r2
 8005244:	e7bb      	b.n	80051be <_printf_i+0x132>
 8005246:	680b      	ldr	r3, [r1, #0]
 8005248:	6826      	ldr	r6, [r4, #0]
 800524a:	1d1d      	adds	r5, r3, #4
 800524c:	6960      	ldr	r0, [r4, #20]
 800524e:	600d      	str	r5, [r1, #0]
 8005250:	0635      	lsls	r5, r6, #24
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	d501      	bpl.n	800525a <_printf_i+0x1ce>
 8005256:	6018      	str	r0, [r3, #0]
 8005258:	e002      	b.n	8005260 <_printf_i+0x1d4>
 800525a:	0671      	lsls	r1, r6, #25
 800525c:	d5fb      	bpl.n	8005256 <_printf_i+0x1ca>
 800525e:	8018      	strh	r0, [r3, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	4616      	mov	r6, r2
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	e7ba      	b.n	80051de <_printf_i+0x152>
 8005268:	680b      	ldr	r3, [r1, #0]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	600a      	str	r2, [r1, #0]
 800526e:	681e      	ldr	r6, [r3, #0]
 8005270:	2100      	movs	r1, #0
 8005272:	4630      	mov	r0, r6
 8005274:	6862      	ldr	r2, [r4, #4]
 8005276:	f000 fec1 	bl	8005ffc <memchr>
 800527a:	b108      	cbz	r0, 8005280 <_printf_i+0x1f4>
 800527c:	1b80      	subs	r0, r0, r6
 800527e:	6060      	str	r0, [r4, #4]
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	2300      	movs	r3, #0
 8005286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800528a:	e7a8      	b.n	80051de <_printf_i+0x152>
 800528c:	4632      	mov	r2, r6
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	47d0      	blx	sl
 8005296:	3001      	adds	r0, #1
 8005298:	d0ab      	beq.n	80051f2 <_printf_i+0x166>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	079b      	lsls	r3, r3, #30
 800529e:	d413      	bmi.n	80052c8 <_printf_i+0x23c>
 80052a0:	68e0      	ldr	r0, [r4, #12]
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	4298      	cmp	r0, r3
 80052a6:	bfb8      	it	lt
 80052a8:	4618      	movlt	r0, r3
 80052aa:	e7a4      	b.n	80051f6 <_printf_i+0x16a>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4632      	mov	r2, r6
 80052b0:	4649      	mov	r1, r9
 80052b2:	4640      	mov	r0, r8
 80052b4:	47d0      	blx	sl
 80052b6:	3001      	adds	r0, #1
 80052b8:	d09b      	beq.n	80051f2 <_printf_i+0x166>
 80052ba:	3501      	adds	r5, #1
 80052bc:	68e3      	ldr	r3, [r4, #12]
 80052be:	9903      	ldr	r1, [sp, #12]
 80052c0:	1a5b      	subs	r3, r3, r1
 80052c2:	42ab      	cmp	r3, r5
 80052c4:	dcf2      	bgt.n	80052ac <_printf_i+0x220>
 80052c6:	e7eb      	b.n	80052a0 <_printf_i+0x214>
 80052c8:	2500      	movs	r5, #0
 80052ca:	f104 0619 	add.w	r6, r4, #25
 80052ce:	e7f5      	b.n	80052bc <_printf_i+0x230>
 80052d0:	080074ce 	.word	0x080074ce
 80052d4:	080074df 	.word	0x080074df

080052d8 <_sbrk_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	2300      	movs	r3, #0
 80052dc:	4d05      	ldr	r5, [pc, #20]	; (80052f4 <_sbrk_r+0x1c>)
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fc fb48 	bl	8001978 <_sbrk>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_sbrk_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_sbrk_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	2000028c 	.word	0x2000028c

080052f8 <quorem>:
 80052f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	6903      	ldr	r3, [r0, #16]
 80052fe:	690c      	ldr	r4, [r1, #16]
 8005300:	4607      	mov	r7, r0
 8005302:	42a3      	cmp	r3, r4
 8005304:	f2c0 8083 	blt.w	800540e <quorem+0x116>
 8005308:	3c01      	subs	r4, #1
 800530a:	f100 0514 	add.w	r5, r0, #20
 800530e:	f101 0814 	add.w	r8, r1, #20
 8005312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800531c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005320:	3301      	adds	r3, #1
 8005322:	429a      	cmp	r2, r3
 8005324:	fbb2 f6f3 	udiv	r6, r2, r3
 8005328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800532c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005330:	d332      	bcc.n	8005398 <quorem+0xa0>
 8005332:	f04f 0e00 	mov.w	lr, #0
 8005336:	4640      	mov	r0, r8
 8005338:	46ac      	mov	ip, r5
 800533a:	46f2      	mov	sl, lr
 800533c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005340:	b293      	uxth	r3, r2
 8005342:	fb06 e303 	mla	r3, r6, r3, lr
 8005346:	0c12      	lsrs	r2, r2, #16
 8005348:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800534c:	fb06 e202 	mla	r2, r6, r2, lr
 8005350:	b29b      	uxth	r3, r3
 8005352:	ebaa 0303 	sub.w	r3, sl, r3
 8005356:	f8dc a000 	ldr.w	sl, [ip]
 800535a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800535e:	fa1f fa8a 	uxth.w	sl, sl
 8005362:	4453      	add	r3, sl
 8005364:	fa1f fa82 	uxth.w	sl, r2
 8005368:	f8dc 2000 	ldr.w	r2, [ip]
 800536c:	4581      	cmp	r9, r0
 800536e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005372:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800537c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005380:	f84c 3b04 	str.w	r3, [ip], #4
 8005384:	d2da      	bcs.n	800533c <quorem+0x44>
 8005386:	f855 300b 	ldr.w	r3, [r5, fp]
 800538a:	b92b      	cbnz	r3, 8005398 <quorem+0xa0>
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	3b04      	subs	r3, #4
 8005390:	429d      	cmp	r5, r3
 8005392:	461a      	mov	r2, r3
 8005394:	d32f      	bcc.n	80053f6 <quorem+0xfe>
 8005396:	613c      	str	r4, [r7, #16]
 8005398:	4638      	mov	r0, r7
 800539a:	f001 f8d1 	bl	8006540 <__mcmp>
 800539e:	2800      	cmp	r0, #0
 80053a0:	db25      	blt.n	80053ee <quorem+0xf6>
 80053a2:	4628      	mov	r0, r5
 80053a4:	f04f 0c00 	mov.w	ip, #0
 80053a8:	3601      	adds	r6, #1
 80053aa:	f858 1b04 	ldr.w	r1, [r8], #4
 80053ae:	f8d0 e000 	ldr.w	lr, [r0]
 80053b2:	b28b      	uxth	r3, r1
 80053b4:	ebac 0303 	sub.w	r3, ip, r3
 80053b8:	fa1f f28e 	uxth.w	r2, lr
 80053bc:	4413      	add	r3, r2
 80053be:	0c0a      	lsrs	r2, r1, #16
 80053c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ce:	45c1      	cmp	r9, r8
 80053d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053d4:	f840 3b04 	str.w	r3, [r0], #4
 80053d8:	d2e7      	bcs.n	80053aa <quorem+0xb2>
 80053da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053e2:	b922      	cbnz	r2, 80053ee <quorem+0xf6>
 80053e4:	3b04      	subs	r3, #4
 80053e6:	429d      	cmp	r5, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	d30a      	bcc.n	8005402 <quorem+0x10a>
 80053ec:	613c      	str	r4, [r7, #16]
 80053ee:	4630      	mov	r0, r6
 80053f0:	b003      	add	sp, #12
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d1cb      	bne.n	8005396 <quorem+0x9e>
 80053fe:	3c01      	subs	r4, #1
 8005400:	e7c6      	b.n	8005390 <quorem+0x98>
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	3b04      	subs	r3, #4
 8005406:	2a00      	cmp	r2, #0
 8005408:	d1f0      	bne.n	80053ec <quorem+0xf4>
 800540a:	3c01      	subs	r4, #1
 800540c:	e7eb      	b.n	80053e6 <quorem+0xee>
 800540e:	2000      	movs	r0, #0
 8005410:	e7ee      	b.n	80053f0 <quorem+0xf8>
 8005412:	0000      	movs	r0, r0
 8005414:	0000      	movs	r0, r0
	...

08005418 <_dtoa_r>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	4616      	mov	r6, r2
 800541e:	461f      	mov	r7, r3
 8005420:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005422:	b099      	sub	sp, #100	; 0x64
 8005424:	4605      	mov	r5, r0
 8005426:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800542a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800542e:	b974      	cbnz	r4, 800544e <_dtoa_r+0x36>
 8005430:	2010      	movs	r0, #16
 8005432:	f7ff fa3b 	bl	80048ac <malloc>
 8005436:	4602      	mov	r2, r0
 8005438:	6268      	str	r0, [r5, #36]	; 0x24
 800543a:	b920      	cbnz	r0, 8005446 <_dtoa_r+0x2e>
 800543c:	21ea      	movs	r1, #234	; 0xea
 800543e:	4bae      	ldr	r3, [pc, #696]	; (80056f8 <_dtoa_r+0x2e0>)
 8005440:	48ae      	ldr	r0, [pc, #696]	; (80056fc <_dtoa_r+0x2e4>)
 8005442:	f001 f993 	bl	800676c <__assert_func>
 8005446:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800544a:	6004      	str	r4, [r0, #0]
 800544c:	60c4      	str	r4, [r0, #12]
 800544e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	b151      	cbz	r1, 800546a <_dtoa_r+0x52>
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	2301      	movs	r3, #1
 8005458:	4093      	lsls	r3, r2
 800545a:	604a      	str	r2, [r1, #4]
 800545c:	608b      	str	r3, [r1, #8]
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fe34 	bl	80060cc <_Bfree>
 8005464:	2200      	movs	r2, #0
 8005466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	1e3b      	subs	r3, r7, #0
 800546c:	bfaf      	iteee	ge
 800546e:	2300      	movge	r3, #0
 8005470:	2201      	movlt	r2, #1
 8005472:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005476:	9305      	strlt	r3, [sp, #20]
 8005478:	bfa8      	it	ge
 800547a:	f8c8 3000 	strge.w	r3, [r8]
 800547e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005482:	4b9f      	ldr	r3, [pc, #636]	; (8005700 <_dtoa_r+0x2e8>)
 8005484:	bfb8      	it	lt
 8005486:	f8c8 2000 	strlt.w	r2, [r8]
 800548a:	ea33 0309 	bics.w	r3, r3, r9
 800548e:	d119      	bne.n	80054c4 <_dtoa_r+0xac>
 8005490:	f242 730f 	movw	r3, #9999	; 0x270f
 8005494:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800549c:	4333      	orrs	r3, r6
 800549e:	f000 8580 	beq.w	8005fa2 <_dtoa_r+0xb8a>
 80054a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054a4:	b953      	cbnz	r3, 80054bc <_dtoa_r+0xa4>
 80054a6:	4b97      	ldr	r3, [pc, #604]	; (8005704 <_dtoa_r+0x2ec>)
 80054a8:	e022      	b.n	80054f0 <_dtoa_r+0xd8>
 80054aa:	4b97      	ldr	r3, [pc, #604]	; (8005708 <_dtoa_r+0x2f0>)
 80054ac:	9308      	str	r3, [sp, #32]
 80054ae:	3308      	adds	r3, #8
 80054b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	9808      	ldr	r0, [sp, #32]
 80054b6:	b019      	add	sp, #100	; 0x64
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	4b91      	ldr	r3, [pc, #580]	; (8005704 <_dtoa_r+0x2ec>)
 80054be:	9308      	str	r3, [sp, #32]
 80054c0:	3303      	adds	r3, #3
 80054c2:	e7f5      	b.n	80054b0 <_dtoa_r+0x98>
 80054c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	f7fb fa68 	bl	80009a8 <__aeabi_dcmpeq>
 80054d8:	4680      	mov	r8, r0
 80054da:	b158      	cbz	r0, 80054f4 <_dtoa_r+0xdc>
 80054dc:	2301      	movs	r3, #1
 80054de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8559 	beq.w	8005f9c <_dtoa_r+0xb84>
 80054ea:	4888      	ldr	r0, [pc, #544]	; (800570c <_dtoa_r+0x2f4>)
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	1e43      	subs	r3, r0, #1
 80054f0:	9308      	str	r3, [sp, #32]
 80054f2:	e7df      	b.n	80054b4 <_dtoa_r+0x9c>
 80054f4:	ab16      	add	r3, sp, #88	; 0x58
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	ab17      	add	r3, sp, #92	; 0x5c
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	4628      	mov	r0, r5
 80054fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005502:	f001 f8c9 	bl	8006698 <__d2b>
 8005506:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800550a:	4682      	mov	sl, r0
 800550c:	2c00      	cmp	r4, #0
 800550e:	d07e      	beq.n	800560e <_dtoa_r+0x1f6>
 8005510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005516:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800551a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800551e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005522:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005526:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800552a:	2200      	movs	r2, #0
 800552c:	4b78      	ldr	r3, [pc, #480]	; (8005710 <_dtoa_r+0x2f8>)
 800552e:	f7fa fe1b 	bl	8000168 <__aeabi_dsub>
 8005532:	a36b      	add	r3, pc, #428	; (adr r3, 80056e0 <_dtoa_r+0x2c8>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f7fa ffce 	bl	80004d8 <__aeabi_dmul>
 800553c:	a36a      	add	r3, pc, #424	; (adr r3, 80056e8 <_dtoa_r+0x2d0>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f7fa fe13 	bl	800016c <__adddf3>
 8005546:	4606      	mov	r6, r0
 8005548:	4620      	mov	r0, r4
 800554a:	460f      	mov	r7, r1
 800554c:	f7fa ff5a 	bl	8000404 <__aeabi_i2d>
 8005550:	a367      	add	r3, pc, #412	; (adr r3, 80056f0 <_dtoa_r+0x2d8>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa ffbf 	bl	80004d8 <__aeabi_dmul>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fa fe03 	bl	800016c <__adddf3>
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	f7fb fa65 	bl	8000a38 <__aeabi_d2iz>
 800556e:	2200      	movs	r2, #0
 8005570:	4681      	mov	r9, r0
 8005572:	2300      	movs	r3, #0
 8005574:	4630      	mov	r0, r6
 8005576:	4639      	mov	r1, r7
 8005578:	f7fb fa20 	bl	80009bc <__aeabi_dcmplt>
 800557c:	b148      	cbz	r0, 8005592 <_dtoa_r+0x17a>
 800557e:	4648      	mov	r0, r9
 8005580:	f7fa ff40 	bl	8000404 <__aeabi_i2d>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	f7fb fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800558c:	b908      	cbnz	r0, 8005592 <_dtoa_r+0x17a>
 800558e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005592:	f1b9 0f16 	cmp.w	r9, #22
 8005596:	d857      	bhi.n	8005648 <_dtoa_r+0x230>
 8005598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800559c:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <_dtoa_r+0x2fc>)
 800559e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fb fa09 	bl	80009bc <__aeabi_dcmplt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d04e      	beq.n	800564c <_dtoa_r+0x234>
 80055ae:	2300      	movs	r3, #0
 80055b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80055b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055b8:	1b1c      	subs	r4, r3, r4
 80055ba:	1e63      	subs	r3, r4, #1
 80055bc:	9309      	str	r3, [sp, #36]	; 0x24
 80055be:	bf49      	itett	mi
 80055c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055c4:	2300      	movpl	r3, #0
 80055c6:	9306      	strmi	r3, [sp, #24]
 80055c8:	2300      	movmi	r3, #0
 80055ca:	bf54      	ite	pl
 80055cc:	9306      	strpl	r3, [sp, #24]
 80055ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	db3c      	blt.n	8005650 <_dtoa_r+0x238>
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80055dc:	444b      	add	r3, r9
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	2300      	movs	r3, #0
 80055e2:	930a      	str	r3, [sp, #40]	; 0x28
 80055e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d86c      	bhi.n	80056c4 <_dtoa_r+0x2ac>
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	bfc4      	itt	gt
 80055ee:	3b04      	subgt	r3, #4
 80055f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80055f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f4:	bfc8      	it	gt
 80055f6:	2400      	movgt	r4, #0
 80055f8:	f1a3 0302 	sub.w	r3, r3, #2
 80055fc:	bfd8      	it	le
 80055fe:	2401      	movle	r4, #1
 8005600:	2b03      	cmp	r3, #3
 8005602:	f200 808b 	bhi.w	800571c <_dtoa_r+0x304>
 8005606:	e8df f003 	tbb	[pc, r3]
 800560a:	4f2d      	.short	0x4f2d
 800560c:	5b4d      	.short	0x5b4d
 800560e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005612:	441c      	add	r4, r3
 8005614:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005618:	2b20      	cmp	r3, #32
 800561a:	bfc3      	ittte	gt
 800561c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005620:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005624:	fa09 f303 	lslgt.w	r3, r9, r3
 8005628:	f1c3 0320 	rsble	r3, r3, #32
 800562c:	bfc6      	itte	gt
 800562e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005632:	4318      	orrgt	r0, r3
 8005634:	fa06 f003 	lslle.w	r0, r6, r3
 8005638:	f7fa fed4 	bl	80003e4 <__aeabi_ui2d>
 800563c:	2301      	movs	r3, #1
 800563e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005642:	3c01      	subs	r4, #1
 8005644:	9313      	str	r3, [sp, #76]	; 0x4c
 8005646:	e770      	b.n	800552a <_dtoa_r+0x112>
 8005648:	2301      	movs	r3, #1
 800564a:	e7b3      	b.n	80055b4 <_dtoa_r+0x19c>
 800564c:	900f      	str	r0, [sp, #60]	; 0x3c
 800564e:	e7b2      	b.n	80055b6 <_dtoa_r+0x19e>
 8005650:	9b06      	ldr	r3, [sp, #24]
 8005652:	eba3 0309 	sub.w	r3, r3, r9
 8005656:	9306      	str	r3, [sp, #24]
 8005658:	f1c9 0300 	rsb	r3, r9, #0
 800565c:	930a      	str	r3, [sp, #40]	; 0x28
 800565e:	2300      	movs	r3, #0
 8005660:	930e      	str	r3, [sp, #56]	; 0x38
 8005662:	e7bf      	b.n	80055e4 <_dtoa_r+0x1cc>
 8005664:	2300      	movs	r3, #0
 8005666:	930b      	str	r3, [sp, #44]	; 0x2c
 8005668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800566a:	2b00      	cmp	r3, #0
 800566c:	dc59      	bgt.n	8005722 <_dtoa_r+0x30a>
 800566e:	f04f 0b01 	mov.w	fp, #1
 8005672:	465b      	mov	r3, fp
 8005674:	f8cd b008 	str.w	fp, [sp, #8]
 8005678:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800567c:	2200      	movs	r2, #0
 800567e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005680:	6042      	str	r2, [r0, #4]
 8005682:	2204      	movs	r2, #4
 8005684:	f102 0614 	add.w	r6, r2, #20
 8005688:	429e      	cmp	r6, r3
 800568a:	6841      	ldr	r1, [r0, #4]
 800568c:	d94f      	bls.n	800572e <_dtoa_r+0x316>
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fcdc 	bl	800604c <_Balloc>
 8005694:	9008      	str	r0, [sp, #32]
 8005696:	2800      	cmp	r0, #0
 8005698:	d14d      	bne.n	8005736 <_dtoa_r+0x31e>
 800569a:	4602      	mov	r2, r0
 800569c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <_dtoa_r+0x300>)
 80056a2:	e6cd      	b.n	8005440 <_dtoa_r+0x28>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7de      	b.n	8005666 <_dtoa_r+0x24e>
 80056a8:	2300      	movs	r3, #0
 80056aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056ae:	eb09 0b03 	add.w	fp, r9, r3
 80056b2:	f10b 0301 	add.w	r3, fp, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	9302      	str	r3, [sp, #8]
 80056ba:	bfb8      	it	lt
 80056bc:	2301      	movlt	r3, #1
 80056be:	e7dd      	b.n	800567c <_dtoa_r+0x264>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e7f2      	b.n	80056aa <_dtoa_r+0x292>
 80056c4:	2401      	movs	r4, #1
 80056c6:	2300      	movs	r3, #0
 80056c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80056ca:	9322      	str	r3, [sp, #136]	; 0x88
 80056cc:	f04f 3bff 	mov.w	fp, #4294967295
 80056d0:	2200      	movs	r2, #0
 80056d2:	2312      	movs	r3, #18
 80056d4:	f8cd b008 	str.w	fp, [sp, #8]
 80056d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80056da:	e7cf      	b.n	800567c <_dtoa_r+0x264>
 80056dc:	f3af 8000 	nop.w
 80056e0:	636f4361 	.word	0x636f4361
 80056e4:	3fd287a7 	.word	0x3fd287a7
 80056e8:	8b60c8b3 	.word	0x8b60c8b3
 80056ec:	3fc68a28 	.word	0x3fc68a28
 80056f0:	509f79fb 	.word	0x509f79fb
 80056f4:	3fd34413 	.word	0x3fd34413
 80056f8:	080074fd 	.word	0x080074fd
 80056fc:	08007514 	.word	0x08007514
 8005700:	7ff00000 	.word	0x7ff00000
 8005704:	080074f9 	.word	0x080074f9
 8005708:	080074f0 	.word	0x080074f0
 800570c:	080074cd 	.word	0x080074cd
 8005710:	3ff80000 	.word	0x3ff80000
 8005714:	08007610 	.word	0x08007610
 8005718:	08007573 	.word	0x08007573
 800571c:	2301      	movs	r3, #1
 800571e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005720:	e7d4      	b.n	80056cc <_dtoa_r+0x2b4>
 8005722:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005726:	465b      	mov	r3, fp
 8005728:	f8cd b008 	str.w	fp, [sp, #8]
 800572c:	e7a6      	b.n	800567c <_dtoa_r+0x264>
 800572e:	3101      	adds	r1, #1
 8005730:	6041      	str	r1, [r0, #4]
 8005732:	0052      	lsls	r2, r2, #1
 8005734:	e7a6      	b.n	8005684 <_dtoa_r+0x26c>
 8005736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005738:	9a08      	ldr	r2, [sp, #32]
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	2b0e      	cmp	r3, #14
 8005740:	f200 80a8 	bhi.w	8005894 <_dtoa_r+0x47c>
 8005744:	2c00      	cmp	r4, #0
 8005746:	f000 80a5 	beq.w	8005894 <_dtoa_r+0x47c>
 800574a:	f1b9 0f00 	cmp.w	r9, #0
 800574e:	dd34      	ble.n	80057ba <_dtoa_r+0x3a2>
 8005750:	4a9a      	ldr	r2, [pc, #616]	; (80059bc <_dtoa_r+0x5a4>)
 8005752:	f009 030f 	and.w	r3, r9, #15
 8005756:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800575a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800575e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005762:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005766:	ea4f 1429 	mov.w	r4, r9, asr #4
 800576a:	d016      	beq.n	800579a <_dtoa_r+0x382>
 800576c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005770:	4b93      	ldr	r3, [pc, #588]	; (80059c0 <_dtoa_r+0x5a8>)
 8005772:	2703      	movs	r7, #3
 8005774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005778:	f7fa ffd8 	bl	800072c <__aeabi_ddiv>
 800577c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005780:	f004 040f 	and.w	r4, r4, #15
 8005784:	4e8e      	ldr	r6, [pc, #568]	; (80059c0 <_dtoa_r+0x5a8>)
 8005786:	b954      	cbnz	r4, 800579e <_dtoa_r+0x386>
 8005788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800578c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005790:	f7fa ffcc 	bl	800072c <__aeabi_ddiv>
 8005794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005798:	e029      	b.n	80057ee <_dtoa_r+0x3d6>
 800579a:	2702      	movs	r7, #2
 800579c:	e7f2      	b.n	8005784 <_dtoa_r+0x36c>
 800579e:	07e1      	lsls	r1, r4, #31
 80057a0:	d508      	bpl.n	80057b4 <_dtoa_r+0x39c>
 80057a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057b2:	3701      	adds	r7, #1
 80057b4:	1064      	asrs	r4, r4, #1
 80057b6:	3608      	adds	r6, #8
 80057b8:	e7e5      	b.n	8005786 <_dtoa_r+0x36e>
 80057ba:	f000 80a5 	beq.w	8005908 <_dtoa_r+0x4f0>
 80057be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c2:	f1c9 0400 	rsb	r4, r9, #0
 80057c6:	4b7d      	ldr	r3, [pc, #500]	; (80059bc <_dtoa_r+0x5a4>)
 80057c8:	f004 020f 	and.w	r2, r4, #15
 80057cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f7fa fe80 	bl	80004d8 <__aeabi_dmul>
 80057d8:	2702      	movs	r7, #2
 80057da:	2300      	movs	r3, #0
 80057dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e0:	4e77      	ldr	r6, [pc, #476]	; (80059c0 <_dtoa_r+0x5a8>)
 80057e2:	1124      	asrs	r4, r4, #4
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	f040 8084 	bne.w	80058f2 <_dtoa_r+0x4da>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1d2      	bne.n	8005794 <_dtoa_r+0x37c>
 80057ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 808b 	beq.w	800590c <_dtoa_r+0x4f4>
 80057f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005802:	2200      	movs	r2, #0
 8005804:	4b6f      	ldr	r3, [pc, #444]	; (80059c4 <_dtoa_r+0x5ac>)
 8005806:	f7fb f8d9 	bl	80009bc <__aeabi_dcmplt>
 800580a:	2800      	cmp	r0, #0
 800580c:	d07e      	beq.n	800590c <_dtoa_r+0x4f4>
 800580e:	9b02      	ldr	r3, [sp, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d07b      	beq.n	800590c <_dtoa_r+0x4f4>
 8005814:	f1bb 0f00 	cmp.w	fp, #0
 8005818:	dd38      	ble.n	800588c <_dtoa_r+0x474>
 800581a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800581e:	2200      	movs	r2, #0
 8005820:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <_dtoa_r+0x5b0>)
 8005822:	f7fa fe59 	bl	80004d8 <__aeabi_dmul>
 8005826:	465c      	mov	r4, fp
 8005828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800582c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005830:	3701      	adds	r7, #1
 8005832:	4638      	mov	r0, r7
 8005834:	f7fa fde6 	bl	8000404 <__aeabi_i2d>
 8005838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583c:	f7fa fe4c 	bl	80004d8 <__aeabi_dmul>
 8005840:	2200      	movs	r2, #0
 8005842:	4b62      	ldr	r3, [pc, #392]	; (80059cc <_dtoa_r+0x5b4>)
 8005844:	f7fa fc92 	bl	800016c <__adddf3>
 8005848:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800584c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005850:	9611      	str	r6, [sp, #68]	; 0x44
 8005852:	2c00      	cmp	r4, #0
 8005854:	d15d      	bne.n	8005912 <_dtoa_r+0x4fa>
 8005856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585a:	2200      	movs	r2, #0
 800585c:	4b5c      	ldr	r3, [pc, #368]	; (80059d0 <_dtoa_r+0x5b8>)
 800585e:	f7fa fc83 	bl	8000168 <__aeabi_dsub>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800586a:	4633      	mov	r3, r6
 800586c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800586e:	f7fb f8c3 	bl	80009f8 <__aeabi_dcmpgt>
 8005872:	2800      	cmp	r0, #0
 8005874:	f040 829e 	bne.w	8005db4 <_dtoa_r+0x99c>
 8005878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800587e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005882:	f7fb f89b 	bl	80009bc <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	f040 8292 	bne.w	8005db0 <_dtoa_r+0x998>
 800588c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005890:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005894:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005896:	2b00      	cmp	r3, #0
 8005898:	f2c0 8153 	blt.w	8005b42 <_dtoa_r+0x72a>
 800589c:	f1b9 0f0e 	cmp.w	r9, #14
 80058a0:	f300 814f 	bgt.w	8005b42 <_dtoa_r+0x72a>
 80058a4:	4b45      	ldr	r3, [pc, #276]	; (80059bc <_dtoa_r+0x5a4>)
 80058a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f280 80db 	bge.w	8005a70 <_dtoa_r+0x658>
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f300 80d7 	bgt.w	8005a70 <_dtoa_r+0x658>
 80058c2:	f040 8274 	bne.w	8005dae <_dtoa_r+0x996>
 80058c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ca:	2200      	movs	r2, #0
 80058cc:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <_dtoa_r+0x5b8>)
 80058ce:	f7fa fe03 	bl	80004d8 <__aeabi_dmul>
 80058d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d6:	f7fb f885 	bl	80009e4 <__aeabi_dcmpge>
 80058da:	9c02      	ldr	r4, [sp, #8]
 80058dc:	4626      	mov	r6, r4
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 824a 	bne.w	8005d78 <_dtoa_r+0x960>
 80058e4:	2331      	movs	r3, #49	; 0x31
 80058e6:	9f08      	ldr	r7, [sp, #32]
 80058e8:	f109 0901 	add.w	r9, r9, #1
 80058ec:	f807 3b01 	strb.w	r3, [r7], #1
 80058f0:	e246      	b.n	8005d80 <_dtoa_r+0x968>
 80058f2:	07e2      	lsls	r2, r4, #31
 80058f4:	d505      	bpl.n	8005902 <_dtoa_r+0x4ea>
 80058f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058fa:	f7fa fded 	bl	80004d8 <__aeabi_dmul>
 80058fe:	2301      	movs	r3, #1
 8005900:	3701      	adds	r7, #1
 8005902:	1064      	asrs	r4, r4, #1
 8005904:	3608      	adds	r6, #8
 8005906:	e76d      	b.n	80057e4 <_dtoa_r+0x3cc>
 8005908:	2702      	movs	r7, #2
 800590a:	e770      	b.n	80057ee <_dtoa_r+0x3d6>
 800590c:	46c8      	mov	r8, r9
 800590e:	9c02      	ldr	r4, [sp, #8]
 8005910:	e78f      	b.n	8005832 <_dtoa_r+0x41a>
 8005912:	9908      	ldr	r1, [sp, #32]
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <_dtoa_r+0x5a4>)
 8005916:	4421      	add	r1, r4
 8005918:	9112      	str	r1, [sp, #72]	; 0x48
 800591a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800591c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005920:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005924:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005928:	2900      	cmp	r1, #0
 800592a:	d055      	beq.n	80059d8 <_dtoa_r+0x5c0>
 800592c:	2000      	movs	r0, #0
 800592e:	4929      	ldr	r1, [pc, #164]	; (80059d4 <_dtoa_r+0x5bc>)
 8005930:	f7fa fefc 	bl	800072c <__aeabi_ddiv>
 8005934:	463b      	mov	r3, r7
 8005936:	4632      	mov	r2, r6
 8005938:	f7fa fc16 	bl	8000168 <__aeabi_dsub>
 800593c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005940:	9f08      	ldr	r7, [sp, #32]
 8005942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005946:	f7fb f877 	bl	8000a38 <__aeabi_d2iz>
 800594a:	4604      	mov	r4, r0
 800594c:	f7fa fd5a 	bl	8000404 <__aeabi_i2d>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005958:	f7fa fc06 	bl	8000168 <__aeabi_dsub>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	3430      	adds	r4, #48	; 0x30
 8005962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800596a:	f807 4b01 	strb.w	r4, [r7], #1
 800596e:	f7fb f825 	bl	80009bc <__aeabi_dcmplt>
 8005972:	2800      	cmp	r0, #0
 8005974:	d174      	bne.n	8005a60 <_dtoa_r+0x648>
 8005976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800597a:	2000      	movs	r0, #0
 800597c:	4911      	ldr	r1, [pc, #68]	; (80059c4 <_dtoa_r+0x5ac>)
 800597e:	f7fa fbf3 	bl	8000168 <__aeabi_dsub>
 8005982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005986:	f7fb f819 	bl	80009bc <__aeabi_dcmplt>
 800598a:	2800      	cmp	r0, #0
 800598c:	f040 80b6 	bne.w	8005afc <_dtoa_r+0x6e4>
 8005990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005992:	429f      	cmp	r7, r3
 8005994:	f43f af7a 	beq.w	800588c <_dtoa_r+0x474>
 8005998:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800599c:	2200      	movs	r2, #0
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <_dtoa_r+0x5b0>)
 80059a0:	f7fa fd9a 	bl	80004d8 <__aeabi_dmul>
 80059a4:	2200      	movs	r2, #0
 80059a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <_dtoa_r+0x5b0>)
 80059b0:	f7fa fd92 	bl	80004d8 <__aeabi_dmul>
 80059b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059b8:	e7c3      	b.n	8005942 <_dtoa_r+0x52a>
 80059ba:	bf00      	nop
 80059bc:	08007610 	.word	0x08007610
 80059c0:	080075e8 	.word	0x080075e8
 80059c4:	3ff00000 	.word	0x3ff00000
 80059c8:	40240000 	.word	0x40240000
 80059cc:	401c0000 	.word	0x401c0000
 80059d0:	40140000 	.word	0x40140000
 80059d4:	3fe00000 	.word	0x3fe00000
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059e6:	9c08      	ldr	r4, [sp, #32]
 80059e8:	9314      	str	r3, [sp, #80]	; 0x50
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	f7fb f823 	bl	8000a38 <__aeabi_d2iz>
 80059f2:	9015      	str	r0, [sp, #84]	; 0x54
 80059f4:	f7fa fd06 	bl	8000404 <__aeabi_i2d>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a00:	f7fa fbb2 	bl	8000168 <__aeabi_dsub>
 8005a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a06:	4606      	mov	r6, r0
 8005a08:	3330      	adds	r3, #48	; 0x30
 8005a0a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a10:	460f      	mov	r7, r1
 8005a12:	429c      	cmp	r4, r3
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	d124      	bne.n	8005a64 <_dtoa_r+0x64c>
 8005a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a1e:	4bb3      	ldr	r3, [pc, #716]	; (8005cec <_dtoa_r+0x8d4>)
 8005a20:	f7fa fba4 	bl	800016c <__adddf3>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa ffe4 	bl	80009f8 <__aeabi_dcmpgt>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d162      	bne.n	8005afa <_dtoa_r+0x6e2>
 8005a34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a38:	2000      	movs	r0, #0
 8005a3a:	49ac      	ldr	r1, [pc, #688]	; (8005cec <_dtoa_r+0x8d4>)
 8005a3c:	f7fa fb94 	bl	8000168 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4630      	mov	r0, r6
 8005a46:	4639      	mov	r1, r7
 8005a48:	f7fa ffb8 	bl	80009bc <__aeabi_dcmplt>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f af1d 	beq.w	800588c <_dtoa_r+0x474>
 8005a52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a54:	1e7b      	subs	r3, r7, #1
 8005a56:	9314      	str	r3, [sp, #80]	; 0x50
 8005a58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d0f8      	beq.n	8005a52 <_dtoa_r+0x63a>
 8005a60:	46c1      	mov	r9, r8
 8005a62:	e03a      	b.n	8005ada <_dtoa_r+0x6c2>
 8005a64:	4ba2      	ldr	r3, [pc, #648]	; (8005cf0 <_dtoa_r+0x8d8>)
 8005a66:	f7fa fd37 	bl	80004d8 <__aeabi_dmul>
 8005a6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6e:	e7bc      	b.n	80059ea <_dtoa_r+0x5d2>
 8005a70:	9f08      	ldr	r7, [sp, #32]
 8005a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7a:	f7fa fe57 	bl	800072c <__aeabi_ddiv>
 8005a7e:	f7fa ffdb 	bl	8000a38 <__aeabi_d2iz>
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7fa fcbe 	bl	8000404 <__aeabi_i2d>
 8005a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a8c:	f7fa fd24 	bl	80004d8 <__aeabi_dmul>
 8005a90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a94:	460b      	mov	r3, r1
 8005a96:	4602      	mov	r2, r0
 8005a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a9c:	f7fa fb64 	bl	8000168 <__aeabi_dsub>
 8005aa0:	f807 6b01 	strb.w	r6, [r7], #1
 8005aa4:	9e08      	ldr	r6, [sp, #32]
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	1bbe      	subs	r6, r7, r6
 8005aaa:	42b3      	cmp	r3, r6
 8005aac:	d13a      	bne.n	8005b24 <_dtoa_r+0x70c>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	f7fa fb5b 	bl	800016c <__adddf3>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac2:	f7fa ff99 	bl	80009f8 <__aeabi_dcmpgt>
 8005ac6:	bb58      	cbnz	r0, 8005b20 <_dtoa_r+0x708>
 8005ac8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ad0:	f7fa ff6a 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad4:	b108      	cbz	r0, 8005ada <_dtoa_r+0x6c2>
 8005ad6:	07e1      	lsls	r1, r4, #31
 8005ad8:	d422      	bmi.n	8005b20 <_dtoa_r+0x708>
 8005ada:	4628      	mov	r0, r5
 8005adc:	4651      	mov	r1, sl
 8005ade:	f000 faf5 	bl	80060cc <_Bfree>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	703b      	strb	r3, [r7, #0]
 8005ae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ae8:	f109 0001 	add.w	r0, r9, #1
 8005aec:	6018      	str	r0, [r3, #0]
 8005aee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f43f acdf 	beq.w	80054b4 <_dtoa_r+0x9c>
 8005af6:	601f      	str	r7, [r3, #0]
 8005af8:	e4dc      	b.n	80054b4 <_dtoa_r+0x9c>
 8005afa:	4627      	mov	r7, r4
 8005afc:	463b      	mov	r3, r7
 8005afe:	461f      	mov	r7, r3
 8005b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b04:	2a39      	cmp	r2, #57	; 0x39
 8005b06:	d107      	bne.n	8005b18 <_dtoa_r+0x700>
 8005b08:	9a08      	ldr	r2, [sp, #32]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d1f7      	bne.n	8005afe <_dtoa_r+0x6e6>
 8005b0e:	2230      	movs	r2, #48	; 0x30
 8005b10:	9908      	ldr	r1, [sp, #32]
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	700a      	strb	r2, [r1, #0]
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	3201      	adds	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e79f      	b.n	8005a60 <_dtoa_r+0x648>
 8005b20:	46c8      	mov	r8, r9
 8005b22:	e7eb      	b.n	8005afc <_dtoa_r+0x6e4>
 8005b24:	2200      	movs	r2, #0
 8005b26:	4b72      	ldr	r3, [pc, #456]	; (8005cf0 <_dtoa_r+0x8d8>)
 8005b28:	f7fa fcd6 	bl	80004d8 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	f7fa ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d098      	beq.n	8005a72 <_dtoa_r+0x65a>
 8005b40:	e7cb      	b.n	8005ada <_dtoa_r+0x6c2>
 8005b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	f000 80cd 	beq.w	8005ce4 <_dtoa_r+0x8cc>
 8005b4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b4c:	2a01      	cmp	r2, #1
 8005b4e:	f300 80af 	bgt.w	8005cb0 <_dtoa_r+0x898>
 8005b52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	f000 80a7 	beq.w	8005ca8 <_dtoa_r+0x890>
 8005b5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b60:	9f06      	ldr	r7, [sp, #24]
 8005b62:	9a06      	ldr	r2, [sp, #24]
 8005b64:	2101      	movs	r1, #1
 8005b66:	441a      	add	r2, r3
 8005b68:	9206      	str	r2, [sp, #24]
 8005b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	441a      	add	r2, r3
 8005b70:	9209      	str	r2, [sp, #36]	; 0x24
 8005b72:	f000 fb65 	bl	8006240 <__i2b>
 8005b76:	4606      	mov	r6, r0
 8005b78:	2f00      	cmp	r7, #0
 8005b7a:	dd0c      	ble.n	8005b96 <_dtoa_r+0x77e>
 8005b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd09      	ble.n	8005b96 <_dtoa_r+0x77e>
 8005b82:	42bb      	cmp	r3, r7
 8005b84:	bfa8      	it	ge
 8005b86:	463b      	movge	r3, r7
 8005b88:	9a06      	ldr	r2, [sp, #24]
 8005b8a:	1aff      	subs	r7, r7, r3
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	9206      	str	r2, [sp, #24]
 8005b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	9309      	str	r3, [sp, #36]	; 0x24
 8005b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b98:	b1f3      	cbz	r3, 8005bd8 <_dtoa_r+0x7c0>
 8005b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80a9 	beq.w	8005cf4 <_dtoa_r+0x8dc>
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	dd10      	ble.n	8005bc8 <_dtoa_r+0x7b0>
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 fc02 	bl	80063b4 <__pow5mult>
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 fb58 	bl	800626c <__multiply>
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fa83 	bl	80060cc <_Bfree>
 8005bc6:	46c2      	mov	sl, r8
 8005bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bca:	1b1a      	subs	r2, r3, r4
 8005bcc:	d004      	beq.n	8005bd8 <_dtoa_r+0x7c0>
 8005bce:	4651      	mov	r1, sl
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 fbef 	bl	80063b4 <__pow5mult>
 8005bd6:	4682      	mov	sl, r0
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fb30 	bl	8006240 <__i2b>
 8005be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005be2:	4604      	mov	r4, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f340 8087 	ble.w	8005cf8 <_dtoa_r+0x8e0>
 8005bea:	461a      	mov	r2, r3
 8005bec:	4601      	mov	r1, r0
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fbe0 	bl	80063b4 <__pow5mult>
 8005bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	f340 8080 	ble.w	8005cfe <_dtoa_r+0x8e6>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c08:	6918      	ldr	r0, [r3, #16]
 8005c0a:	f000 facb 	bl	80061a4 <__hi0bits>
 8005c0e:	f1c0 0020 	rsb	r0, r0, #32
 8005c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c14:	4418      	add	r0, r3
 8005c16:	f010 001f 	ands.w	r0, r0, #31
 8005c1a:	f000 8092 	beq.w	8005d42 <_dtoa_r+0x92a>
 8005c1e:	f1c0 0320 	rsb	r3, r0, #32
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	f340 808a 	ble.w	8005d3c <_dtoa_r+0x924>
 8005c28:	f1c0 001c 	rsb	r0, r0, #28
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	4407      	add	r7, r0
 8005c30:	4403      	add	r3, r0
 8005c32:	9306      	str	r3, [sp, #24]
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	4403      	add	r3, r0
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd05      	ble.n	8005c4c <_dtoa_r+0x834>
 8005c40:	4651      	mov	r1, sl
 8005c42:	461a      	mov	r2, r3
 8005c44:	4628      	mov	r0, r5
 8005c46:	f000 fc0f 	bl	8006468 <__lshift>
 8005c4a:	4682      	mov	sl, r0
 8005c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dd05      	ble.n	8005c5e <_dtoa_r+0x846>
 8005c52:	4621      	mov	r1, r4
 8005c54:	461a      	mov	r2, r3
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fc06 	bl	8006468 <__lshift>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d070      	beq.n	8005d46 <_dtoa_r+0x92e>
 8005c64:	4621      	mov	r1, r4
 8005c66:	4650      	mov	r0, sl
 8005c68:	f000 fc6a 	bl	8006540 <__mcmp>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	da6a      	bge.n	8005d46 <_dtoa_r+0x92e>
 8005c70:	2300      	movs	r3, #0
 8005c72:	4651      	mov	r1, sl
 8005c74:	220a      	movs	r2, #10
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fa4a 	bl	8006110 <__multadd>
 8005c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c7e:	4682      	mov	sl, r0
 8005c80:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8193 	beq.w	8005fb0 <_dtoa_r+0xb98>
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	220a      	movs	r2, #10
 8005c90:	4628      	mov	r0, r5
 8005c92:	f000 fa3d 	bl	8006110 <__multadd>
 8005c96:	f1bb 0f00 	cmp.w	fp, #0
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	f300 8093 	bgt.w	8005dc6 <_dtoa_r+0x9ae>
 8005ca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	dc57      	bgt.n	8005d56 <_dtoa_r+0x93e>
 8005ca6:	e08e      	b.n	8005dc6 <_dtoa_r+0x9ae>
 8005ca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005caa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cae:	e756      	b.n	8005b5e <_dtoa_r+0x746>
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	1e5c      	subs	r4, r3, #1
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	bfb7      	itett	lt
 8005cba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005cbc:	1b1c      	subge	r4, r3, r4
 8005cbe:	1ae2      	sublt	r2, r4, r3
 8005cc0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cc2:	bfbe      	ittt	lt
 8005cc4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cc6:	189b      	addlt	r3, r3, r2
 8005cc8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	bfb8      	it	lt
 8005cce:	2400      	movlt	r4, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfbb      	ittet	lt
 8005cd4:	9b06      	ldrlt	r3, [sp, #24]
 8005cd6:	9a02      	ldrlt	r2, [sp, #8]
 8005cd8:	9f06      	ldrge	r7, [sp, #24]
 8005cda:	1a9f      	sublt	r7, r3, r2
 8005cdc:	bfac      	ite	ge
 8005cde:	9b02      	ldrge	r3, [sp, #8]
 8005ce0:	2300      	movlt	r3, #0
 8005ce2:	e73e      	b.n	8005b62 <_dtoa_r+0x74a>
 8005ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ce6:	9f06      	ldr	r7, [sp, #24]
 8005ce8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005cea:	e745      	b.n	8005b78 <_dtoa_r+0x760>
 8005cec:	3fe00000 	.word	0x3fe00000
 8005cf0:	40240000 	.word	0x40240000
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	e76a      	b.n	8005bce <_dtoa_r+0x7b6>
 8005cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	dc19      	bgt.n	8005d32 <_dtoa_r+0x91a>
 8005cfe:	9b04      	ldr	r3, [sp, #16]
 8005d00:	b9bb      	cbnz	r3, 8005d32 <_dtoa_r+0x91a>
 8005d02:	9b05      	ldr	r3, [sp, #20]
 8005d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d08:	b99b      	cbnz	r3, 8005d32 <_dtoa_r+0x91a>
 8005d0a:	9b05      	ldr	r3, [sp, #20]
 8005d0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	0d1b      	lsrs	r3, r3, #20
 8005d12:	051b      	lsls	r3, r3, #20
 8005d14:	b183      	cbz	r3, 8005d38 <_dtoa_r+0x920>
 8005d16:	f04f 0801 	mov.w	r8, #1
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	9306      	str	r3, [sp, #24]
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	3301      	adds	r3, #1
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f af6a 	bne.w	8005c02 <_dtoa_r+0x7ea>
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e76f      	b.n	8005c12 <_dtoa_r+0x7fa>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	e7f6      	b.n	8005d26 <_dtoa_r+0x90e>
 8005d38:	4698      	mov	r8, r3
 8005d3a:	e7f4      	b.n	8005d26 <_dtoa_r+0x90e>
 8005d3c:	f43f af7d 	beq.w	8005c3a <_dtoa_r+0x822>
 8005d40:	4618      	mov	r0, r3
 8005d42:	301c      	adds	r0, #28
 8005d44:	e772      	b.n	8005c2c <_dtoa_r+0x814>
 8005d46:	9b02      	ldr	r3, [sp, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc36      	bgt.n	8005dba <_dtoa_r+0x9a2>
 8005d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	dd33      	ble.n	8005dba <_dtoa_r+0x9a2>
 8005d52:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005d56:	f1bb 0f00 	cmp.w	fp, #0
 8005d5a:	d10d      	bne.n	8005d78 <_dtoa_r+0x960>
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	465b      	mov	r3, fp
 8005d60:	2205      	movs	r2, #5
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f9d4 	bl	8006110 <__multadd>
 8005d68:	4601      	mov	r1, r0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	f000 fbe7 	bl	8006540 <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f73f adb6 	bgt.w	80058e4 <_dtoa_r+0x4cc>
 8005d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d7a:	9f08      	ldr	r7, [sp, #32]
 8005d7c:	ea6f 0903 	mvn.w	r9, r3
 8005d80:	f04f 0800 	mov.w	r8, #0
 8005d84:	4621      	mov	r1, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 f9a0 	bl	80060cc <_Bfree>
 8005d8c:	2e00      	cmp	r6, #0
 8005d8e:	f43f aea4 	beq.w	8005ada <_dtoa_r+0x6c2>
 8005d92:	f1b8 0f00 	cmp.w	r8, #0
 8005d96:	d005      	beq.n	8005da4 <_dtoa_r+0x98c>
 8005d98:	45b0      	cmp	r8, r6
 8005d9a:	d003      	beq.n	8005da4 <_dtoa_r+0x98c>
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f994 	bl	80060cc <_Bfree>
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 f990 	bl	80060cc <_Bfree>
 8005dac:	e695      	b.n	8005ada <_dtoa_r+0x6c2>
 8005dae:	2400      	movs	r4, #0
 8005db0:	4626      	mov	r6, r4
 8005db2:	e7e1      	b.n	8005d78 <_dtoa_r+0x960>
 8005db4:	46c1      	mov	r9, r8
 8005db6:	4626      	mov	r6, r4
 8005db8:	e594      	b.n	80058e4 <_dtoa_r+0x4cc>
 8005dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dbc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80fc 	beq.w	8005fbe <_dtoa_r+0xba6>
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	dd05      	ble.n	8005dd6 <_dtoa_r+0x9be>
 8005dca:	4631      	mov	r1, r6
 8005dcc:	463a      	mov	r2, r7
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 fb4a 	bl	8006468 <__lshift>
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	f1b8 0f00 	cmp.w	r8, #0
 8005dda:	d05c      	beq.n	8005e96 <_dtoa_r+0xa7e>
 8005ddc:	4628      	mov	r0, r5
 8005dde:	6871      	ldr	r1, [r6, #4]
 8005de0:	f000 f934 	bl	800604c <_Balloc>
 8005de4:	4607      	mov	r7, r0
 8005de6:	b928      	cbnz	r0, 8005df4 <_dtoa_r+0x9dc>
 8005de8:	4602      	mov	r2, r0
 8005dea:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005dee:	4b7e      	ldr	r3, [pc, #504]	; (8005fe8 <_dtoa_r+0xbd0>)
 8005df0:	f7ff bb26 	b.w	8005440 <_dtoa_r+0x28>
 8005df4:	6932      	ldr	r2, [r6, #16]
 8005df6:	f106 010c 	add.w	r1, r6, #12
 8005dfa:	3202      	adds	r2, #2
 8005dfc:	0092      	lsls	r2, r2, #2
 8005dfe:	300c      	adds	r0, #12
 8005e00:	f000 f90a 	bl	8006018 <memcpy>
 8005e04:	2201      	movs	r2, #1
 8005e06:	4639      	mov	r1, r7
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fb2d 	bl	8006468 <__lshift>
 8005e0e:	46b0      	mov	r8, r6
 8005e10:	4606      	mov	r6, r0
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	3301      	adds	r3, #1
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	445b      	add	r3, fp
 8005e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	9309      	str	r3, [sp, #36]	; 0x24
 8005e26:	9b02      	ldr	r3, [sp, #8]
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e30:	f7ff fa62 	bl	80052f8 <quorem>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4641      	mov	r1, r8
 8005e38:	3330      	adds	r3, #48	; 0x30
 8005e3a:	9004      	str	r0, [sp, #16]
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e40:	f000 fb7e 	bl	8006540 <__mcmp>
 8005e44:	4632      	mov	r2, r6
 8005e46:	9006      	str	r0, [sp, #24]
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 fb94 	bl	8006578 <__mdiff>
 8005e50:	68c2      	ldr	r2, [r0, #12]
 8005e52:	4607      	mov	r7, r0
 8005e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e56:	bb02      	cbnz	r2, 8005e9a <_dtoa_r+0xa82>
 8005e58:	4601      	mov	r1, r0
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f000 fb70 	bl	8006540 <__mcmp>
 8005e60:	4602      	mov	r2, r0
 8005e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e64:	4639      	mov	r1, r7
 8005e66:	4628      	mov	r0, r5
 8005e68:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e6c:	f000 f92e 	bl	80060cc <_Bfree>
 8005e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e74:	9f02      	ldr	r7, [sp, #8]
 8005e76:	ea43 0102 	orr.w	r1, r3, r2
 8005e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e80:	d10d      	bne.n	8005e9e <_dtoa_r+0xa86>
 8005e82:	2b39      	cmp	r3, #57	; 0x39
 8005e84:	d027      	beq.n	8005ed6 <_dtoa_r+0xabe>
 8005e86:	9a06      	ldr	r2, [sp, #24]
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	dd01      	ble.n	8005e90 <_dtoa_r+0xa78>
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	3331      	adds	r3, #49	; 0x31
 8005e90:	f88b 3000 	strb.w	r3, [fp]
 8005e94:	e776      	b.n	8005d84 <_dtoa_r+0x96c>
 8005e96:	4630      	mov	r0, r6
 8005e98:	e7b9      	b.n	8005e0e <_dtoa_r+0x9f6>
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	e7e2      	b.n	8005e64 <_dtoa_r+0xa4c>
 8005e9e:	9906      	ldr	r1, [sp, #24]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	db04      	blt.n	8005eae <_dtoa_r+0xa96>
 8005ea4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005ea6:	4301      	orrs	r1, r0
 8005ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eaa:	4301      	orrs	r1, r0
 8005eac:	d120      	bne.n	8005ef0 <_dtoa_r+0xad8>
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	ddee      	ble.n	8005e90 <_dtoa_r+0xa78>
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	9302      	str	r3, [sp, #8]
 8005eba:	f000 fad5 	bl	8006468 <__lshift>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	f000 fb3d 	bl	8006540 <__mcmp>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	9b02      	ldr	r3, [sp, #8]
 8005eca:	dc02      	bgt.n	8005ed2 <_dtoa_r+0xaba>
 8005ecc:	d1e0      	bne.n	8005e90 <_dtoa_r+0xa78>
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d5de      	bpl.n	8005e90 <_dtoa_r+0xa78>
 8005ed2:	2b39      	cmp	r3, #57	; 0x39
 8005ed4:	d1da      	bne.n	8005e8c <_dtoa_r+0xa74>
 8005ed6:	2339      	movs	r3, #57	; 0x39
 8005ed8:	f88b 3000 	strb.w	r3, [fp]
 8005edc:	463b      	mov	r3, r7
 8005ede:	461f      	mov	r7, r3
 8005ee0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	2a39      	cmp	r2, #57	; 0x39
 8005ee8:	d050      	beq.n	8005f8c <_dtoa_r+0xb74>
 8005eea:	3201      	adds	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e749      	b.n	8005d84 <_dtoa_r+0x96c>
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	dd03      	ble.n	8005efc <_dtoa_r+0xae4>
 8005ef4:	2b39      	cmp	r3, #57	; 0x39
 8005ef6:	d0ee      	beq.n	8005ed6 <_dtoa_r+0xabe>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	e7c9      	b.n	8005e90 <_dtoa_r+0xa78>
 8005efc:	9a02      	ldr	r2, [sp, #8]
 8005efe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f04:	428a      	cmp	r2, r1
 8005f06:	d02a      	beq.n	8005f5e <_dtoa_r+0xb46>
 8005f08:	4651      	mov	r1, sl
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f8fe 	bl	8006110 <__multadd>
 8005f14:	45b0      	cmp	r8, r6
 8005f16:	4682      	mov	sl, r0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	f04f 020a 	mov.w	r2, #10
 8005f20:	4641      	mov	r1, r8
 8005f22:	4628      	mov	r0, r5
 8005f24:	d107      	bne.n	8005f36 <_dtoa_r+0xb1e>
 8005f26:	f000 f8f3 	bl	8006110 <__multadd>
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	3301      	adds	r3, #1
 8005f32:	9302      	str	r3, [sp, #8]
 8005f34:	e777      	b.n	8005e26 <_dtoa_r+0xa0e>
 8005f36:	f000 f8eb 	bl	8006110 <__multadd>
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	220a      	movs	r2, #10
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f8e4 	bl	8006110 <__multadd>
 8005f48:	4606      	mov	r6, r0
 8005f4a:	e7f0      	b.n	8005f2e <_dtoa_r+0xb16>
 8005f4c:	f1bb 0f00 	cmp.w	fp, #0
 8005f50:	bfcc      	ite	gt
 8005f52:	465f      	movgt	r7, fp
 8005f54:	2701      	movle	r7, #1
 8005f56:	f04f 0800 	mov.w	r8, #0
 8005f5a:	9a08      	ldr	r2, [sp, #32]
 8005f5c:	4417      	add	r7, r2
 8005f5e:	4651      	mov	r1, sl
 8005f60:	2201      	movs	r2, #1
 8005f62:	4628      	mov	r0, r5
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	f000 fa7f 	bl	8006468 <__lshift>
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	f000 fae7 	bl	8006540 <__mcmp>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	dcb2      	bgt.n	8005edc <_dtoa_r+0xac4>
 8005f76:	d102      	bne.n	8005f7e <_dtoa_r+0xb66>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	07db      	lsls	r3, r3, #31
 8005f7c:	d4ae      	bmi.n	8005edc <_dtoa_r+0xac4>
 8005f7e:	463b      	mov	r3, r7
 8005f80:	461f      	mov	r7, r3
 8005f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f86:	2a30      	cmp	r2, #48	; 0x30
 8005f88:	d0fa      	beq.n	8005f80 <_dtoa_r+0xb68>
 8005f8a:	e6fb      	b.n	8005d84 <_dtoa_r+0x96c>
 8005f8c:	9a08      	ldr	r2, [sp, #32]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d1a5      	bne.n	8005ede <_dtoa_r+0xac6>
 8005f92:	2331      	movs	r3, #49	; 0x31
 8005f94:	f109 0901 	add.w	r9, r9, #1
 8005f98:	7013      	strb	r3, [r2, #0]
 8005f9a:	e6f3      	b.n	8005d84 <_dtoa_r+0x96c>
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <_dtoa_r+0xbd4>)
 8005f9e:	f7ff baa7 	b.w	80054f0 <_dtoa_r+0xd8>
 8005fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f aa80 	bne.w	80054aa <_dtoa_r+0x92>
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <_dtoa_r+0xbd8>)
 8005fac:	f7ff baa0 	b.w	80054f0 <_dtoa_r+0xd8>
 8005fb0:	f1bb 0f00 	cmp.w	fp, #0
 8005fb4:	dc03      	bgt.n	8005fbe <_dtoa_r+0xba6>
 8005fb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	f73f aecc 	bgt.w	8005d56 <_dtoa_r+0x93e>
 8005fbe:	9f08      	ldr	r7, [sp, #32]
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	f7ff f998 	bl	80052f8 <quorem>
 8005fc8:	9a08      	ldr	r2, [sp, #32]
 8005fca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005fce:	f807 3b01 	strb.w	r3, [r7], #1
 8005fd2:	1aba      	subs	r2, r7, r2
 8005fd4:	4593      	cmp	fp, r2
 8005fd6:	ddb9      	ble.n	8005f4c <_dtoa_r+0xb34>
 8005fd8:	4651      	mov	r1, sl
 8005fda:	2300      	movs	r3, #0
 8005fdc:	220a      	movs	r2, #10
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f896 	bl	8006110 <__multadd>
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	e7eb      	b.n	8005fc0 <_dtoa_r+0xba8>
 8005fe8:	08007573 	.word	0x08007573
 8005fec:	080074cc 	.word	0x080074cc
 8005ff0:	080074f0 	.word	0x080074f0

08005ff4 <_localeconv_r>:
 8005ff4:	4800      	ldr	r0, [pc, #0]	; (8005ff8 <_localeconv_r+0x4>)
 8005ff6:	4770      	bx	lr
 8005ff8:	20000160 	.word	0x20000160

08005ffc <memchr>:
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	b510      	push	{r4, lr}
 8006000:	b2c9      	uxtb	r1, r1
 8006002:	4402      	add	r2, r0
 8006004:	4293      	cmp	r3, r2
 8006006:	4618      	mov	r0, r3
 8006008:	d101      	bne.n	800600e <memchr+0x12>
 800600a:	2000      	movs	r0, #0
 800600c:	e003      	b.n	8006016 <memchr+0x1a>
 800600e:	7804      	ldrb	r4, [r0, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	428c      	cmp	r4, r1
 8006014:	d1f6      	bne.n	8006004 <memchr+0x8>
 8006016:	bd10      	pop	{r4, pc}

08006018 <memcpy>:
 8006018:	440a      	add	r2, r1
 800601a:	4291      	cmp	r1, r2
 800601c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006020:	d100      	bne.n	8006024 <memcpy+0xc>
 8006022:	4770      	bx	lr
 8006024:	b510      	push	{r4, lr}
 8006026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800602a:	4291      	cmp	r1, r2
 800602c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006030:	d1f9      	bne.n	8006026 <memcpy+0xe>
 8006032:	bd10      	pop	{r4, pc}

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f000 bbca 	b.w	80067ce <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	20000294 	.word	0x20000294

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f000 bbc5 	b.w	80067d0 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	20000294 	.word	0x20000294

0800604c <_Balloc>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	b976      	cbnz	r6, 8006074 <_Balloc+0x28>
 8006056:	2010      	movs	r0, #16
 8006058:	f7fe fc28 	bl	80048ac <malloc>
 800605c:	4602      	mov	r2, r0
 800605e:	6260      	str	r0, [r4, #36]	; 0x24
 8006060:	b920      	cbnz	r0, 800606c <_Balloc+0x20>
 8006062:	2166      	movs	r1, #102	; 0x66
 8006064:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <_Balloc+0x78>)
 8006066:	4818      	ldr	r0, [pc, #96]	; (80060c8 <_Balloc+0x7c>)
 8006068:	f000 fb80 	bl	800676c <__assert_func>
 800606c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006070:	6006      	str	r6, [r0, #0]
 8006072:	60c6      	str	r6, [r0, #12]
 8006074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006076:	68f3      	ldr	r3, [r6, #12]
 8006078:	b183      	cbz	r3, 800609c <_Balloc+0x50>
 800607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006082:	b9b8      	cbnz	r0, 80060b4 <_Balloc+0x68>
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f605 	lsl.w	r6, r1, r5
 800608a:	1d72      	adds	r2, r6, #5
 800608c:	4620      	mov	r0, r4
 800608e:	0092      	lsls	r2, r2, #2
 8006090:	f000 fb5e 	bl	8006750 <_calloc_r>
 8006094:	b160      	cbz	r0, 80060b0 <_Balloc+0x64>
 8006096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800609a:	e00e      	b.n	80060ba <_Balloc+0x6e>
 800609c:	2221      	movs	r2, #33	; 0x21
 800609e:	2104      	movs	r1, #4
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fb55 	bl	8006750 <_calloc_r>
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	60f0      	str	r0, [r6, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e4      	bne.n	800607a <_Balloc+0x2e>
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ba:	2300      	movs	r3, #0
 80060bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060c0:	e7f7      	b.n	80060b2 <_Balloc+0x66>
 80060c2:	bf00      	nop
 80060c4:	080074fd 	.word	0x080074fd
 80060c8:	08007584 	.word	0x08007584

080060cc <_Bfree>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060d0:	4605      	mov	r5, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	b976      	cbnz	r6, 80060f4 <_Bfree+0x28>
 80060d6:	2010      	movs	r0, #16
 80060d8:	f7fe fbe8 	bl	80048ac <malloc>
 80060dc:	4602      	mov	r2, r0
 80060de:	6268      	str	r0, [r5, #36]	; 0x24
 80060e0:	b920      	cbnz	r0, 80060ec <_Bfree+0x20>
 80060e2:	218a      	movs	r1, #138	; 0x8a
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <_Bfree+0x3c>)
 80060e6:	4809      	ldr	r0, [pc, #36]	; (800610c <_Bfree+0x40>)
 80060e8:	f000 fb40 	bl	800676c <__assert_func>
 80060ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060f0:	6006      	str	r6, [r0, #0]
 80060f2:	60c6      	str	r6, [r0, #12]
 80060f4:	b13c      	cbz	r4, 8006106 <_Bfree+0x3a>
 80060f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060f8:	6862      	ldr	r2, [r4, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006100:	6021      	str	r1, [r4, #0]
 8006102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	080074fd 	.word	0x080074fd
 800610c:	08007584 	.word	0x08007584

08006110 <__multadd>:
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	4698      	mov	r8, r3
 8006116:	460c      	mov	r4, r1
 8006118:	2300      	movs	r3, #0
 800611a:	690e      	ldr	r6, [r1, #16]
 800611c:	4607      	mov	r7, r0
 800611e:	f101 0014 	add.w	r0, r1, #20
 8006122:	6805      	ldr	r5, [r0, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	b2a9      	uxth	r1, r5
 8006128:	fb02 8101 	mla	r1, r2, r1, r8
 800612c:	0c2d      	lsrs	r5, r5, #16
 800612e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006132:	fb02 c505 	mla	r5, r2, r5, ip
 8006136:	b289      	uxth	r1, r1
 8006138:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800613c:	429e      	cmp	r6, r3
 800613e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006142:	f840 1b04 	str.w	r1, [r0], #4
 8006146:	dcec      	bgt.n	8006122 <__multadd+0x12>
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	d022      	beq.n	8006194 <__multadd+0x84>
 800614e:	68a3      	ldr	r3, [r4, #8]
 8006150:	42b3      	cmp	r3, r6
 8006152:	dc19      	bgt.n	8006188 <__multadd+0x78>
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4638      	mov	r0, r7
 8006158:	3101      	adds	r1, #1
 800615a:	f7ff ff77 	bl	800604c <_Balloc>
 800615e:	4605      	mov	r5, r0
 8006160:	b928      	cbnz	r0, 800616e <__multadd+0x5e>
 8006162:	4602      	mov	r2, r0
 8006164:	21b5      	movs	r1, #181	; 0xb5
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <__multadd+0x8c>)
 8006168:	480d      	ldr	r0, [pc, #52]	; (80061a0 <__multadd+0x90>)
 800616a:	f000 faff 	bl	800676c <__assert_func>
 800616e:	6922      	ldr	r2, [r4, #16]
 8006170:	f104 010c 	add.w	r1, r4, #12
 8006174:	3202      	adds	r2, #2
 8006176:	0092      	lsls	r2, r2, #2
 8006178:	300c      	adds	r0, #12
 800617a:	f7ff ff4d 	bl	8006018 <memcpy>
 800617e:	4621      	mov	r1, r4
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff ffa3 	bl	80060cc <_Bfree>
 8006186:	462c      	mov	r4, r5
 8006188:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800618c:	3601      	adds	r6, #1
 800618e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006192:	6126      	str	r6, [r4, #16]
 8006194:	4620      	mov	r0, r4
 8006196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619a:	bf00      	nop
 800619c:	08007573 	.word	0x08007573
 80061a0:	08007584 	.word	0x08007584

080061a4 <__hi0bits>:
 80061a4:	0c02      	lsrs	r2, r0, #16
 80061a6:	0412      	lsls	r2, r2, #16
 80061a8:	4603      	mov	r3, r0
 80061aa:	b9ca      	cbnz	r2, 80061e0 <__hi0bits+0x3c>
 80061ac:	0403      	lsls	r3, r0, #16
 80061ae:	2010      	movs	r0, #16
 80061b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061b4:	bf04      	itt	eq
 80061b6:	021b      	lsleq	r3, r3, #8
 80061b8:	3008      	addeq	r0, #8
 80061ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061be:	bf04      	itt	eq
 80061c0:	011b      	lsleq	r3, r3, #4
 80061c2:	3004      	addeq	r0, #4
 80061c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061c8:	bf04      	itt	eq
 80061ca:	009b      	lsleq	r3, r3, #2
 80061cc:	3002      	addeq	r0, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	db05      	blt.n	80061de <__hi0bits+0x3a>
 80061d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061d6:	f100 0001 	add.w	r0, r0, #1
 80061da:	bf08      	it	eq
 80061dc:	2020      	moveq	r0, #32
 80061de:	4770      	bx	lr
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7e5      	b.n	80061b0 <__hi0bits+0xc>

080061e4 <__lo0bits>:
 80061e4:	6803      	ldr	r3, [r0, #0]
 80061e6:	4602      	mov	r2, r0
 80061e8:	f013 0007 	ands.w	r0, r3, #7
 80061ec:	d00b      	beq.n	8006206 <__lo0bits+0x22>
 80061ee:	07d9      	lsls	r1, r3, #31
 80061f0:	d422      	bmi.n	8006238 <__lo0bits+0x54>
 80061f2:	0798      	lsls	r0, r3, #30
 80061f4:	bf49      	itett	mi
 80061f6:	085b      	lsrmi	r3, r3, #1
 80061f8:	089b      	lsrpl	r3, r3, #2
 80061fa:	2001      	movmi	r0, #1
 80061fc:	6013      	strmi	r3, [r2, #0]
 80061fe:	bf5c      	itt	pl
 8006200:	2002      	movpl	r0, #2
 8006202:	6013      	strpl	r3, [r2, #0]
 8006204:	4770      	bx	lr
 8006206:	b299      	uxth	r1, r3
 8006208:	b909      	cbnz	r1, 800620e <__lo0bits+0x2a>
 800620a:	2010      	movs	r0, #16
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006212:	bf04      	itt	eq
 8006214:	0a1b      	lsreq	r3, r3, #8
 8006216:	3008      	addeq	r0, #8
 8006218:	0719      	lsls	r1, r3, #28
 800621a:	bf04      	itt	eq
 800621c:	091b      	lsreq	r3, r3, #4
 800621e:	3004      	addeq	r0, #4
 8006220:	0799      	lsls	r1, r3, #30
 8006222:	bf04      	itt	eq
 8006224:	089b      	lsreq	r3, r3, #2
 8006226:	3002      	addeq	r0, #2
 8006228:	07d9      	lsls	r1, r3, #31
 800622a:	d403      	bmi.n	8006234 <__lo0bits+0x50>
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	f100 0001 	add.w	r0, r0, #1
 8006232:	d003      	beq.n	800623c <__lo0bits+0x58>
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4770      	bx	lr
 8006238:	2000      	movs	r0, #0
 800623a:	4770      	bx	lr
 800623c:	2020      	movs	r0, #32
 800623e:	4770      	bx	lr

08006240 <__i2b>:
 8006240:	b510      	push	{r4, lr}
 8006242:	460c      	mov	r4, r1
 8006244:	2101      	movs	r1, #1
 8006246:	f7ff ff01 	bl	800604c <_Balloc>
 800624a:	4602      	mov	r2, r0
 800624c:	b928      	cbnz	r0, 800625a <__i2b+0x1a>
 800624e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006252:	4b04      	ldr	r3, [pc, #16]	; (8006264 <__i2b+0x24>)
 8006254:	4804      	ldr	r0, [pc, #16]	; (8006268 <__i2b+0x28>)
 8006256:	f000 fa89 	bl	800676c <__assert_func>
 800625a:	2301      	movs	r3, #1
 800625c:	6144      	str	r4, [r0, #20]
 800625e:	6103      	str	r3, [r0, #16]
 8006260:	bd10      	pop	{r4, pc}
 8006262:	bf00      	nop
 8006264:	08007573 	.word	0x08007573
 8006268:	08007584 	.word	0x08007584

0800626c <__multiply>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4614      	mov	r4, r2
 8006272:	690a      	ldr	r2, [r1, #16]
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	460d      	mov	r5, r1
 8006278:	429a      	cmp	r2, r3
 800627a:	bfbe      	ittt	lt
 800627c:	460b      	movlt	r3, r1
 800627e:	4625      	movlt	r5, r4
 8006280:	461c      	movlt	r4, r3
 8006282:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006286:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800628a:	68ab      	ldr	r3, [r5, #8]
 800628c:	6869      	ldr	r1, [r5, #4]
 800628e:	eb0a 0709 	add.w	r7, sl, r9
 8006292:	42bb      	cmp	r3, r7
 8006294:	b085      	sub	sp, #20
 8006296:	bfb8      	it	lt
 8006298:	3101      	addlt	r1, #1
 800629a:	f7ff fed7 	bl	800604c <_Balloc>
 800629e:	b930      	cbnz	r0, 80062ae <__multiply+0x42>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f240 115d 	movw	r1, #349	; 0x15d
 80062a6:	4b41      	ldr	r3, [pc, #260]	; (80063ac <__multiply+0x140>)
 80062a8:	4841      	ldr	r0, [pc, #260]	; (80063b0 <__multiply+0x144>)
 80062aa:	f000 fa5f 	bl	800676c <__assert_func>
 80062ae:	f100 0614 	add.w	r6, r0, #20
 80062b2:	4633      	mov	r3, r6
 80062b4:	2200      	movs	r2, #0
 80062b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80062ba:	4543      	cmp	r3, r8
 80062bc:	d31e      	bcc.n	80062fc <__multiply+0x90>
 80062be:	f105 0c14 	add.w	ip, r5, #20
 80062c2:	f104 0314 	add.w	r3, r4, #20
 80062c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80062ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80062ce:	9202      	str	r2, [sp, #8]
 80062d0:	ebac 0205 	sub.w	r2, ip, r5
 80062d4:	3a15      	subs	r2, #21
 80062d6:	f022 0203 	bic.w	r2, r2, #3
 80062da:	3204      	adds	r2, #4
 80062dc:	f105 0115 	add.w	r1, r5, #21
 80062e0:	458c      	cmp	ip, r1
 80062e2:	bf38      	it	cc
 80062e4:	2204      	movcc	r2, #4
 80062e6:	9201      	str	r2, [sp, #4]
 80062e8:	9a02      	ldr	r2, [sp, #8]
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d808      	bhi.n	8006302 <__multiply+0x96>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	dc55      	bgt.n	80063a0 <__multiply+0x134>
 80062f4:	6107      	str	r7, [r0, #16]
 80062f6:	b005      	add	sp, #20
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	f843 2b04 	str.w	r2, [r3], #4
 8006300:	e7db      	b.n	80062ba <__multiply+0x4e>
 8006302:	f8b3 a000 	ldrh.w	sl, [r3]
 8006306:	f1ba 0f00 	cmp.w	sl, #0
 800630a:	d020      	beq.n	800634e <__multiply+0xe2>
 800630c:	46b1      	mov	r9, r6
 800630e:	2200      	movs	r2, #0
 8006310:	f105 0e14 	add.w	lr, r5, #20
 8006314:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006318:	f8d9 b000 	ldr.w	fp, [r9]
 800631c:	b2a1      	uxth	r1, r4
 800631e:	fa1f fb8b 	uxth.w	fp, fp
 8006322:	fb0a b101 	mla	r1, sl, r1, fp
 8006326:	4411      	add	r1, r2
 8006328:	f8d9 2000 	ldr.w	r2, [r9]
 800632c:	0c24      	lsrs	r4, r4, #16
 800632e:	0c12      	lsrs	r2, r2, #16
 8006330:	fb0a 2404 	mla	r4, sl, r4, r2
 8006334:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006338:	b289      	uxth	r1, r1
 800633a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800633e:	45f4      	cmp	ip, lr
 8006340:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006344:	f849 1b04 	str.w	r1, [r9], #4
 8006348:	d8e4      	bhi.n	8006314 <__multiply+0xa8>
 800634a:	9901      	ldr	r1, [sp, #4]
 800634c:	5072      	str	r2, [r6, r1]
 800634e:	9a03      	ldr	r2, [sp, #12]
 8006350:	3304      	adds	r3, #4
 8006352:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006356:	f1b9 0f00 	cmp.w	r9, #0
 800635a:	d01f      	beq.n	800639c <__multiply+0x130>
 800635c:	46b6      	mov	lr, r6
 800635e:	f04f 0a00 	mov.w	sl, #0
 8006362:	6834      	ldr	r4, [r6, #0]
 8006364:	f105 0114 	add.w	r1, r5, #20
 8006368:	880a      	ldrh	r2, [r1, #0]
 800636a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800636e:	b2a4      	uxth	r4, r4
 8006370:	fb09 b202 	mla	r2, r9, r2, fp
 8006374:	4492      	add	sl, r2
 8006376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800637a:	f84e 4b04 	str.w	r4, [lr], #4
 800637e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006382:	f8be 2000 	ldrh.w	r2, [lr]
 8006386:	0c24      	lsrs	r4, r4, #16
 8006388:	fb09 2404 	mla	r4, r9, r4, r2
 800638c:	458c      	cmp	ip, r1
 800638e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006392:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006396:	d8e7      	bhi.n	8006368 <__multiply+0xfc>
 8006398:	9a01      	ldr	r2, [sp, #4]
 800639a:	50b4      	str	r4, [r6, r2]
 800639c:	3604      	adds	r6, #4
 800639e:	e7a3      	b.n	80062e8 <__multiply+0x7c>
 80063a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1a5      	bne.n	80062f4 <__multiply+0x88>
 80063a8:	3f01      	subs	r7, #1
 80063aa:	e7a1      	b.n	80062f0 <__multiply+0x84>
 80063ac:	08007573 	.word	0x08007573
 80063b0:	08007584 	.word	0x08007584

080063b4 <__pow5mult>:
 80063b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b8:	4615      	mov	r5, r2
 80063ba:	f012 0203 	ands.w	r2, r2, #3
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	d007      	beq.n	80063d4 <__pow5mult+0x20>
 80063c4:	4c25      	ldr	r4, [pc, #148]	; (800645c <__pow5mult+0xa8>)
 80063c6:	3a01      	subs	r2, #1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063ce:	f7ff fe9f 	bl	8006110 <__multadd>
 80063d2:	4607      	mov	r7, r0
 80063d4:	10ad      	asrs	r5, r5, #2
 80063d6:	d03d      	beq.n	8006454 <__pow5mult+0xa0>
 80063d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063da:	b97c      	cbnz	r4, 80063fc <__pow5mult+0x48>
 80063dc:	2010      	movs	r0, #16
 80063de:	f7fe fa65 	bl	80048ac <malloc>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6270      	str	r0, [r6, #36]	; 0x24
 80063e6:	b928      	cbnz	r0, 80063f4 <__pow5mult+0x40>
 80063e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <__pow5mult+0xac>)
 80063ee:	481d      	ldr	r0, [pc, #116]	; (8006464 <__pow5mult+0xb0>)
 80063f0:	f000 f9bc 	bl	800676c <__assert_func>
 80063f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063f8:	6004      	str	r4, [r0, #0]
 80063fa:	60c4      	str	r4, [r0, #12]
 80063fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006404:	b94c      	cbnz	r4, 800641a <__pow5mult+0x66>
 8006406:	f240 2171 	movw	r1, #625	; 0x271
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ff18 	bl	8006240 <__i2b>
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	f8c8 0008 	str.w	r0, [r8, #8]
 8006418:	6003      	str	r3, [r0, #0]
 800641a:	f04f 0900 	mov.w	r9, #0
 800641e:	07eb      	lsls	r3, r5, #31
 8006420:	d50a      	bpl.n	8006438 <__pow5mult+0x84>
 8006422:	4639      	mov	r1, r7
 8006424:	4622      	mov	r2, r4
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ff20 	bl	800626c <__multiply>
 800642c:	4680      	mov	r8, r0
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff fe4b 	bl	80060cc <_Bfree>
 8006436:	4647      	mov	r7, r8
 8006438:	106d      	asrs	r5, r5, #1
 800643a:	d00b      	beq.n	8006454 <__pow5mult+0xa0>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	b938      	cbnz	r0, 8006450 <__pow5mult+0x9c>
 8006440:	4622      	mov	r2, r4
 8006442:	4621      	mov	r1, r4
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ff11 	bl	800626c <__multiply>
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f8c0 9000 	str.w	r9, [r0]
 8006450:	4604      	mov	r4, r0
 8006452:	e7e4      	b.n	800641e <__pow5mult+0x6a>
 8006454:	4638      	mov	r0, r7
 8006456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645a:	bf00      	nop
 800645c:	080076d8 	.word	0x080076d8
 8006460:	080074fd 	.word	0x080074fd
 8006464:	08007584 	.word	0x08007584

08006468 <__lshift>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	460c      	mov	r4, r1
 800646e:	4607      	mov	r7, r0
 8006470:	4691      	mov	r9, r2
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	6849      	ldr	r1, [r1, #4]
 8006476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006480:	f108 0601 	add.w	r6, r8, #1
 8006484:	42b3      	cmp	r3, r6
 8006486:	db0b      	blt.n	80064a0 <__lshift+0x38>
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff fddf 	bl	800604c <_Balloc>
 800648e:	4605      	mov	r5, r0
 8006490:	b948      	cbnz	r0, 80064a6 <__lshift+0x3e>
 8006492:	4602      	mov	r2, r0
 8006494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006498:	4b27      	ldr	r3, [pc, #156]	; (8006538 <__lshift+0xd0>)
 800649a:	4828      	ldr	r0, [pc, #160]	; (800653c <__lshift+0xd4>)
 800649c:	f000 f966 	bl	800676c <__assert_func>
 80064a0:	3101      	adds	r1, #1
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	e7ee      	b.n	8006484 <__lshift+0x1c>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f100 0114 	add.w	r1, r0, #20
 80064ac:	f100 0210 	add.w	r2, r0, #16
 80064b0:	4618      	mov	r0, r3
 80064b2:	4553      	cmp	r3, sl
 80064b4:	db33      	blt.n	800651e <__lshift+0xb6>
 80064b6:	6920      	ldr	r0, [r4, #16]
 80064b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064bc:	f104 0314 	add.w	r3, r4, #20
 80064c0:	f019 091f 	ands.w	r9, r9, #31
 80064c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064cc:	d02b      	beq.n	8006526 <__lshift+0xbe>
 80064ce:	468a      	mov	sl, r1
 80064d0:	2200      	movs	r2, #0
 80064d2:	f1c9 0e20 	rsb	lr, r9, #32
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	fa00 f009 	lsl.w	r0, r0, r9
 80064dc:	4302      	orrs	r2, r0
 80064de:	f84a 2b04 	str.w	r2, [sl], #4
 80064e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e6:	459c      	cmp	ip, r3
 80064e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80064ec:	d8f3      	bhi.n	80064d6 <__lshift+0x6e>
 80064ee:	ebac 0304 	sub.w	r3, ip, r4
 80064f2:	3b15      	subs	r3, #21
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	3304      	adds	r3, #4
 80064fa:	f104 0015 	add.w	r0, r4, #21
 80064fe:	4584      	cmp	ip, r0
 8006500:	bf38      	it	cc
 8006502:	2304      	movcc	r3, #4
 8006504:	50ca      	str	r2, [r1, r3]
 8006506:	b10a      	cbz	r2, 800650c <__lshift+0xa4>
 8006508:	f108 0602 	add.w	r6, r8, #2
 800650c:	3e01      	subs	r6, #1
 800650e:	4638      	mov	r0, r7
 8006510:	4621      	mov	r1, r4
 8006512:	612e      	str	r6, [r5, #16]
 8006514:	f7ff fdda 	bl	80060cc <_Bfree>
 8006518:	4628      	mov	r0, r5
 800651a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006522:	3301      	adds	r3, #1
 8006524:	e7c5      	b.n	80064b2 <__lshift+0x4a>
 8006526:	3904      	subs	r1, #4
 8006528:	f853 2b04 	ldr.w	r2, [r3], #4
 800652c:	459c      	cmp	ip, r3
 800652e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006532:	d8f9      	bhi.n	8006528 <__lshift+0xc0>
 8006534:	e7ea      	b.n	800650c <__lshift+0xa4>
 8006536:	bf00      	nop
 8006538:	08007573 	.word	0x08007573
 800653c:	08007584 	.word	0x08007584

08006540 <__mcmp>:
 8006540:	4603      	mov	r3, r0
 8006542:	690a      	ldr	r2, [r1, #16]
 8006544:	6900      	ldr	r0, [r0, #16]
 8006546:	b530      	push	{r4, r5, lr}
 8006548:	1a80      	subs	r0, r0, r2
 800654a:	d10d      	bne.n	8006568 <__mcmp+0x28>
 800654c:	3314      	adds	r3, #20
 800654e:	3114      	adds	r1, #20
 8006550:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006554:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800655c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006560:	4295      	cmp	r5, r2
 8006562:	d002      	beq.n	800656a <__mcmp+0x2a>
 8006564:	d304      	bcc.n	8006570 <__mcmp+0x30>
 8006566:	2001      	movs	r0, #1
 8006568:	bd30      	pop	{r4, r5, pc}
 800656a:	42a3      	cmp	r3, r4
 800656c:	d3f4      	bcc.n	8006558 <__mcmp+0x18>
 800656e:	e7fb      	b.n	8006568 <__mcmp+0x28>
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e7f8      	b.n	8006568 <__mcmp+0x28>
	...

08006578 <__mdiff>:
 8006578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	4606      	mov	r6, r0
 8006580:	4611      	mov	r1, r2
 8006582:	4620      	mov	r0, r4
 8006584:	4692      	mov	sl, r2
 8006586:	f7ff ffdb 	bl	8006540 <__mcmp>
 800658a:	1e05      	subs	r5, r0, #0
 800658c:	d111      	bne.n	80065b2 <__mdiff+0x3a>
 800658e:	4629      	mov	r1, r5
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff fd5b 	bl	800604c <_Balloc>
 8006596:	4602      	mov	r2, r0
 8006598:	b928      	cbnz	r0, 80065a6 <__mdiff+0x2e>
 800659a:	f240 2132 	movw	r1, #562	; 0x232
 800659e:	4b3c      	ldr	r3, [pc, #240]	; (8006690 <__mdiff+0x118>)
 80065a0:	483c      	ldr	r0, [pc, #240]	; (8006694 <__mdiff+0x11c>)
 80065a2:	f000 f8e3 	bl	800676c <__assert_func>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065ac:	4610      	mov	r0, r2
 80065ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b2:	bfa4      	itt	ge
 80065b4:	4653      	movge	r3, sl
 80065b6:	46a2      	movge	sl, r4
 80065b8:	4630      	mov	r0, r6
 80065ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80065be:	bfa6      	itte	ge
 80065c0:	461c      	movge	r4, r3
 80065c2:	2500      	movge	r5, #0
 80065c4:	2501      	movlt	r5, #1
 80065c6:	f7ff fd41 	bl	800604c <_Balloc>
 80065ca:	4602      	mov	r2, r0
 80065cc:	b918      	cbnz	r0, 80065d6 <__mdiff+0x5e>
 80065ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065d2:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <__mdiff+0x118>)
 80065d4:	e7e4      	b.n	80065a0 <__mdiff+0x28>
 80065d6:	f100 0814 	add.w	r8, r0, #20
 80065da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80065de:	60c5      	str	r5, [r0, #12]
 80065e0:	f04f 0c00 	mov.w	ip, #0
 80065e4:	f10a 0514 	add.w	r5, sl, #20
 80065e8:	f10a 0010 	add.w	r0, sl, #16
 80065ec:	46c2      	mov	sl, r8
 80065ee:	6926      	ldr	r6, [r4, #16]
 80065f0:	f104 0914 	add.w	r9, r4, #20
 80065f4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80065f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065fc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006600:	f859 3b04 	ldr.w	r3, [r9], #4
 8006604:	fa1f f18b 	uxth.w	r1, fp
 8006608:	4461      	add	r1, ip
 800660a:	fa1f fc83 	uxth.w	ip, r3
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	eba1 010c 	sub.w	r1, r1, ip
 8006614:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006618:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800661c:	b289      	uxth	r1, r1
 800661e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006622:	454e      	cmp	r6, r9
 8006624:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006628:	f84a 3b04 	str.w	r3, [sl], #4
 800662c:	d8e6      	bhi.n	80065fc <__mdiff+0x84>
 800662e:	1b33      	subs	r3, r6, r4
 8006630:	3b15      	subs	r3, #21
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	3415      	adds	r4, #21
 8006638:	3304      	adds	r3, #4
 800663a:	42a6      	cmp	r6, r4
 800663c:	bf38      	it	cc
 800663e:	2304      	movcc	r3, #4
 8006640:	441d      	add	r5, r3
 8006642:	4443      	add	r3, r8
 8006644:	461e      	mov	r6, r3
 8006646:	462c      	mov	r4, r5
 8006648:	4574      	cmp	r4, lr
 800664a:	d30e      	bcc.n	800666a <__mdiff+0xf2>
 800664c:	f10e 0103 	add.w	r1, lr, #3
 8006650:	1b49      	subs	r1, r1, r5
 8006652:	f021 0103 	bic.w	r1, r1, #3
 8006656:	3d03      	subs	r5, #3
 8006658:	45ae      	cmp	lr, r5
 800665a:	bf38      	it	cc
 800665c:	2100      	movcc	r1, #0
 800665e:	4419      	add	r1, r3
 8006660:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006664:	b18b      	cbz	r3, 800668a <__mdiff+0x112>
 8006666:	6117      	str	r7, [r2, #16]
 8006668:	e7a0      	b.n	80065ac <__mdiff+0x34>
 800666a:	f854 8b04 	ldr.w	r8, [r4], #4
 800666e:	fa1f f188 	uxth.w	r1, r8
 8006672:	4461      	add	r1, ip
 8006674:	1408      	asrs	r0, r1, #16
 8006676:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800667a:	b289      	uxth	r1, r1
 800667c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006684:	f846 1b04 	str.w	r1, [r6], #4
 8006688:	e7de      	b.n	8006648 <__mdiff+0xd0>
 800668a:	3f01      	subs	r7, #1
 800668c:	e7e8      	b.n	8006660 <__mdiff+0xe8>
 800668e:	bf00      	nop
 8006690:	08007573 	.word	0x08007573
 8006694:	08007584 	.word	0x08007584

08006698 <__d2b>:
 8006698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800669c:	2101      	movs	r1, #1
 800669e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066a2:	4690      	mov	r8, r2
 80066a4:	461d      	mov	r5, r3
 80066a6:	f7ff fcd1 	bl	800604c <_Balloc>
 80066aa:	4604      	mov	r4, r0
 80066ac:	b930      	cbnz	r0, 80066bc <__d2b+0x24>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f240 310a 	movw	r1, #778	; 0x30a
 80066b4:	4b24      	ldr	r3, [pc, #144]	; (8006748 <__d2b+0xb0>)
 80066b6:	4825      	ldr	r0, [pc, #148]	; (800674c <__d2b+0xb4>)
 80066b8:	f000 f858 	bl	800676c <__assert_func>
 80066bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80066c4:	bb2d      	cbnz	r5, 8006712 <__d2b+0x7a>
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	f1b8 0300 	subs.w	r3, r8, #0
 80066cc:	d026      	beq.n	800671c <__d2b+0x84>
 80066ce:	4668      	mov	r0, sp
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	f7ff fd87 	bl	80061e4 <__lo0bits>
 80066d6:	9900      	ldr	r1, [sp, #0]
 80066d8:	b1f0      	cbz	r0, 8006718 <__d2b+0x80>
 80066da:	9a01      	ldr	r2, [sp, #4]
 80066dc:	f1c0 0320 	rsb	r3, r0, #32
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	430b      	orrs	r3, r1
 80066e6:	40c2      	lsrs	r2, r0
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf14      	ite	ne
 80066f2:	2102      	movne	r1, #2
 80066f4:	2101      	moveq	r1, #1
 80066f6:	61a3      	str	r3, [r4, #24]
 80066f8:	6121      	str	r1, [r4, #16]
 80066fa:	b1c5      	cbz	r5, 800672e <__d2b+0x96>
 80066fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006700:	4405      	add	r5, r0
 8006702:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006706:	603d      	str	r5, [r7, #0]
 8006708:	6030      	str	r0, [r6, #0]
 800670a:	4620      	mov	r0, r4
 800670c:	b002      	add	sp, #8
 800670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006716:	e7d6      	b.n	80066c6 <__d2b+0x2e>
 8006718:	6161      	str	r1, [r4, #20]
 800671a:	e7e7      	b.n	80066ec <__d2b+0x54>
 800671c:	a801      	add	r0, sp, #4
 800671e:	f7ff fd61 	bl	80061e4 <__lo0bits>
 8006722:	2101      	movs	r1, #1
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	6121      	str	r1, [r4, #16]
 8006728:	6163      	str	r3, [r4, #20]
 800672a:	3020      	adds	r0, #32
 800672c:	e7e5      	b.n	80066fa <__d2b+0x62>
 800672e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006732:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006736:	6038      	str	r0, [r7, #0]
 8006738:	6918      	ldr	r0, [r3, #16]
 800673a:	f7ff fd33 	bl	80061a4 <__hi0bits>
 800673e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006742:	6031      	str	r1, [r6, #0]
 8006744:	e7e1      	b.n	800670a <__d2b+0x72>
 8006746:	bf00      	nop
 8006748:	08007573 	.word	0x08007573
 800674c:	08007584 	.word	0x08007584

08006750 <_calloc_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	fb02 f501 	mul.w	r5, r2, r1
 8006756:	4629      	mov	r1, r5
 8006758:	f7fe f904 	bl	8004964 <_malloc_r>
 800675c:	4604      	mov	r4, r0
 800675e:	b118      	cbz	r0, 8006768 <_calloc_r+0x18>
 8006760:	462a      	mov	r2, r5
 8006762:	2100      	movs	r1, #0
 8006764:	f7fe f8aa 	bl	80048bc <memset>
 8006768:	4620      	mov	r0, r4
 800676a:	bd38      	pop	{r3, r4, r5, pc}

0800676c <__assert_func>:
 800676c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800676e:	4614      	mov	r4, r2
 8006770:	461a      	mov	r2, r3
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <__assert_func+0x2c>)
 8006774:	4605      	mov	r5, r0
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68d8      	ldr	r0, [r3, #12]
 800677a:	b14c      	cbz	r4, 8006790 <__assert_func+0x24>
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <__assert_func+0x30>)
 800677e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006782:	9100      	str	r1, [sp, #0]
 8006784:	462b      	mov	r3, r5
 8006786:	4906      	ldr	r1, [pc, #24]	; (80067a0 <__assert_func+0x34>)
 8006788:	f000 f80e 	bl	80067a8 <fiprintf>
 800678c:	f000 fa58 	bl	8006c40 <abort>
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <__assert_func+0x38>)
 8006792:	461c      	mov	r4, r3
 8006794:	e7f3      	b.n	800677e <__assert_func+0x12>
 8006796:	bf00      	nop
 8006798:	2000000c 	.word	0x2000000c
 800679c:	080076e4 	.word	0x080076e4
 80067a0:	080076f1 	.word	0x080076f1
 80067a4:	0800771f 	.word	0x0800771f

080067a8 <fiprintf>:
 80067a8:	b40e      	push	{r1, r2, r3}
 80067aa:	b503      	push	{r0, r1, lr}
 80067ac:	4601      	mov	r1, r0
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	4805      	ldr	r0, [pc, #20]	; (80067c8 <fiprintf+0x20>)
 80067b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b6:	6800      	ldr	r0, [r0, #0]
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	f000 f843 	bl	8006844 <_vfiprintf_r>
 80067be:	b002      	add	sp, #8
 80067c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067c4:	b003      	add	sp, #12
 80067c6:	4770      	bx	lr
 80067c8:	2000000c 	.word	0x2000000c

080067cc <__retarget_lock_init_recursive>:
 80067cc:	4770      	bx	lr

080067ce <__retarget_lock_acquire_recursive>:
 80067ce:	4770      	bx	lr

080067d0 <__retarget_lock_release_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <__ascii_mbtowc>:
 80067d2:	b082      	sub	sp, #8
 80067d4:	b901      	cbnz	r1, 80067d8 <__ascii_mbtowc+0x6>
 80067d6:	a901      	add	r1, sp, #4
 80067d8:	b142      	cbz	r2, 80067ec <__ascii_mbtowc+0x1a>
 80067da:	b14b      	cbz	r3, 80067f0 <__ascii_mbtowc+0x1e>
 80067dc:	7813      	ldrb	r3, [r2, #0]
 80067de:	600b      	str	r3, [r1, #0]
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	1e10      	subs	r0, r2, #0
 80067e4:	bf18      	it	ne
 80067e6:	2001      	movne	r0, #1
 80067e8:	b002      	add	sp, #8
 80067ea:	4770      	bx	lr
 80067ec:	4610      	mov	r0, r2
 80067ee:	e7fb      	b.n	80067e8 <__ascii_mbtowc+0x16>
 80067f0:	f06f 0001 	mvn.w	r0, #1
 80067f4:	e7f8      	b.n	80067e8 <__ascii_mbtowc+0x16>

080067f6 <__sfputc_r>:
 80067f6:	6893      	ldr	r3, [r2, #8]
 80067f8:	b410      	push	{r4}
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	6093      	str	r3, [r2, #8]
 8006800:	da07      	bge.n	8006812 <__sfputc_r+0x1c>
 8006802:	6994      	ldr	r4, [r2, #24]
 8006804:	42a3      	cmp	r3, r4
 8006806:	db01      	blt.n	800680c <__sfputc_r+0x16>
 8006808:	290a      	cmp	r1, #10
 800680a:	d102      	bne.n	8006812 <__sfputc_r+0x1c>
 800680c:	bc10      	pop	{r4}
 800680e:	f000 b949 	b.w	8006aa4 <__swbuf_r>
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	1c58      	adds	r0, r3, #1
 8006816:	6010      	str	r0, [r2, #0]
 8006818:	7019      	strb	r1, [r3, #0]
 800681a:	4608      	mov	r0, r1
 800681c:	bc10      	pop	{r4}
 800681e:	4770      	bx	lr

08006820 <__sfputs_r>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	4614      	mov	r4, r2
 8006828:	18d5      	adds	r5, r2, r3
 800682a:	42ac      	cmp	r4, r5
 800682c:	d101      	bne.n	8006832 <__sfputs_r+0x12>
 800682e:	2000      	movs	r0, #0
 8006830:	e007      	b.n	8006842 <__sfputs_r+0x22>
 8006832:	463a      	mov	r2, r7
 8006834:	4630      	mov	r0, r6
 8006836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683a:	f7ff ffdc 	bl	80067f6 <__sfputc_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	d1f3      	bne.n	800682a <__sfputs_r+0xa>
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006844 <_vfiprintf_r>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	460d      	mov	r5, r1
 800684a:	4614      	mov	r4, r2
 800684c:	4698      	mov	r8, r3
 800684e:	4606      	mov	r6, r0
 8006850:	b09d      	sub	sp, #116	; 0x74
 8006852:	b118      	cbz	r0, 800685c <_vfiprintf_r+0x18>
 8006854:	6983      	ldr	r3, [r0, #24]
 8006856:	b90b      	cbnz	r3, 800685c <_vfiprintf_r+0x18>
 8006858:	f000 fb14 	bl	8006e84 <__sinit>
 800685c:	4b89      	ldr	r3, [pc, #548]	; (8006a84 <_vfiprintf_r+0x240>)
 800685e:	429d      	cmp	r5, r3
 8006860:	d11b      	bne.n	800689a <_vfiprintf_r+0x56>
 8006862:	6875      	ldr	r5, [r6, #4]
 8006864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d405      	bmi.n	8006876 <_vfiprintf_r+0x32>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	059a      	lsls	r2, r3, #22
 800686e:	d402      	bmi.n	8006876 <_vfiprintf_r+0x32>
 8006870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006872:	f7ff ffac 	bl	80067ce <__retarget_lock_acquire_recursive>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	d501      	bpl.n	8006880 <_vfiprintf_r+0x3c>
 800687c:	692b      	ldr	r3, [r5, #16]
 800687e:	b9eb      	cbnz	r3, 80068bc <_vfiprintf_r+0x78>
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f000 f96e 	bl	8006b64 <__swsetup_r>
 8006888:	b1c0      	cbz	r0, 80068bc <_vfiprintf_r+0x78>
 800688a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800688c:	07dc      	lsls	r4, r3, #31
 800688e:	d50e      	bpl.n	80068ae <_vfiprintf_r+0x6a>
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	b01d      	add	sp, #116	; 0x74
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689a:	4b7b      	ldr	r3, [pc, #492]	; (8006a88 <_vfiprintf_r+0x244>)
 800689c:	429d      	cmp	r5, r3
 800689e:	d101      	bne.n	80068a4 <_vfiprintf_r+0x60>
 80068a0:	68b5      	ldr	r5, [r6, #8]
 80068a2:	e7df      	b.n	8006864 <_vfiprintf_r+0x20>
 80068a4:	4b79      	ldr	r3, [pc, #484]	; (8006a8c <_vfiprintf_r+0x248>)
 80068a6:	429d      	cmp	r5, r3
 80068a8:	bf08      	it	eq
 80068aa:	68f5      	ldreq	r5, [r6, #12]
 80068ac:	e7da      	b.n	8006864 <_vfiprintf_r+0x20>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	0598      	lsls	r0, r3, #22
 80068b2:	d4ed      	bmi.n	8006890 <_vfiprintf_r+0x4c>
 80068b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068b6:	f7ff ff8b 	bl	80067d0 <__retarget_lock_release_recursive>
 80068ba:	e7e9      	b.n	8006890 <_vfiprintf_r+0x4c>
 80068bc:	2300      	movs	r3, #0
 80068be:	9309      	str	r3, [sp, #36]	; 0x24
 80068c0:	2320      	movs	r3, #32
 80068c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c6:	2330      	movs	r3, #48	; 0x30
 80068c8:	f04f 0901 	mov.w	r9, #1
 80068cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80068d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a90 <_vfiprintf_r+0x24c>
 80068d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d8:	4623      	mov	r3, r4
 80068da:	469a      	mov	sl, r3
 80068dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e0:	b10a      	cbz	r2, 80068e6 <_vfiprintf_r+0xa2>
 80068e2:	2a25      	cmp	r2, #37	; 0x25
 80068e4:	d1f9      	bne.n	80068da <_vfiprintf_r+0x96>
 80068e6:	ebba 0b04 	subs.w	fp, sl, r4
 80068ea:	d00b      	beq.n	8006904 <_vfiprintf_r+0xc0>
 80068ec:	465b      	mov	r3, fp
 80068ee:	4622      	mov	r2, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff94 	bl	8006820 <__sfputs_r>
 80068f8:	3001      	adds	r0, #1
 80068fa:	f000 80aa 	beq.w	8006a52 <_vfiprintf_r+0x20e>
 80068fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006900:	445a      	add	r2, fp
 8006902:	9209      	str	r2, [sp, #36]	; 0x24
 8006904:	f89a 3000 	ldrb.w	r3, [sl]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80a2 	beq.w	8006a52 <_vfiprintf_r+0x20e>
 800690e:	2300      	movs	r3, #0
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006918:	f10a 0a01 	add.w	sl, sl, #1
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006924:	931a      	str	r3, [sp, #104]	; 0x68
 8006926:	4654      	mov	r4, sl
 8006928:	2205      	movs	r2, #5
 800692a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692e:	4858      	ldr	r0, [pc, #352]	; (8006a90 <_vfiprintf_r+0x24c>)
 8006930:	f7ff fb64 	bl	8005ffc <memchr>
 8006934:	9a04      	ldr	r2, [sp, #16]
 8006936:	b9d8      	cbnz	r0, 8006970 <_vfiprintf_r+0x12c>
 8006938:	06d1      	lsls	r1, r2, #27
 800693a:	bf44      	itt	mi
 800693c:	2320      	movmi	r3, #32
 800693e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006942:	0713      	lsls	r3, r2, #28
 8006944:	bf44      	itt	mi
 8006946:	232b      	movmi	r3, #43	; 0x2b
 8006948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694c:	f89a 3000 	ldrb.w	r3, [sl]
 8006950:	2b2a      	cmp	r3, #42	; 0x2a
 8006952:	d015      	beq.n	8006980 <_vfiprintf_r+0x13c>
 8006954:	4654      	mov	r4, sl
 8006956:	2000      	movs	r0, #0
 8006958:	f04f 0c0a 	mov.w	ip, #10
 800695c:	9a07      	ldr	r2, [sp, #28]
 800695e:	4621      	mov	r1, r4
 8006960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006964:	3b30      	subs	r3, #48	; 0x30
 8006966:	2b09      	cmp	r3, #9
 8006968:	d94e      	bls.n	8006a08 <_vfiprintf_r+0x1c4>
 800696a:	b1b0      	cbz	r0, 800699a <_vfiprintf_r+0x156>
 800696c:	9207      	str	r2, [sp, #28]
 800696e:	e014      	b.n	800699a <_vfiprintf_r+0x156>
 8006970:	eba0 0308 	sub.w	r3, r0, r8
 8006974:	fa09 f303 	lsl.w	r3, r9, r3
 8006978:	4313      	orrs	r3, r2
 800697a:	46a2      	mov	sl, r4
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	e7d2      	b.n	8006926 <_vfiprintf_r+0xe2>
 8006980:	9b03      	ldr	r3, [sp, #12]
 8006982:	1d19      	adds	r1, r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	9103      	str	r1, [sp, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	bfbb      	ittet	lt
 800698c:	425b      	neglt	r3, r3
 800698e:	f042 0202 	orrlt.w	r2, r2, #2
 8006992:	9307      	strge	r3, [sp, #28]
 8006994:	9307      	strlt	r3, [sp, #28]
 8006996:	bfb8      	it	lt
 8006998:	9204      	strlt	r2, [sp, #16]
 800699a:	7823      	ldrb	r3, [r4, #0]
 800699c:	2b2e      	cmp	r3, #46	; 0x2e
 800699e:	d10c      	bne.n	80069ba <_vfiprintf_r+0x176>
 80069a0:	7863      	ldrb	r3, [r4, #1]
 80069a2:	2b2a      	cmp	r3, #42	; 0x2a
 80069a4:	d135      	bne.n	8006a12 <_vfiprintf_r+0x1ce>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	3402      	adds	r4, #2
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9203      	str	r2, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb8      	it	lt
 80069b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b8:	9305      	str	r3, [sp, #20]
 80069ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006aa0 <_vfiprintf_r+0x25c>
 80069be:	2203      	movs	r2, #3
 80069c0:	4650      	mov	r0, sl
 80069c2:	7821      	ldrb	r1, [r4, #0]
 80069c4:	f7ff fb1a 	bl	8005ffc <memchr>
 80069c8:	b140      	cbz	r0, 80069dc <_vfiprintf_r+0x198>
 80069ca:	2340      	movs	r3, #64	; 0x40
 80069cc:	eba0 000a 	sub.w	r0, r0, sl
 80069d0:	fa03 f000 	lsl.w	r0, r3, r0
 80069d4:	9b04      	ldr	r3, [sp, #16]
 80069d6:	3401      	adds	r4, #1
 80069d8:	4303      	orrs	r3, r0
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e0:	2206      	movs	r2, #6
 80069e2:	482c      	ldr	r0, [pc, #176]	; (8006a94 <_vfiprintf_r+0x250>)
 80069e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e8:	f7ff fb08 	bl	8005ffc <memchr>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d03f      	beq.n	8006a70 <_vfiprintf_r+0x22c>
 80069f0:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <_vfiprintf_r+0x254>)
 80069f2:	bb1b      	cbnz	r3, 8006a3c <_vfiprintf_r+0x1f8>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	3307      	adds	r3, #7
 80069f8:	f023 0307 	bic.w	r3, r3, #7
 80069fc:	3308      	adds	r3, #8
 80069fe:	9303      	str	r3, [sp, #12]
 8006a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a02:	443b      	add	r3, r7
 8006a04:	9309      	str	r3, [sp, #36]	; 0x24
 8006a06:	e767      	b.n	80068d8 <_vfiprintf_r+0x94>
 8006a08:	460c      	mov	r4, r1
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a10:	e7a5      	b.n	800695e <_vfiprintf_r+0x11a>
 8006a12:	2300      	movs	r3, #0
 8006a14:	f04f 0c0a 	mov.w	ip, #10
 8006a18:	4619      	mov	r1, r3
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a24:	3a30      	subs	r2, #48	; 0x30
 8006a26:	2a09      	cmp	r2, #9
 8006a28:	d903      	bls.n	8006a32 <_vfiprintf_r+0x1ee>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0c5      	beq.n	80069ba <_vfiprintf_r+0x176>
 8006a2e:	9105      	str	r1, [sp, #20]
 8006a30:	e7c3      	b.n	80069ba <_vfiprintf_r+0x176>
 8006a32:	4604      	mov	r4, r0
 8006a34:	2301      	movs	r3, #1
 8006a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3a:	e7f0      	b.n	8006a1e <_vfiprintf_r+0x1da>
 8006a3c:	ab03      	add	r3, sp, #12
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	462a      	mov	r2, r5
 8006a42:	4630      	mov	r0, r6
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <_vfiprintf_r+0x258>)
 8006a46:	a904      	add	r1, sp, #16
 8006a48:	f7fe f884 	bl	8004b54 <_printf_float>
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	1c78      	adds	r0, r7, #1
 8006a50:	d1d6      	bne.n	8006a00 <_vfiprintf_r+0x1bc>
 8006a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a54:	07d9      	lsls	r1, r3, #31
 8006a56:	d405      	bmi.n	8006a64 <_vfiprintf_r+0x220>
 8006a58:	89ab      	ldrh	r3, [r5, #12]
 8006a5a:	059a      	lsls	r2, r3, #22
 8006a5c:	d402      	bmi.n	8006a64 <_vfiprintf_r+0x220>
 8006a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a60:	f7ff feb6 	bl	80067d0 <__retarget_lock_release_recursive>
 8006a64:	89ab      	ldrh	r3, [r5, #12]
 8006a66:	065b      	lsls	r3, r3, #25
 8006a68:	f53f af12 	bmi.w	8006890 <_vfiprintf_r+0x4c>
 8006a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a6e:	e711      	b.n	8006894 <_vfiprintf_r+0x50>
 8006a70:	ab03      	add	r3, sp, #12
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	462a      	mov	r2, r5
 8006a76:	4630      	mov	r0, r6
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <_vfiprintf_r+0x258>)
 8006a7a:	a904      	add	r1, sp, #16
 8006a7c:	f7fe fb06 	bl	800508c <_printf_i>
 8006a80:	e7e4      	b.n	8006a4c <_vfiprintf_r+0x208>
 8006a82:	bf00      	nop
 8006a84:	0800785c 	.word	0x0800785c
 8006a88:	0800787c 	.word	0x0800787c
 8006a8c:	0800783c 	.word	0x0800783c
 8006a90:	0800772a 	.word	0x0800772a
 8006a94:	08007734 	.word	0x08007734
 8006a98:	08004b55 	.word	0x08004b55
 8006a9c:	08006821 	.word	0x08006821
 8006aa0:	08007730 	.word	0x08007730

08006aa4 <__swbuf_r>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	460e      	mov	r6, r1
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	4605      	mov	r5, r0
 8006aac:	b118      	cbz	r0, 8006ab6 <__swbuf_r+0x12>
 8006aae:	6983      	ldr	r3, [r0, #24]
 8006ab0:	b90b      	cbnz	r3, 8006ab6 <__swbuf_r+0x12>
 8006ab2:	f000 f9e7 	bl	8006e84 <__sinit>
 8006ab6:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <__swbuf_r+0x98>)
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d12b      	bne.n	8006b14 <__swbuf_r+0x70>
 8006abc:	686c      	ldr	r4, [r5, #4]
 8006abe:	69a3      	ldr	r3, [r4, #24]
 8006ac0:	60a3      	str	r3, [r4, #8]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	071a      	lsls	r2, r3, #28
 8006ac6:	d52f      	bpl.n	8006b28 <__swbuf_r+0x84>
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	b36b      	cbz	r3, 8006b28 <__swbuf_r+0x84>
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	b2f6      	uxtb	r6, r6
 8006ad2:	1ac0      	subs	r0, r0, r3
 8006ad4:	6963      	ldr	r3, [r4, #20]
 8006ad6:	4637      	mov	r7, r6
 8006ad8:	4283      	cmp	r3, r0
 8006ada:	dc04      	bgt.n	8006ae6 <__swbuf_r+0x42>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f93c 	bl	8006d5c <_fflush_r>
 8006ae4:	bb30      	cbnz	r0, 8006b34 <__swbuf_r+0x90>
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	3001      	adds	r0, #1
 8006aea:	3b01      	subs	r3, #1
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	701e      	strb	r6, [r3, #0]
 8006af6:	6963      	ldr	r3, [r4, #20]
 8006af8:	4283      	cmp	r3, r0
 8006afa:	d004      	beq.n	8006b06 <__swbuf_r+0x62>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	07db      	lsls	r3, r3, #31
 8006b00:	d506      	bpl.n	8006b10 <__swbuf_r+0x6c>
 8006b02:	2e0a      	cmp	r6, #10
 8006b04:	d104      	bne.n	8006b10 <__swbuf_r+0x6c>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 f927 	bl	8006d5c <_fflush_r>
 8006b0e:	b988      	cbnz	r0, 8006b34 <__swbuf_r+0x90>
 8006b10:	4638      	mov	r0, r7
 8006b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <__swbuf_r+0x9c>)
 8006b16:	429c      	cmp	r4, r3
 8006b18:	d101      	bne.n	8006b1e <__swbuf_r+0x7a>
 8006b1a:	68ac      	ldr	r4, [r5, #8]
 8006b1c:	e7cf      	b.n	8006abe <__swbuf_r+0x1a>
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <__swbuf_r+0xa0>)
 8006b20:	429c      	cmp	r4, r3
 8006b22:	bf08      	it	eq
 8006b24:	68ec      	ldreq	r4, [r5, #12]
 8006b26:	e7ca      	b.n	8006abe <__swbuf_r+0x1a>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 f81a 	bl	8006b64 <__swsetup_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d0cb      	beq.n	8006acc <__swbuf_r+0x28>
 8006b34:	f04f 37ff 	mov.w	r7, #4294967295
 8006b38:	e7ea      	b.n	8006b10 <__swbuf_r+0x6c>
 8006b3a:	bf00      	nop
 8006b3c:	0800785c 	.word	0x0800785c
 8006b40:	0800787c 	.word	0x0800787c
 8006b44:	0800783c 	.word	0x0800783c

08006b48 <__ascii_wctomb>:
 8006b48:	4603      	mov	r3, r0
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	b141      	cbz	r1, 8006b60 <__ascii_wctomb+0x18>
 8006b4e:	2aff      	cmp	r2, #255	; 0xff
 8006b50:	d904      	bls.n	8006b5c <__ascii_wctomb+0x14>
 8006b52:	228a      	movs	r2, #138	; 0x8a
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	4770      	bx	lr
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	700a      	strb	r2, [r1, #0]
 8006b60:	4770      	bx	lr
	...

08006b64 <__swsetup_r>:
 8006b64:	4b32      	ldr	r3, [pc, #200]	; (8006c30 <__swsetup_r+0xcc>)
 8006b66:	b570      	push	{r4, r5, r6, lr}
 8006b68:	681d      	ldr	r5, [r3, #0]
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	b125      	cbz	r5, 8006b7a <__swsetup_r+0x16>
 8006b70:	69ab      	ldr	r3, [r5, #24]
 8006b72:	b913      	cbnz	r3, 8006b7a <__swsetup_r+0x16>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f985 	bl	8006e84 <__sinit>
 8006b7a:	4b2e      	ldr	r3, [pc, #184]	; (8006c34 <__swsetup_r+0xd0>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	d10f      	bne.n	8006ba0 <__swsetup_r+0x3c>
 8006b80:	686c      	ldr	r4, [r5, #4]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b88:	0719      	lsls	r1, r3, #28
 8006b8a:	d42c      	bmi.n	8006be6 <__swsetup_r+0x82>
 8006b8c:	06dd      	lsls	r5, r3, #27
 8006b8e:	d411      	bmi.n	8006bb4 <__swsetup_r+0x50>
 8006b90:	2309      	movs	r3, #9
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	e03e      	b.n	8006c1e <__swsetup_r+0xba>
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <__swsetup_r+0xd4>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d101      	bne.n	8006baa <__swsetup_r+0x46>
 8006ba6:	68ac      	ldr	r4, [r5, #8]
 8006ba8:	e7eb      	b.n	8006b82 <__swsetup_r+0x1e>
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <__swsetup_r+0xd8>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	bf08      	it	eq
 8006bb0:	68ec      	ldreq	r4, [r5, #12]
 8006bb2:	e7e6      	b.n	8006b82 <__swsetup_r+0x1e>
 8006bb4:	0758      	lsls	r0, r3, #29
 8006bb6:	d512      	bpl.n	8006bde <__swsetup_r+0x7a>
 8006bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bba:	b141      	cbz	r1, 8006bce <__swsetup_r+0x6a>
 8006bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d002      	beq.n	8006bca <__swsetup_r+0x66>
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7fd fe81 	bl	80048cc <_free_r>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f043 0308 	orr.w	r3, r3, #8
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	b94b      	cbnz	r3, 8006bfe <__swsetup_r+0x9a>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf4:	d003      	beq.n	8006bfe <__swsetup_r+0x9a>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 fa05 	bl	8007008 <__smakebuf_r>
 8006bfe:	89a0      	ldrh	r0, [r4, #12]
 8006c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c04:	f010 0301 	ands.w	r3, r0, #1
 8006c08:	d00a      	beq.n	8006c20 <__swsetup_r+0xbc>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60a3      	str	r3, [r4, #8]
 8006c0e:	6963      	ldr	r3, [r4, #20]
 8006c10:	425b      	negs	r3, r3
 8006c12:	61a3      	str	r3, [r4, #24]
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	b943      	cbnz	r3, 8006c2a <__swsetup_r+0xc6>
 8006c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c1c:	d1ba      	bne.n	8006b94 <__swsetup_r+0x30>
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	0781      	lsls	r1, r0, #30
 8006c22:	bf58      	it	pl
 8006c24:	6963      	ldrpl	r3, [r4, #20]
 8006c26:	60a3      	str	r3, [r4, #8]
 8006c28:	e7f4      	b.n	8006c14 <__swsetup_r+0xb0>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e7f7      	b.n	8006c1e <__swsetup_r+0xba>
 8006c2e:	bf00      	nop
 8006c30:	2000000c 	.word	0x2000000c
 8006c34:	0800785c 	.word	0x0800785c
 8006c38:	0800787c 	.word	0x0800787c
 8006c3c:	0800783c 	.word	0x0800783c

08006c40 <abort>:
 8006c40:	2006      	movs	r0, #6
 8006c42:	b508      	push	{r3, lr}
 8006c44:	f000 fa48 	bl	80070d8 <raise>
 8006c48:	2001      	movs	r0, #1
 8006c4a:	f7fa fe21 	bl	8001890 <_exit>
	...

08006c50 <__sflush_r>:
 8006c50:	898a      	ldrh	r2, [r1, #12]
 8006c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	4605      	mov	r5, r0
 8006c58:	0710      	lsls	r0, r2, #28
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	d458      	bmi.n	8006d10 <__sflush_r+0xc0>
 8006c5e:	684b      	ldr	r3, [r1, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dc05      	bgt.n	8006c70 <__sflush_r+0x20>
 8006c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dc02      	bgt.n	8006c70 <__sflush_r+0x20>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d0f9      	beq.n	8006c6a <__sflush_r+0x1a>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c7c:	682f      	ldr	r7, [r5, #0]
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	d032      	beq.n	8006ce8 <__sflush_r+0x98>
 8006c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	075a      	lsls	r2, r3, #29
 8006c88:	d505      	bpl.n	8006c96 <__sflush_r+0x46>
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	1ac0      	subs	r0, r0, r3
 8006c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c90:	b10b      	cbz	r3, 8006c96 <__sflush_r+0x46>
 8006c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c94:	1ac0      	subs	r0, r0, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	4602      	mov	r2, r0
 8006c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	6a21      	ldr	r1, [r4, #32]
 8006ca0:	47b0      	blx	r6
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	d106      	bne.n	8006cb6 <__sflush_r+0x66>
 8006ca8:	6829      	ldr	r1, [r5, #0]
 8006caa:	291d      	cmp	r1, #29
 8006cac:	d82c      	bhi.n	8006d08 <__sflush_r+0xb8>
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <__sflush_r+0x108>)
 8006cb0:	40ca      	lsrs	r2, r1
 8006cb2:	07d6      	lsls	r6, r2, #31
 8006cb4:	d528      	bpl.n	8006d08 <__sflush_r+0xb8>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	6062      	str	r2, [r4, #4]
 8006cba:	6922      	ldr	r2, [r4, #16]
 8006cbc:	04d9      	lsls	r1, r3, #19
 8006cbe:	6022      	str	r2, [r4, #0]
 8006cc0:	d504      	bpl.n	8006ccc <__sflush_r+0x7c>
 8006cc2:	1c42      	adds	r2, r0, #1
 8006cc4:	d101      	bne.n	8006cca <__sflush_r+0x7a>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b903      	cbnz	r3, 8006ccc <__sflush_r+0x7c>
 8006cca:	6560      	str	r0, [r4, #84]	; 0x54
 8006ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cce:	602f      	str	r7, [r5, #0]
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	d0ca      	beq.n	8006c6a <__sflush_r+0x1a>
 8006cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	d002      	beq.n	8006ce2 <__sflush_r+0x92>
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f7fd fdf5 	bl	80048cc <_free_r>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ce6:	e7c1      	b.n	8006c6c <__sflush_r+0x1c>
 8006ce8:	6a21      	ldr	r1, [r4, #32]
 8006cea:	2301      	movs	r3, #1
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b0      	blx	r6
 8006cf0:	1c41      	adds	r1, r0, #1
 8006cf2:	d1c7      	bne.n	8006c84 <__sflush_r+0x34>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0c4      	beq.n	8006c84 <__sflush_r+0x34>
 8006cfa:	2b1d      	cmp	r3, #29
 8006cfc:	d001      	beq.n	8006d02 <__sflush_r+0xb2>
 8006cfe:	2b16      	cmp	r3, #22
 8006d00:	d101      	bne.n	8006d06 <__sflush_r+0xb6>
 8006d02:	602f      	str	r7, [r5, #0]
 8006d04:	e7b1      	b.n	8006c6a <__sflush_r+0x1a>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	e7ad      	b.n	8006c6c <__sflush_r+0x1c>
 8006d10:	690f      	ldr	r7, [r1, #16]
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	d0a9      	beq.n	8006c6a <__sflush_r+0x1a>
 8006d16:	0793      	lsls	r3, r2, #30
 8006d18:	bf18      	it	ne
 8006d1a:	2300      	movne	r3, #0
 8006d1c:	680e      	ldr	r6, [r1, #0]
 8006d1e:	bf08      	it	eq
 8006d20:	694b      	ldreq	r3, [r1, #20]
 8006d22:	eba6 0807 	sub.w	r8, r6, r7
 8006d26:	600f      	str	r7, [r1, #0]
 8006d28:	608b      	str	r3, [r1, #8]
 8006d2a:	f1b8 0f00 	cmp.w	r8, #0
 8006d2e:	dd9c      	ble.n	8006c6a <__sflush_r+0x1a>
 8006d30:	4643      	mov	r3, r8
 8006d32:	463a      	mov	r2, r7
 8006d34:	4628      	mov	r0, r5
 8006d36:	6a21      	ldr	r1, [r4, #32]
 8006d38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d3a:	47b0      	blx	r6
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	dc06      	bgt.n	8006d4e <__sflush_r+0xfe>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	e78e      	b.n	8006c6c <__sflush_r+0x1c>
 8006d4e:	4407      	add	r7, r0
 8006d50:	eba8 0800 	sub.w	r8, r8, r0
 8006d54:	e7e9      	b.n	8006d2a <__sflush_r+0xda>
 8006d56:	bf00      	nop
 8006d58:	20400001 	.word	0x20400001

08006d5c <_fflush_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	690b      	ldr	r3, [r1, #16]
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	b913      	cbnz	r3, 8006d6c <_fflush_r+0x10>
 8006d66:	2500      	movs	r5, #0
 8006d68:	4628      	mov	r0, r5
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	b118      	cbz	r0, 8006d76 <_fflush_r+0x1a>
 8006d6e:	6983      	ldr	r3, [r0, #24]
 8006d70:	b90b      	cbnz	r3, 8006d76 <_fflush_r+0x1a>
 8006d72:	f000 f887 	bl	8006e84 <__sinit>
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <_fflush_r+0x6c>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	d11b      	bne.n	8006db4 <_fflush_r+0x58>
 8006d7c:	686c      	ldr	r4, [r5, #4]
 8006d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0ef      	beq.n	8006d66 <_fflush_r+0xa>
 8006d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d88:	07d0      	lsls	r0, r2, #31
 8006d8a:	d404      	bmi.n	8006d96 <_fflush_r+0x3a>
 8006d8c:	0599      	lsls	r1, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_fflush_r+0x3a>
 8006d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d92:	f7ff fd1c 	bl	80067ce <__retarget_lock_acquire_recursive>
 8006d96:	4628      	mov	r0, r5
 8006d98:	4621      	mov	r1, r4
 8006d9a:	f7ff ff59 	bl	8006c50 <__sflush_r>
 8006d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da0:	4605      	mov	r5, r0
 8006da2:	07da      	lsls	r2, r3, #31
 8006da4:	d4e0      	bmi.n	8006d68 <_fflush_r+0xc>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	059b      	lsls	r3, r3, #22
 8006daa:	d4dd      	bmi.n	8006d68 <_fflush_r+0xc>
 8006dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dae:	f7ff fd0f 	bl	80067d0 <__retarget_lock_release_recursive>
 8006db2:	e7d9      	b.n	8006d68 <_fflush_r+0xc>
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <_fflush_r+0x70>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d101      	bne.n	8006dbe <_fflush_r+0x62>
 8006dba:	68ac      	ldr	r4, [r5, #8]
 8006dbc:	e7df      	b.n	8006d7e <_fflush_r+0x22>
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <_fflush_r+0x74>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	bf08      	it	eq
 8006dc4:	68ec      	ldreq	r4, [r5, #12]
 8006dc6:	e7da      	b.n	8006d7e <_fflush_r+0x22>
 8006dc8:	0800785c 	.word	0x0800785c
 8006dcc:	0800787c 	.word	0x0800787c
 8006dd0:	0800783c 	.word	0x0800783c

08006dd4 <std>:
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e9c0 3300 	strd	r3, r3, [r0]
 8006dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de2:	6083      	str	r3, [r0, #8]
 8006de4:	8181      	strh	r1, [r0, #12]
 8006de6:	6643      	str	r3, [r0, #100]	; 0x64
 8006de8:	81c2      	strh	r2, [r0, #14]
 8006dea:	6183      	str	r3, [r0, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	2208      	movs	r2, #8
 8006df0:	305c      	adds	r0, #92	; 0x5c
 8006df2:	f7fd fd63 	bl	80048bc <memset>
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <std+0x38>)
 8006df8:	6224      	str	r4, [r4, #32]
 8006dfa:	6263      	str	r3, [r4, #36]	; 0x24
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <std+0x3c>)
 8006dfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <std+0x40>)
 8006e02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <std+0x44>)
 8006e06:	6323      	str	r3, [r4, #48]	; 0x30
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08007111 	.word	0x08007111
 8006e10:	08007133 	.word	0x08007133
 8006e14:	0800716b 	.word	0x0800716b
 8006e18:	0800718f 	.word	0x0800718f

08006e1c <_cleanup_r>:
 8006e1c:	4901      	ldr	r1, [pc, #4]	; (8006e24 <_cleanup_r+0x8>)
 8006e1e:	f000 b8af 	b.w	8006f80 <_fwalk_reent>
 8006e22:	bf00      	nop
 8006e24:	08006d5d 	.word	0x08006d5d

08006e28 <__sfmoreglue>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	2568      	movs	r5, #104	; 0x68
 8006e2c:	1e4a      	subs	r2, r1, #1
 8006e2e:	4355      	muls	r5, r2
 8006e30:	460e      	mov	r6, r1
 8006e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e36:	f7fd fd95 	bl	8004964 <_malloc_r>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	b140      	cbz	r0, 8006e50 <__sfmoreglue+0x28>
 8006e3e:	2100      	movs	r1, #0
 8006e40:	e9c0 1600 	strd	r1, r6, [r0]
 8006e44:	300c      	adds	r0, #12
 8006e46:	60a0      	str	r0, [r4, #8]
 8006e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e4c:	f7fd fd36 	bl	80048bc <memset>
 8006e50:	4620      	mov	r0, r4
 8006e52:	bd70      	pop	{r4, r5, r6, pc}

08006e54 <__sfp_lock_acquire>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__sfp_lock_acquire+0x8>)
 8006e56:	f7ff bcba 	b.w	80067ce <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000298 	.word	0x20000298

08006e60 <__sfp_lock_release>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sfp_lock_release+0x8>)
 8006e62:	f7ff bcb5 	b.w	80067d0 <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	20000298 	.word	0x20000298

08006e6c <__sinit_lock_acquire>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sinit_lock_acquire+0x8>)
 8006e6e:	f7ff bcae 	b.w	80067ce <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	20000293 	.word	0x20000293

08006e78 <__sinit_lock_release>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sinit_lock_release+0x8>)
 8006e7a:	f7ff bca9 	b.w	80067d0 <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20000293 	.word	0x20000293

08006e84 <__sinit>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	f7ff fff0 	bl	8006e6c <__sinit_lock_acquire>
 8006e8c:	69a3      	ldr	r3, [r4, #24]
 8006e8e:	b11b      	cbz	r3, 8006e98 <__sinit+0x14>
 8006e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e94:	f7ff bff0 	b.w	8006e78 <__sinit_lock_release>
 8006e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <__sinit+0x68>)
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <__sinit+0x6c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	bf08      	it	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	4620      	mov	r0, r4
 8006eae:	bf08      	it	eq
 8006eb0:	61a3      	streq	r3, [r4, #24]
 8006eb2:	f000 f81f 	bl	8006ef4 <__sfp>
 8006eb6:	6060      	str	r0, [r4, #4]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f81b 	bl	8006ef4 <__sfp>
 8006ebe:	60a0      	str	r0, [r4, #8]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 f817 	bl	8006ef4 <__sfp>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2104      	movs	r1, #4
 8006eca:	60e0      	str	r0, [r4, #12]
 8006ecc:	6860      	ldr	r0, [r4, #4]
 8006ece:	f7ff ff81 	bl	8006dd4 <std>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2109      	movs	r1, #9
 8006ed6:	68a0      	ldr	r0, [r4, #8]
 8006ed8:	f7ff ff7c 	bl	8006dd4 <std>
 8006edc:	2202      	movs	r2, #2
 8006ede:	2112      	movs	r1, #18
 8006ee0:	68e0      	ldr	r0, [r4, #12]
 8006ee2:	f7ff ff77 	bl	8006dd4 <std>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61a3      	str	r3, [r4, #24]
 8006eea:	e7d1      	b.n	8006e90 <__sinit+0xc>
 8006eec:	080074b8 	.word	0x080074b8
 8006ef0:	08006e1d 	.word	0x08006e1d

08006ef4 <__sfp>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	f7ff ffac 	bl	8006e54 <__sfp_lock_acquire>
 8006efc:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <__sfp+0x84>)
 8006efe:	681e      	ldr	r6, [r3, #0]
 8006f00:	69b3      	ldr	r3, [r6, #24]
 8006f02:	b913      	cbnz	r3, 8006f0a <__sfp+0x16>
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff ffbd 	bl	8006e84 <__sinit>
 8006f0a:	3648      	adds	r6, #72	; 0x48
 8006f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	d503      	bpl.n	8006f1c <__sfp+0x28>
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	b30b      	cbz	r3, 8006f5c <__sfp+0x68>
 8006f18:	6836      	ldr	r6, [r6, #0]
 8006f1a:	e7f7      	b.n	8006f0c <__sfp+0x18>
 8006f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f20:	b9d5      	cbnz	r5, 8006f58 <__sfp+0x64>
 8006f22:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <__sfp+0x88>)
 8006f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f28:	60e3      	str	r3, [r4, #12]
 8006f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f2c:	f7ff fc4e 	bl	80067cc <__retarget_lock_init_recursive>
 8006f30:	f7ff ff96 	bl	8006e60 <__sfp_lock_release>
 8006f34:	2208      	movs	r2, #8
 8006f36:	4629      	mov	r1, r5
 8006f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f40:	6025      	str	r5, [r4, #0]
 8006f42:	61a5      	str	r5, [r4, #24]
 8006f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f48:	f7fd fcb8 	bl	80048bc <memset>
 8006f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f54:	4620      	mov	r0, r4
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f58:	3468      	adds	r4, #104	; 0x68
 8006f5a:	e7d9      	b.n	8006f10 <__sfp+0x1c>
 8006f5c:	2104      	movs	r1, #4
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ff62 	bl	8006e28 <__sfmoreglue>
 8006f64:	4604      	mov	r4, r0
 8006f66:	6030      	str	r0, [r6, #0]
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d1d5      	bne.n	8006f18 <__sfp+0x24>
 8006f6c:	f7ff ff78 	bl	8006e60 <__sfp_lock_release>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	e7ee      	b.n	8006f54 <__sfp+0x60>
 8006f76:	bf00      	nop
 8006f78:	080074b8 	.word	0x080074b8
 8006f7c:	ffff0001 	.word	0xffff0001

08006f80 <_fwalk_reent>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	4606      	mov	r6, r0
 8006f86:	4688      	mov	r8, r1
 8006f88:	2700      	movs	r7, #0
 8006f8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f92:	f1b9 0901 	subs.w	r9, r9, #1
 8006f96:	d505      	bpl.n	8006fa4 <_fwalk_reent+0x24>
 8006f98:	6824      	ldr	r4, [r4, #0]
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d1f7      	bne.n	8006f8e <_fwalk_reent+0xe>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa4:	89ab      	ldrh	r3, [r5, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d907      	bls.n	8006fba <_fwalk_reent+0x3a>
 8006faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	d003      	beq.n	8006fba <_fwalk_reent+0x3a>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	47c0      	blx	r8
 8006fb8:	4307      	orrs	r7, r0
 8006fba:	3568      	adds	r5, #104	; 0x68
 8006fbc:	e7e9      	b.n	8006f92 <_fwalk_reent+0x12>

08006fbe <__swhatbuf_r>:
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	461d      	mov	r5, r3
 8006fcc:	b096      	sub	sp, #88	; 0x58
 8006fce:	da07      	bge.n	8006fe0 <__swhatbuf_r+0x22>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	89b3      	ldrh	r3, [r6, #12]
 8006fd6:	061a      	lsls	r2, r3, #24
 8006fd8:	d410      	bmi.n	8006ffc <__swhatbuf_r+0x3e>
 8006fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fde:	e00e      	b.n	8006ffe <__swhatbuf_r+0x40>
 8006fe0:	466a      	mov	r2, sp
 8006fe2:	f000 f8fb 	bl	80071dc <_fstat_r>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	dbf2      	blt.n	8006fd0 <__swhatbuf_r+0x12>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ff4:	425a      	negs	r2, r3
 8006ff6:	415a      	adcs	r2, r3
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	e7ee      	b.n	8006fda <__swhatbuf_r+0x1c>
 8006ffc:	2340      	movs	r3, #64	; 0x40
 8006ffe:	2000      	movs	r0, #0
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	b016      	add	sp, #88	; 0x58
 8007004:	bd70      	pop	{r4, r5, r6, pc}
	...

08007008 <__smakebuf_r>:
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800700c:	079d      	lsls	r5, r3, #30
 800700e:	4606      	mov	r6, r0
 8007010:	460c      	mov	r4, r1
 8007012:	d507      	bpl.n	8007024 <__smakebuf_r+0x1c>
 8007014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	6123      	str	r3, [r4, #16]
 800701c:	2301      	movs	r3, #1
 800701e:	6163      	str	r3, [r4, #20]
 8007020:	b002      	add	sp, #8
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	466a      	mov	r2, sp
 8007026:	ab01      	add	r3, sp, #4
 8007028:	f7ff ffc9 	bl	8006fbe <__swhatbuf_r>
 800702c:	9900      	ldr	r1, [sp, #0]
 800702e:	4605      	mov	r5, r0
 8007030:	4630      	mov	r0, r6
 8007032:	f7fd fc97 	bl	8004964 <_malloc_r>
 8007036:	b948      	cbnz	r0, 800704c <__smakebuf_r+0x44>
 8007038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d4ef      	bmi.n	8007020 <__smakebuf_r+0x18>
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	e7e3      	b.n	8007014 <__smakebuf_r+0xc>
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <__smakebuf_r+0x7c>)
 800704e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	9b00      	ldr	r3, [sp, #0]
 800705c:	6120      	str	r0, [r4, #16]
 800705e:	6163      	str	r3, [r4, #20]
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	b15b      	cbz	r3, 800707c <__smakebuf_r+0x74>
 8007064:	4630      	mov	r0, r6
 8007066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706a:	f000 f8c9 	bl	8007200 <_isatty_r>
 800706e:	b128      	cbz	r0, 800707c <__smakebuf_r+0x74>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	89a0      	ldrh	r0, [r4, #12]
 800707e:	4305      	orrs	r5, r0
 8007080:	81a5      	strh	r5, [r4, #12]
 8007082:	e7cd      	b.n	8007020 <__smakebuf_r+0x18>
 8007084:	08006e1d 	.word	0x08006e1d

08007088 <_raise_r>:
 8007088:	291f      	cmp	r1, #31
 800708a:	b538      	push	{r3, r4, r5, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	460d      	mov	r5, r1
 8007090:	d904      	bls.n	800709c <_raise_r+0x14>
 8007092:	2316      	movs	r3, #22
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800709e:	b112      	cbz	r2, 80070a6 <_raise_r+0x1e>
 80070a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070a4:	b94b      	cbnz	r3, 80070ba <_raise_r+0x32>
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 f830 	bl	800710c <_getpid_r>
 80070ac:	462a      	mov	r2, r5
 80070ae:	4601      	mov	r1, r0
 80070b0:	4620      	mov	r0, r4
 80070b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b6:	f000 b817 	b.w	80070e8 <_kill_r>
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d00a      	beq.n	80070d4 <_raise_r+0x4c>
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	d103      	bne.n	80070ca <_raise_r+0x42>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	2001      	movs	r0, #1
 80070c8:	e7e7      	b.n	800709a <_raise_r+0x12>
 80070ca:	2400      	movs	r4, #0
 80070cc:	4628      	mov	r0, r5
 80070ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070d2:	4798      	blx	r3
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7e0      	b.n	800709a <_raise_r+0x12>

080070d8 <raise>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <raise+0xc>)
 80070da:	4601      	mov	r1, r0
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f7ff bfd3 	b.w	8007088 <_raise_r>
 80070e2:	bf00      	nop
 80070e4:	2000000c 	.word	0x2000000c

080070e8 <_kill_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	2300      	movs	r3, #0
 80070ec:	4d06      	ldr	r5, [pc, #24]	; (8007108 <_kill_r+0x20>)
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f7fa fbbb 	bl	8001870 <_kill>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d102      	bne.n	8007104 <_kill_r+0x1c>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	b103      	cbz	r3, 8007104 <_kill_r+0x1c>
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	2000028c 	.word	0x2000028c

0800710c <_getpid_r>:
 800710c:	f7fa bba9 	b.w	8001862 <_getpid>

08007110 <__sread>:
 8007110:	b510      	push	{r4, lr}
 8007112:	460c      	mov	r4, r1
 8007114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007118:	f000 f894 	bl	8007244 <_read_r>
 800711c:	2800      	cmp	r0, #0
 800711e:	bfab      	itete	ge
 8007120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007122:	89a3      	ldrhlt	r3, [r4, #12]
 8007124:	181b      	addge	r3, r3, r0
 8007126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800712a:	bfac      	ite	ge
 800712c:	6563      	strge	r3, [r4, #84]	; 0x54
 800712e:	81a3      	strhlt	r3, [r4, #12]
 8007130:	bd10      	pop	{r4, pc}

08007132 <__swrite>:
 8007132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007136:	461f      	mov	r7, r3
 8007138:	898b      	ldrh	r3, [r1, #12]
 800713a:	4605      	mov	r5, r0
 800713c:	05db      	lsls	r3, r3, #23
 800713e:	460c      	mov	r4, r1
 8007140:	4616      	mov	r6, r2
 8007142:	d505      	bpl.n	8007150 <__swrite+0x1e>
 8007144:	2302      	movs	r3, #2
 8007146:	2200      	movs	r2, #0
 8007148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714c:	f000 f868 	bl	8007220 <_lseek_r>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	4632      	mov	r2, r6
 8007154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	4628      	mov	r0, r5
 800715c:	463b      	mov	r3, r7
 800715e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007166:	f000 b817 	b.w	8007198 <_write_r>

0800716a <__sseek>:
 800716a:	b510      	push	{r4, lr}
 800716c:	460c      	mov	r4, r1
 800716e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007172:	f000 f855 	bl	8007220 <_lseek_r>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	bf15      	itete	ne
 800717c:	6560      	strne	r0, [r4, #84]	; 0x54
 800717e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007186:	81a3      	strheq	r3, [r4, #12]
 8007188:	bf18      	it	ne
 800718a:	81a3      	strhne	r3, [r4, #12]
 800718c:	bd10      	pop	{r4, pc}

0800718e <__sclose>:
 800718e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007192:	f000 b813 	b.w	80071bc <_close_r>
	...

08007198 <_write_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4604      	mov	r4, r0
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	2200      	movs	r2, #0
 80071a2:	4d05      	ldr	r5, [pc, #20]	; (80071b8 <_write_r+0x20>)
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fa fb99 	bl	80018de <_write>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_write_r+0x1e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_write_r+0x1e>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	2000028c 	.word	0x2000028c

080071bc <_close_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	2300      	movs	r3, #0
 80071c0:	4d05      	ldr	r5, [pc, #20]	; (80071d8 <_close_r+0x1c>)
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fa fba5 	bl	8001916 <_close>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_close_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_close_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	2000028c 	.word	0x2000028c

080071dc <_fstat_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	2300      	movs	r3, #0
 80071e0:	4d06      	ldr	r5, [pc, #24]	; (80071fc <_fstat_r+0x20>)
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	f7fa fb9f 	bl	800192c <_fstat>
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	d102      	bne.n	80071f8 <_fstat_r+0x1c>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	b103      	cbz	r3, 80071f8 <_fstat_r+0x1c>
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	bd38      	pop	{r3, r4, r5, pc}
 80071fa:	bf00      	nop
 80071fc:	2000028c 	.word	0x2000028c

08007200 <_isatty_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	2300      	movs	r3, #0
 8007204:	4d05      	ldr	r5, [pc, #20]	; (800721c <_isatty_r+0x1c>)
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7fa fb9d 	bl	800194a <_isatty>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_isatty_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_isatty_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	2000028c 	.word	0x2000028c

08007220 <_lseek_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	2200      	movs	r2, #0
 800722a:	4d05      	ldr	r5, [pc, #20]	; (8007240 <_lseek_r+0x20>)
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fa fb95 	bl	800195e <_lseek>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_lseek_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_lseek_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	2000028c 	.word	0x2000028c

08007244 <_read_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	2200      	movs	r2, #0
 800724e:	4d05      	ldr	r5, [pc, #20]	; (8007264 <_read_r+0x20>)
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7fa fb26 	bl	80018a4 <_read>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_read_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_read_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	2000028c 	.word	0x2000028c

08007268 <_init>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr

08007274 <_fini>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	bf00      	nop
 8007278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727a:	bc08      	pop	{r3}
 800727c:	469e      	mov	lr, r3
 800727e:	4770      	bx	lr
