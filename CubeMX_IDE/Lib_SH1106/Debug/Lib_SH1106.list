
Lib_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  080072e0  080072e0  000172e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200001dc  08007ad8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08007ad8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4a2  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203e  00000000  00000000  0002a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c47  00000000  00000000  0002db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9b0  00000000  00000000  0004675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a01  00000000  00000000  0005410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcb10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000dcb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080072c4 	.word	0x080072c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080072c4 	.word	0x080072c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <MX_ADC1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fc2:	f001 fb29 	bl	8002618 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 fbe9 	bl	80017a2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0x74>)
 8000fe2:	f001 fdd1 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fec:	f000 fbd9 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200001f8 	.word	0x200001f8
 8000ffc:	40012400 	.word	0x40012400

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_ADC_MspInit+0x6c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d121      	bne.n	8001064 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <HAL_ADC_MspInit+0x70>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	2303      	movs	r3, #3
 8001056:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0x74>)
 8001060:	f002 f896 	bl	8003190 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40012400 	.word	0x40012400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_GPIO_Init+0x70>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_GPIO_Init+0x70>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_GPIO_Init+0x70>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x70>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C2_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C2_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C2_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C2_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C2_Init+0x50>)
 800112a:	f002 f9b5 	bl	8003498 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fb35 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000228 	.word	0x20000228
 8001140:	40005800 	.word	0x40005800
 8001144:	00061a80 	.word	0x00061a80

08001148 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_I2C_MspInit+0x74>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d124      	bne.n	80011b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001180:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <HAL_I2C_MspInit+0x7c>)
 8001196:	f001 fffb 	bl	8003190 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40005800 	.word	0x40005800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <Jogador_new>:
void desenhaJogador(TOLED* _oled, TJogador* _jogador);

uint16_t getValorPot1();


TJogador* Jogador_new(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  TJogador* auxJogador;

  auxJogador = malloc(sizeof(TJogador));
 80011ce:	2005      	movs	r0, #5
 80011d0:	f003 fb66 	bl	80048a0 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	607b      	str	r3, [r7, #4]

  return auxJogador;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <Bola_new>:

TBola* Bola_new(){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
  TBola* auxBola;

  auxBola = malloc(sizeof(TBola));
 80011e8:	200c      	movs	r0, #12
 80011ea:	f003 fb59 	bl	80048a0 <malloc>
 80011ee:	4603      	mov	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]

  return auxBola;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f001 f983 	bl	800250c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f993 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f7ff ff35 	bl	8001078 <MX_GPIO_Init>
  MX_I2C2_Init();
 800120e:	f7ff ff6d 	bl	80010ec <MX_I2C2_Init>
  MX_ADC1_Init();
 8001212:	f7ff feb7 	bl	8000f84 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TOLED* oled;
  TOLED* oledBuffer;

  oled = J3_SH1106_new(&hi2c2,0x78);
 8001216:	2178      	movs	r1, #120	; 0x78
 8001218:	489c      	ldr	r0, [pc, #624]	; (800148c <main+0x290>)
 800121a:	f000 fc5b 	bl	8001ad4 <J3_SH1106_new>
 800121e:	6178      	str	r0, [r7, #20]
  oledBuffer = J3_SH1106_new(NULL,0x00);
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fc56 	bl	8001ad4 <J3_SH1106_new>
 8001228:	6138      	str	r0, [r7, #16]

  HAL_Delay(1000); // Espera estabilizar o display
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f001 f9cf 	bl	80025d0 <HAL_Delay>

  J3_SH1106_offDisplay(oled);
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f000 fc80 	bl	8001b38 <J3_SH1106_offDisplay>
  J3_SH1106_setNormal(oled);
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f000 fcdb 	bl	8001bf4 <J3_SH1106_setNormal>
  J3_SH1106_setContrast(oled,255);
 800123e:	21ff      	movs	r1, #255	; 0xff
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f000 fc85 	bl	8001b50 <J3_SH1106_setContrast>
  //J3_SH1106_onDisplay(oled);
  J3_SH1106_setDisplayClock(oled);
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f000 fce0 	bl	8001c0c <J3_SH1106_setDisplayClock>
  J3_SH1106_clrDisplay(oled);
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f000 fc92 	bl	8001b76 <J3_SH1106_clrDisplay>

  TJogador *J1, *J2;
  TBola* bola;

  bola = Bola_new();
 8001252:	f7ff ffc6 	bl	80011e2 <Bola_new>
 8001256:	60f8      	str	r0, [r7, #12]
  bola->posX = 63;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	223f      	movs	r2, #63	; 0x3f
 800125c:	721a      	strb	r2, [r3, #8]
  bola->posY = 3;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2203      	movs	r2, #3
 8001262:	725a      	strb	r2, [r3, #9]
  bola->velX = 2;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126a:	601a      	str	r2, [r3, #0]
  bola->velY = 3;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a88      	ldr	r2, [pc, #544]	; (8001490 <main+0x294>)
 8001270:	605a      	str	r2, [r3, #4]

  J1 = Jogador_new();
 8001272:	f7ff ffa9 	bl	80011c8 <Jogador_new>
 8001276:	60b8      	str	r0, [r7, #8]
  J1->tamX = 5;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2205      	movs	r2, #5
 800127c:	701a      	strb	r2, [r3, #0]
  J1->tamY = 15;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	220f      	movs	r2, #15
 8001282:	705a      	strb	r2, [r3, #1]
  J1->posX = 5;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2205      	movs	r2, #5
 8001288:	709a      	strb	r2, [r3, #2]
  J1->posY = 30;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	221e      	movs	r2, #30
 800128e:	70da      	strb	r2, [r3, #3]
  J1->pontos = 0;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2200      	movs	r2, #0
 8001294:	711a      	strb	r2, [r3, #4]

  J2 = Jogador_new();
 8001296:	f7ff ff97 	bl	80011c8 <Jogador_new>
 800129a:	6078      	str	r0, [r7, #4]
  J2->tamX = 5;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2205      	movs	r2, #5
 80012a0:	701a      	strb	r2, [r3, #0]
  J2->tamY = 15;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	220f      	movs	r2, #15
 80012a6:	705a      	strb	r2, [r3, #1]
  J2->posX = 122;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	227a      	movs	r2, #122	; 0x7a
 80012ac:	709a      	strb	r2, [r3, #2]
  J2->posY = 30;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	221e      	movs	r2, #30
 80012b2:	70da      	strb	r2, [r3, #3]
  J2->pontos = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	711a      	strb	r2, [r3, #4]


  int16_t adP1;

  J3_SH1106_draw(oled, (uint8_t *)pong, 0,0,128,32);
 80012ba:	2320      	movs	r3, #32
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	4973      	ldr	r1, [pc, #460]	; (8001494 <main+0x298>)
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f001 f850 	bl	800236e <J3_SH1106_draw>
  HAL_Delay(7000);
 80012ce:	f641 3058 	movw	r0, #7000	; 0x1b58
 80012d2:	f001 f97d 	bl	80025d0 <HAL_Delay>
  J3_SH1106_clrDisplayByBuffer(oled);
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f000 fdf8 	bl	8001ecc <J3_SH1106_clrDisplayByBuffer>


  HAL_ADCEx_Calibration_Start(&hadc1);
 80012dc:	486e      	ldr	r0, [pc, #440]	; (8001498 <main+0x29c>)
 80012de:	f001 fdd7 	bl	8002e90 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//J3_SH1106_clrDisplay(oled);
	J3_SH1106_clrBuffer(oledBuffer);
 80012e2:	6938      	ldr	r0, [r7, #16]
 80012e4:	f000 fc76 	bl	8001bd4 <J3_SH1106_clrBuffer>


	J3_SH1106_setBox(oledBuffer, 0,0,127,63,0);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	233f      	movs	r3, #63	; 0x3f
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	237f      	movs	r3, #127	; 0x7f
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	6938      	ldr	r0, [r7, #16]
 80012f8:	f001 f894 	bl	8002424 <J3_SH1106_setBox>
	J3_SH1106_lineDash(oledBuffer, 63,0,63,127);
 80012fc:	237f      	movs	r3, #127	; 0x7f
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	233f      	movs	r3, #63	; 0x3f
 8001302:	2200      	movs	r2, #0
 8001304:	213f      	movs	r1, #63	; 0x3f
 8001306:	6938      	ldr	r0, [r7, #16]
 8001308:	f000 ff05 	bl	8002116 <J3_SH1106_lineDash>
	J3_SH1106_lineDash(oledBuffer, 64,0,64,127);
 800130c:	237f      	movs	r3, #127	; 0x7f
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	2200      	movs	r2, #0
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 fefd 	bl	8002116 <J3_SH1106_lineDash>


	desenhaBola(oledBuffer, bola);
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	6938      	ldr	r0, [r7, #16]
 8001320:	f000 f961 	bl	80015e6 <desenhaBola>
	desenhaJogador(oledBuffer, J1);
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6938      	ldr	r0, [r7, #16]
 8001328:	f000 f9c6 	bl	80016b8 <desenhaJogador>
	desenhaJogador(oledBuffer, J2);
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	6938      	ldr	r0, [r7, #16]
 8001330:	f000 f9c2 	bl	80016b8 <desenhaJogador>

	J3_SH1106_fillBuffer2(oled, oledBuffer);
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f000 fc78 	bl	8001c2c <J3_SH1106_fillBuffer2>
	HAL_Delay(20);
 800133c:	2014      	movs	r0, #20
 800133e:	f001 f947 	bl	80025d0 <HAL_Delay>

	//bola->posX = bola->posX + bola->velX;
	bola->posX += bola->velX;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	7a1b      	ldrb	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc58 	bl	8000bfc <__aeabi_i2f>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f7ff fb9d 	bl	8000a94 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fdf1 	bl	8000f44 <__aeabi_f2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	721a      	strb	r2, [r3, #8]
	bola->posY += bola->velY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7a5b      	ldrb	r3, [r3, #9]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc44 	bl	8000bfc <__aeabi_i2f>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fb89 	bl	8000a94 <__addsf3>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fddd 	bl	8000f44 <__aeabi_f2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	b2da      	uxtb	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	725a      	strb	r2, [r3, #9]

	if(bola->posX >= 120){
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	2b77      	cmp	r3, #119	; 0x77
 8001398:	d92c      	bls.n	80013f4 <main+0x1f8>
	  if(bola->posY >= (J2->posY-5) && bola->posY <= (J2->posY+5)){
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	7a5b      	ldrb	r3, [r3, #9]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	3b05      	subs	r3, #5
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db13      	blt.n	80013d2 <main+0x1d6>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	7a5b      	ldrb	r3, [r3, #9]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	3305      	adds	r3, #5
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dc0b      	bgt.n	80013d2 <main+0x1d6>
	    bola->velX = bola->velX * (-1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
	    bola->velY = bola->velY * (-1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
	  }
      if(bola->posX >= 123){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	7a1b      	ldrb	r3, [r3, #8]
 80013d6:	2b7a      	cmp	r3, #122	; 0x7a
 80013d8:	d90c      	bls.n	80013f4 <main+0x1f8>
    	  bola->posX = 64;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	721a      	strb	r2, [r3, #8]
		  bola->velX = bola->velX * (-1);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
		  bola->velX = 1;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f2:	601a      	str	r2, [r3, #0]
	  }
	}

	if(bola->posX <= 7){
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d82c      	bhi.n	8001456 <main+0x25a>
	  if(bola->posY >= (J1->posY-5) && bola->posY <= (J1->posY+5)){
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	7a5b      	ldrb	r3, [r3, #9]
 8001400:	461a      	mov	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	3b05      	subs	r3, #5
 8001408:	429a      	cmp	r2, r3
 800140a:	db13      	blt.n	8001434 <main+0x238>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	3305      	adds	r3, #5
 8001418:	429a      	cmp	r2, r3
 800141a:	dc0b      	bgt.n	8001434 <main+0x238>
	    bola->velX = bola->velX * (-1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
	    bola->velY = bola->velY * (-1);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
	  }
      if (bola->posX <= 4){
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	7a1b      	ldrb	r3, [r3, #8]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d80c      	bhi.n	8001456 <main+0x25a>
    	  bola->posX = 63;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	223f      	movs	r2, #63	; 0x3f
 8001440:	721a      	strb	r2, [r3, #8]
		   bola->velX = bola->velX * (-1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]
		   bola->velX = 1;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001454:	601a      	str	r2, [r3, #0]
	  }
	}

	if(bola->posY >= 61){
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	7a5b      	ldrb	r3, [r3, #9]
 800145a:	2b3c      	cmp	r3, #60	; 0x3c
 800145c:	d908      	bls.n	8001470 <main+0x274>
	  bola->posY = 61;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	223d      	movs	r2, #61	; 0x3d
 8001462:	725a      	strb	r2, [r3, #9]
	  bola->velY = bola->velY * (-1);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
	}
	if(bola->posY <= 2){
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	7a5b      	ldrb	r3, [r3, #9]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d811      	bhi.n	800149c <main+0x2a0>
	  bola->posY = 2;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2202      	movs	r2, #2
 800147c:	725a      	strb	r2, [r3, #9]
	  bola->velY = bola->velY * (-1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <main+0x2a0>
 800148c:	20000228 	.word	0x20000228
 8001490:	40400000 	.word	0x40400000
 8001494:	08007300 	.word	0x08007300
 8001498:	200001f8 	.word	0x200001f8
		  if(J2->posY > 58 )
		    J2->posY = 58;
		}
	 }
*/
	 if(bola->posX <= 55){
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	7a1b      	ldrb	r3, [r3, #8]
 80014a0:	2b37      	cmp	r3, #55	; 0x37
 80014a2:	d825      	bhi.n	80014f0 <main+0x2f4>
		if(J1->posY > bola->posY){
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	78da      	ldrb	r2, [r3, #3]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	7a5b      	ldrb	r3, [r3, #9]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d90c      	bls.n	80014ca <main+0x2ce>
		  J1->posY = J1->posY - 2;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	78db      	ldrb	r3, [r3, #3]
 80014b4:	3b02      	subs	r3, #2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	70da      	strb	r2, [r3, #3]
		  if(J1->posY <= 6)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d802      	bhi.n	80014ca <main+0x2ce>
		    J1->posY = 6;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2206      	movs	r2, #6
 80014c8:	70da      	strb	r2, [r3, #3]
		}
		if(J1->posY < bola->posY){
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	78da      	ldrb	r2, [r3, #3]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	7a5b      	ldrb	r3, [r3, #9]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d20c      	bcs.n	80014f0 <main+0x2f4>
    	  J1->posY = J1->posY + 2;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	78db      	ldrb	r3, [r3, #3]
 80014da:	3302      	adds	r3, #2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	70da      	strb	r2, [r3, #3]
		  if(J1->posY > 58 )
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	2b3a      	cmp	r3, #58	; 0x3a
 80014e8:	d902      	bls.n	80014f0 <main+0x2f4>
		    J1->posY = 58;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	223a      	movs	r2, #58	; 0x3a
 80014ee:	70da      	strb	r2, [r3, #3]


	 /* 12bits ADC = 4096 */
	 /* 54                */

	 HAL_ADC_Start(&hadc1);
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <main+0x32c>)
 80014f2:	f001 f969 	bl	80027c8 <HAL_ADC_Start>

	 HAL_ADC_PollForConversion(&hadc1, 200);
 80014f6:	21c8      	movs	r1, #200	; 0xc8
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <main+0x32c>)
 80014fa:	f001 fa3f 	bl	800297c <HAL_ADC_PollForConversion>
	 adP1 = HAL_ADC_GetValue(&hadc1);
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <main+0x32c>)
 8001500:	f001 fb36 	bl	8002b70 <HAL_ADC_GetValue>
 8001504:	4603      	mov	r3, r0
 8001506:	807b      	strh	r3, [r7, #2]
	 HAL_ADC_Stop(&hadc1);
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <main+0x32c>)
 800150a:	f001 fa0b 	bl	8002924 <HAL_ADC_Stop>

	 J2->posY = (adP1 / 81) ;
 800150e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001512:	4a06      	ldr	r2, [pc, #24]	; (800152c <main+0x330>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	10d2      	asrs	r2, r2, #3
 800151a:	17db      	asrs	r3, r3, #31
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	b21b      	sxth	r3, r3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	70da      	strb	r2, [r3, #3]
	J3_SH1106_clrBuffer(oledBuffer);
 8001526:	e6dc      	b.n	80012e2 <main+0xe6>
 8001528:	200001f8 	.word	0x200001f8
 800152c:	1948b0fd 	.word	0x1948b0fd

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2228      	movs	r2, #40	; 0x28
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f9b6 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800157c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fbd0 	bl	8003d2c <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001592:	f000 f906 	bl	80017a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fe3c 	bl	8004230 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015be:	f000 f8f0 	bl	80017a2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015c2:	2302      	movs	r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 ffc6 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015da:	f000 f8e2 	bl	80017a2 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3750      	adds	r7, #80	; 0x50
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <desenhaBola>:

/* USER CODE BEGIN 4 */
void desenhaBola(TOLED* _oled, TBola* _bola){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY-1);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	7a1b      	ldrb	r3, [r3, #8]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	7a5b      	ldrb	r3, [r3, #9]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fba9 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7a1b      	ldrb	r3, [r3, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	b2d9      	uxtb	r1, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7a5b      	ldrb	r3, [r3, #9]
 8001614:	461a      	mov	r2, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fb9f 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX-1,_bola->posY+1);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	7a1b      	ldrb	r3, [r3, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	b2d9      	uxtb	r1, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7a5b      	ldrb	r3, [r3, #9]
 8001628:	3301      	adds	r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb93 	bl	8001d5a <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY-1);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	7a19      	ldrb	r1, [r3, #8]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	7a5b      	ldrb	r3, [r3, #9]
 800163c:	3b01      	subs	r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fb89 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7a19      	ldrb	r1, [r3, #8]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	7a5b      	ldrb	r3, [r3, #9]
 8001650:	461a      	mov	r2, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fb81 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX,_bola->posY+1);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7a19      	ldrb	r1, [r3, #8]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7a5b      	ldrb	r3, [r3, #9]
 8001660:	3301      	adds	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fb77 	bl	8001d5a <J3_SH1106_setPixel>

  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY-1);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7a1b      	ldrb	r3, [r3, #8]
 8001670:	3301      	adds	r3, #1
 8001672:	b2d9      	uxtb	r1, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7a5b      	ldrb	r3, [r3, #9]
 8001678:	3b01      	subs	r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fb6b 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	7a1b      	ldrb	r3, [r3, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7a5b      	ldrb	r3, [r3, #9]
 8001690:	461a      	mov	r2, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fb61 	bl	8001d5a <J3_SH1106_setPixel>
  J3_SH1106_setPixel(_oled,_bola->posX+1,_bola->posY+1);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	7a1b      	ldrb	r3, [r3, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	b2d9      	uxtb	r1, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	7a5b      	ldrb	r3, [r3, #9]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fb55 	bl	8001d5a <J3_SH1106_setPixel>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <desenhaJogador>:

void desenhaJogador(TOLED* _oled, TJogador* _jogador) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af02      	add	r7, sp, #8
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  const int8_t play_altura = 5;
 80016c2:	2305      	movs	r3, #5
 80016c4:	73fb      	strb	r3, [r7, #15]
  const int8_t play_largura = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73bb      	strb	r3, [r7, #14]
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY-play_altura,_jogador->posX+play_largura,_jogador->posY-play_altura);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	789a      	ldrb	r2, [r3, #2]
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	78da      	ldrb	r2, [r3, #3]
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	789a      	ldrb	r2, [r3, #2]
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2dc      	uxtb	r4, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	78da      	ldrb	r2, [r3, #3]
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	4623      	mov	r3, r4
 80016f6:	4602      	mov	r2, r0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fc26 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY-play_altura,_jogador->posX-play_largura,_jogador->posY+play_altura);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	789a      	ldrb	r2, [r3, #2]
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	78da      	ldrb	r2, [r3, #3]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b2d8      	uxtb	r0, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	789a      	ldrb	r2, [r3, #2]
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b2dc      	uxtb	r4, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	78da      	ldrb	r2, [r3, #3]
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	4623      	mov	r3, r4
 800172a:	4602      	mov	r2, r0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fc0c 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX-play_largura,_jogador->posY+play_altura,_jogador->posX+play_largura,_jogador->posY+play_altura);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	789a      	ldrb	r2, [r3, #2]
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	b2d9      	uxtb	r1, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	78da      	ldrb	r2, [r3, #3]
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4413      	add	r3, r2
 8001744:	b2d8      	uxtb	r0, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	789a      	ldrb	r2, [r3, #2]
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	4413      	add	r3, r2
 800174e:	b2dc      	uxtb	r4, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	78da      	ldrb	r2, [r3, #3]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4413      	add	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4623      	mov	r3, r4
 800175e:	4602      	mov	r2, r0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fbf2 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _jogador->posX+play_largura,_jogador->posY+play_altura,_jogador->posX+play_largura,_jogador->posY-play_altura);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	789a      	ldrb	r2, [r3, #2]
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	4413      	add	r3, r2
 800176e:	b2d9      	uxtb	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	78da      	ldrb	r2, [r3, #3]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4413      	add	r3, r2
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	789a      	ldrb	r2, [r3, #2]
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	4413      	add	r3, r2
 8001782:	b2dc      	uxtb	r4, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	78da      	ldrb	r2, [r3, #3]
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	4602      	mov	r2, r0
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fbd8 	bl	8001f4a <J3_SH1106_line>
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}

080017a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a6:	b672      	cpsid	i
}
 80017a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017aa:	e7fe      	b.n	80017aa <Error_Handler+0x8>

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_MspInit+0x5c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_MspInit+0x5c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6193      	str	r3, [r2, #24]
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_MspInit+0x5c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x5c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x5c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x5c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_MspInit+0x60>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_MspInit+0x60>)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 fe9f 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
	return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <_kill>:

int _kill(int pid, int sig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001876:	f002 ffe9 	bl	800484c <__errno>
 800187a:	4603      	mov	r3, r0
 800187c:	2216      	movs	r2, #22
 800187e:	601a      	str	r2, [r3, #0]
	return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffe7 	bl	800186c <_kill>
	while (1) {}		/* Make sure we hang here */
 800189e:	e7fe      	b.n	800189e <_exit+0x12>

080018a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
	}

return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e009      	b.n	8001900 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf1      	blt.n	80018ec <_write+0x12>
	}
	return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001938:	605a      	str	r2, [r3, #4]
	return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f002 ff52 	bl	800484c <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20005000 	.word	0x20005000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	2000027c 	.word	0x2000027c
 80019dc:	20000298 	.word	0x20000298

080019e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <j3_sh1106_sendCmd>:
};

typedef struct TOLED TOLED;

/* Enviar comando para o display */
void j3_sh1106_sendCmd(TOLED* _oled, uint8_t _cmd){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <j3_sh1106_sendCmd+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	733b      	strb	r3, [r7, #12]
    buf[1] = _cmd;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f001 fe7f 	bl	8003720 <HAL_I2C_Master_Transmit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <j3_sh1106_sendDado>:

/* Enviar dados para o display */
void j3_sh1106_sendDado(TOLED* _oled, uint8_t _dado){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af02      	add	r7, sp, #8
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	70fb      	strb	r3, [r7, #3]
  if (_oled->i2c != NULL){
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <j3_sh1106_sendDado+0x3a>
    HAL_StatusTypeDef ret;
    uint8_t buf[2];

    buf[0] = 0x40;
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	733b      	strb	r3, [r7, #12]
    buf[1] = _dado;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(_oled->i2c, _oled->address, buf, 2, HAL_MAX_DELAY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	b299      	uxth	r1, r3
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f001 fe5e 	bl	8003720 <HAL_I2C_Master_Transmit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]
    if (ret == HAL_OK) {
    }
    else {
    }
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <j3_sh1106_getIndexBuffer>:

/* Retorna i de X e Y */
uint16_t j3_sh1106_getIndexBuffer(uint8_t _x, uint8_t _y){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
  return (_y * 128) + _x;
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <j3_sh1106_getXBuffer>:
/* Retorna X de i */
uint8_t j3_sh1106_getXBuffer(uint16_t _i){
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	80fb      	strh	r3, [r7, #6]
  return (_i % 128);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aac:	b2db      	uxtb	r3, r3
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <j3_sh1106_getYBuffer>:
/* Retorna Y de i */
uint8_t j3_sh1106_getYBuffer(uint16_t _i){
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  return (_i / 128);
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	09db      	lsrs	r3, r3, #7
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <J3_SH1106_new>:
}
*/



TOLED* J3_SH1106_new(I2C_HandleTypeDef* _i2c, uint8_t _i2c_address){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
  TOLED* auxOLED;

  auxOLED = malloc(sizeof(TOLED));
 8001ae0:	200c      	movs	r0, #12
 8001ae2:	f002 fedd 	bl	80048a0 <malloc>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60fb      	str	r3, [r7, #12]
  auxOLED->address = _i2c_address;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	711a      	strb	r2, [r3, #4]
  auxOLED->i2c = _i2c;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
  auxOLED->buffer = malloc(128 * 8 * sizeof(uint8_t));
 8001af6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001afa:	f002 fed1 	bl	80048a0 <malloc>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	609a      	str	r2, [r3, #8]
  memset(auxOLED->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fecd 	bl	80048b0 <memset>
  return auxOLED;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <J3_SH1106_onDisplay>:

void J3_SH1106_onDisplay(TOLED* _oled){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAF);                     // turn on OLED panel
 8001b28:	21af      	movs	r1, #175	; 0xaf
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff5e 	bl	80019ec <j3_sh1106_sendCmd>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <J3_SH1106_offDisplay>:

void J3_SH1106_offDisplay(TOLED* _oled){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled,0xAE) ;                     // turn off OLED panel
 8001b40:	21ae      	movs	r1, #174	; 0xae
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff52 	bl	80019ec <j3_sh1106_sendCmd>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <J3_SH1106_setContrast>:

void J3_SH1106_setContrast(TOLED* _oled, uint8_t _valContraste){// set contrast control register
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  j3_sh1106_sendCmd(_oled,0x81);
 8001b5c:	2181      	movs	r1, #129	; 0x81
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff44 	bl	80019ec <j3_sh1106_sendCmd>
  j3_sh1106_sendCmd(_oled,_valContraste);
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff3f 	bl	80019ec <j3_sh1106_sendCmd>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <J3_SH1106_clrDisplay>:

void J3_SH1106_clrDisplay(TOLED* _oled){
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  J3_SH1106_offDisplay(_oled);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffda 	bl	8001b38 <J3_SH1106_offDisplay>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e01a      	b.n	8001bc0 <J3_SH1106_clrDisplay+0x4a>
    J3_SH1106_cursorY(_oled, line);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f8b8 	bl	8001d04 <J3_SH1106_cursorY>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	73bb      	strb	r3, [r7, #14]
 8001b98:	e00b      	b.n	8001bb2 <J3_SH1106_clrDisplay+0x3c>
	  J3_SH1106_cursorX(_oled, x);
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f88d 	bl	8001cbe <J3_SH1106_cursorX>
	  j3_sh1106_sendDado(_oled,0x00);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff41 	bl	8001a2e <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	73bb      	strb	r3, [r7, #14]
 8001bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	daef      	bge.n	8001b9a <J3_SH1106_clrDisplay+0x24>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	d9e1      	bls.n	8001b8a <J3_SH1106_clrDisplay+0x14>
	}
  }
  J3_SH1106_onDisplay(_oled);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffaa 	bl	8001b20 <J3_SH1106_onDisplay>
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <J3_SH1106_clrBuffer>:

void J3_SH1106_clrBuffer(TOLED* _oled){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  memset(_oled->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fe62 	bl	80048b0 <memset>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <J3_SH1106_setNormal>:

void J3_SH1106_setDisplayLine(TOLED* _oled) {
  j3_sh1106_sendCmd(_oled, 0x40) ;
}

void J3_SH1106_setNormal(TOLED* _oled){// set
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xA6);
 8001bfc:	21a6      	movs	r1, #166	; 0xa6
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fef4 	bl	80019ec <j3_sh1106_sendCmd>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <J3_SH1106_setDisplayClock>:

void J3_SH1106_setReverse(TOLED* _oled){// set
  j3_sh1106_sendCmd(_oled, 0xA7);
}

void J3_SH1106_setDisplayClock(TOLED* _oled){// set
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  j3_sh1106_sendCmd(_oled, 0xD5);
 8001c14:	21d5      	movs	r1, #213	; 0xd5
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fee8 	bl	80019ec <j3_sh1106_sendCmd>
  //j3_sh1106_sendCmd(_oled, 0xF0);
  j3_sh1106_sendCmd(_oled, 0x00);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fee4 	bl	80019ec <j3_sh1106_sendCmd>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <J3_SH1106_fillBuffer2>:
	  }
    }
  }
}

void J3_SH1106_fillBuffer2(TOLED* _oled, TOLED* _oledBuffer){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint8_t y = 0, x = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	737b      	strb	r3, [r7, #13]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	733b      	strb	r3, [r7, #12]
  for(uint16_t i = 0; i < 1024; i++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81fb      	strh	r3, [r7, #14]
 8001c42:	e033      	b.n	8001cac <J3_SH1106_fillBuffer2+0x80>
    if(_oled->buffer[i] != _oledBuffer->buffer[i]){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	440b      	add	r3, r1
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d024      	beq.n	8001ca6 <J3_SH1106_fillBuffer2+0x7a>
      x = j3_sh1106_getXBuffer(i);
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff1b 	bl	8001a9a <j3_sh1106_getXBuffer>
 8001c64:	4603      	mov	r3, r0
 8001c66:	733b      	strb	r3, [r7, #12]
      y = j3_sh1106_getYBuffer(i);
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff24 	bl	8001ab8 <j3_sh1106_getYBuffer>
 8001c70:	4603      	mov	r3, r0
 8001c72:	737b      	strb	r3, [r7, #13]
      J3_SH1106_cursorXY(_oled, x, y);
 8001c74:	7b7a      	ldrb	r2, [r7, #13]
 8001c76:	7b3b      	ldrb	r3, [r7, #12]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f857 	bl	8001d2e <J3_SH1106_cursorXY>
      _oled->buffer[i] = _oledBuffer->buffer[i];
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	441a      	add	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	440b      	add	r3, r1
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	701a      	strb	r2, [r3, #0]
      j3_sh1106_sendDado(_oled, _oled->buffer[i]);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fec4 	bl	8001a2e <j3_sh1106_sendDado>
  for(uint16_t i = 0; i < 1024; i++){
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	81fb      	strh	r3, [r7, #14]
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb2:	d3c7      	bcc.n	8001c44 <J3_SH1106_fillBuffer2+0x18>
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <J3_SH1106_cursorX>:




void J3_SH1106_cursorX(TOLED* _oled, uint8_t _address){ //Set column address for Page Addressing Mode
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  if(_address <= 127){
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db14      	blt.n	8001cfc <J3_SH1106_cursorX+0x3e>
	_address = _address + sXOffset ;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	70fb      	strb	r3, [r7, #3]
    j3_sh1106_sendCmd(_oled, 0x10 | (_address>>4)) ; //  shift high 4
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe80 	bl	80019ec <j3_sh1106_sendCmd>
    j3_sh1106_sendCmd(_oled, 0x0F & _address) ;      // low 4
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fe78 	bl	80019ec <j3_sh1106_sendCmd>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <J3_SH1106_cursorY>:

void J3_SH1106_cursorY(TOLED* _oled, uint8_t _page) { //Set page 0..7 Addressing Mode
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  if (_page <= 7){
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b07      	cmp	r3, #7
 8001d14:	d807      	bhi.n	8001d26 <J3_SH1106_cursorY+0x22>
    j3_sh1106_sendCmd(_oled, 0xB0 | _page);
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fe63 	bl	80019ec <j3_sh1106_sendCmd>
  }
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <J3_SH1106_cursorXY>:


void J3_SH1106_cursorXY(TOLED* _oled, uint8_t x, uint8_t y){ // Position cursor to column, line
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	70bb      	strb	r3, [r7, #2]
  J3_SH1106_cursorY(_oled, y) ; // Y axis = line 0-7
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffde 	bl	8001d04 <J3_SH1106_cursorY>
  J3_SH1106_cursorX(_oled, x) ; // X axis = column 0 - (sWidth - 1)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffb6 	bl	8001cbe <J3_SH1106_cursorX>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <J3_SH1106_setPixel>:
    j3_sh1106_sendDado(_oled, dado);
  }
}
*/

void J3_SH1106_setPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
 8001d66:	4613      	mov	r3, r2
 8001d68:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db4a      	blt.n	8001e08 <J3_SH1106_setPixel+0xae>
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	2b3f      	cmp	r3, #63	; 0x3f
 8001d76:	d847      	bhi.n	8001e08 <J3_SH1106_setPixel+0xae>
    uint8_t page = _y / 8;
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;

    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe73 	bl	8001a70 <j3_sh1106_getIndexBuffer>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001d8e:	78bb      	ldrb	r3, [r7, #2]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	72fb      	strb	r3, [r7, #11]
    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] | (0x01 << resto)) ){ /* Verifica se o byte esta diferente no buffer */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	89bb      	ldrh	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	89bb      	ldrh	r3, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	2201      	movs	r2, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	4303      	orrs	r3, r0
 8001db8:	4299      	cmp	r1, r3
 8001dba:	d025      	beq.n	8001e08 <J3_SH1106_setPixel+0xae>
      _oled->buffer[auxIndex]  = (_oled->buffer[auxIndex] | (0x01 << resto));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	89bb      	ldrh	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25a      	sxtb	r2, r3
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b259      	sxtb	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	89bb      	ldrh	r3, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff69 	bl	8001cbe <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff87 	bl	8001d04 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fe13 	bl	8001a2e <j3_sh1106_sendDado>
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <J3_SH1106_setClsPixel>:

    j3_sh1106_sendDado(_oled, dado);
  }
}*/

void J3_SH1106_setClsPixel(TOLED* _oled,  uint8_t _x, uint8_t _y){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	70bb      	strb	r3, [r7, #2]
  if ((_x < 128) && (_y < 64)){
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db4d      	blt.n	8001ec4 <J3_SH1106_setClsPixel+0xb4>
 8001e28:	78bb      	ldrb	r3, [r7, #2]
 8001e2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001e2c:	d84a      	bhi.n	8001ec4 <J3_SH1106_setClsPixel+0xb4>
    uint8_t page = _y / 8;
 8001e2e:	78bb      	ldrb	r3, [r7, #2]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	73fb      	strb	r3, [r7, #15]
    //uint8_t dado;
    uint16_t auxIndex;
    uint8_t resto;

    auxIndex = j3_sh1106_getIndexBuffer(_x,page);
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe18 	bl	8001a70 <j3_sh1106_getIndexBuffer>
 8001e40:	4603      	mov	r3, r0
 8001e42:	81bb      	strh	r3, [r7, #12]
    resto = _y % 8;
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	72fb      	strb	r3, [r7, #11]

    if( _oled->buffer[auxIndex]  != (_oled->buffer[auxIndex] & (~(0x01 << resto)) ) ){
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	89bb      	ldrh	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4619      	mov	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	89bb      	ldrh	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	2201      	movs	r2, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4003      	ands	r3, r0
 8001e70:	4299      	cmp	r1, r3
 8001e72:	d027      	beq.n	8001ec4 <J3_SH1106_setClsPixel+0xb4>
      _oled->buffer[auxIndex]  = _oled->buffer[auxIndex] & (~(0x01 << resto));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	89bb      	ldrh	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b259      	sxtb	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
      J3_SH1106_cursorX(_oled, _x);
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff0b 	bl	8001cbe <J3_SH1106_cursorX>
      J3_SH1106_cursorY(_oled, page);
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <J3_SH1106_cursorY>
      j3_sh1106_sendDado(_oled, _oled->buffer[auxIndex]);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fdb5 	bl	8001a2e <j3_sh1106_sendDado>
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <J3_SH1106_clrDisplayByBuffer>:

void J3_SH1106_setChar(TOLED*_oled, unsigned char _c){

}

void J3_SH1106_clrDisplayByBuffer(TOLED* _oled){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint16_t auxIndex;
  for (uint8_t line = 0 ; line <= 7; line++){
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e02f      	b.n	8001f3a <J3_SH1106_clrDisplayByBuffer+0x6e>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001eda:	2300      	movs	r3, #0
 8001edc:	73bb      	strb	r3, [r7, #14]
 8001ede:	e025      	b.n	8001f2c <J3_SH1106_clrDisplayByBuffer+0x60>
	  auxIndex = j3_sh1106_getIndexBuffer(x,line);
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fdc2 	bl	8001a70 <j3_sh1106_getIndexBuffer>
 8001eec:	4603      	mov	r3, r0
 8001eee:	81bb      	strh	r3, [r7, #12]
	  if( _oled->buffer[auxIndex] != 0x00){
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	89bb      	ldrh	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <J3_SH1106_clrDisplayByBuffer+0x5a>
	    _oled->buffer[auxIndex] = 0x00;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	89bb      	ldrh	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
    	J3_SH1106_cursorY(_oled, line);
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fef8 	bl	8001d04 <J3_SH1106_cursorY>
		J3_SH1106_cursorX(_oled, x);
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fed0 	bl	8001cbe <J3_SH1106_cursorX>
		j3_sh1106_sendDado(_oled,0x00);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fd84 	bl	8001a2e <j3_sh1106_sendDado>
	for (uint8_t x = 0 ; x <= 127; x++){
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73bb      	strb	r3, [r7, #14]
 8001f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dad5      	bge.n	8001ee0 <J3_SH1106_clrDisplayByBuffer+0x14>
  for (uint8_t line = 0 ; line <= 7; line++){
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b07      	cmp	r3, #7
 8001f3e:	d9cc      	bls.n	8001eda <J3_SH1106_clrDisplayByBuffer+0xe>
	  }
	}
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <J3_SH1106_line>:

void J3_SH1106_line(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 8001f4a:	b590      	push	{r4, r7, lr}
 8001f4c:	b089      	sub	sp, #36	; 0x24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	4608      	mov	r0, r1
 8001f54:	4611      	mov	r1, r2
 8001f56:	461a      	mov	r2, r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	70fb      	strb	r3, [r7, #3]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70bb      	strb	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	787b      	ldrb	r3, [r7, #1]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10b      	bne.n	8001f84 <J3_SH1106_line+0x3a>
 8001f6c:	78ba      	ldrb	r2, [r7, #2]
 8001f6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d106      	bne.n	8001f84 <J3_SH1106_line+0x3a>
	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8001f76:	78ba      	ldrb	r2, [r7, #2]
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff feec 	bl	8001d5a <J3_SH1106_setPixel>
    return;
 8001f82:	e0c5      	b.n	8002110 <J3_SH1106_line+0x1c6>
  }
  int8_t dx, dy, sx, sy;

  dx = _x1 - _x0;
 8001f84:	787a      	ldrb	r2, [r7, #1]
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	77fb      	strb	r3, [r7, #31]
  sx = (dx < 0) ? -1 : 1;
 8001f8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da02      	bge.n	8001f9c <J3_SH1106_line+0x52>
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e000      	b.n	8001f9e <J3_SH1106_line+0x54>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	77bb      	strb	r3, [r7, #30]
  dy = _y1 - _y0;
 8001fa0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fa4:	78bb      	ldrb	r3, [r7, #2]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	777b      	strb	r3, [r7, #29]
  sy = (dy < 0) ? -1 : 1;
 8001fac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da02      	bge.n	8001fba <J3_SH1106_line+0x70>
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb8:	e000      	b.n	8001fbc <J3_SH1106_line+0x72>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	773b      	strb	r3, [r7, #28]

  if (abs(dy) < abs(dx)){
 8001fbe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bfb8      	it	lt
 8001fc6:	425b      	neglt	r3, r3
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfb8      	it	lt
 8001fd2:	425b      	neglt	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d249      	bcs.n	800206e <J3_SH1106_line+0x124>
    float m = (float) dy / dx;
 8001fda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe0c 	bl	8000bfc <__aeabi_i2f>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fe06 	bl	8000bfc <__aeabi_i2f>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7fe ff09 	bl	8000e0c <__aeabi_fdiv>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	613b      	str	r3, [r7, #16]
    float b = _y0 - m * _x0;
 8001ffe:	78bb      	ldrb	r3, [r7, #2]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fdfb 	bl	8000bfc <__aeabi_i2f>
 8002006:	4604      	mov	r4, r0
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fdf6 	bl	8000bfc <__aeabi_i2f>
 8002010:	4603      	mov	r3, r0
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe45 	bl	8000ca4 <__aeabi_fmul>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe fd36 	bl	8000a90 <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]

    while (_x0 != _x1){
 8002028:	e01c      	b.n	8002064 <J3_SH1106_line+0x11a>
      J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fde5 	bl	8000bfc <__aeabi_i2f>
 8002032:	4603      	mov	r3, r0
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe34 	bl	8000ca4 <__aeabi_fmul>
 800203c:	4603      	mov	r3, r0
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd27 	bl	8000a94 <__addsf3>
 8002046:	4603      	mov	r3, r0
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ff7b 	bl	8000f44 <__aeabi_f2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	b2da      	uxtb	r2, r3
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fe7f 	bl	8001d5a <J3_SH1106_setPixel>
      _x0 += sx;
 800205c:	7fba      	ldrb	r2, [r7, #30]
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	4413      	add	r3, r2
 8002062:	70fb      	strb	r3, [r7, #3]
    while (_x0 != _x1){
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	429a      	cmp	r2, r3
 800206a:	d1de      	bne.n	800202a <J3_SH1106_line+0xe0>
 800206c:	e049      	b.n	8002102 <J3_SH1106_line+0x1b8>
    }
  }
  else {
    float m = (float) dx / dy;
 800206e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fdc2 	bl	8000bfc <__aeabi_i2f>
 8002078:	4604      	mov	r4, r0
 800207a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fdbc 	bl	8000bfc <__aeabi_i2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4619      	mov	r1, r3
 8002088:	4620      	mov	r0, r4
 800208a:	f7fe febf 	bl	8000e0c <__aeabi_fdiv>
 800208e:	4603      	mov	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
    float b = _x0 - m * _y0;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fdb1 	bl	8000bfc <__aeabi_i2f>
 800209a:	4604      	mov	r4, r0
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fdac 	bl	8000bfc <__aeabi_i2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fdfb 	bl	8000ca4 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe fcec 	bl	8000a90 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
 80020ba:	617b      	str	r3, [r7, #20]

    while (_y0 != _y1){
 80020bc:	e01c      	b.n	80020f8 <J3_SH1106_line+0x1ae>
      J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 80020be:	78bb      	ldrb	r3, [r7, #2]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fd9b 	bl	8000bfc <__aeabi_i2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fdea 	bl	8000ca4 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fcdd 	bl	8000a94 <__addsf3>
 80020da:	4603      	mov	r3, r0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ff31 	bl	8000f44 <__aeabi_f2uiz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	78ba      	ldrb	r2, [r7, #2]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fe35 	bl	8001d5a <J3_SH1106_setPixel>
          _y0 += sy;
 80020f0:	7f3a      	ldrb	r2, [r7, #28]
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	4413      	add	r3, r2
 80020f6:	70bb      	strb	r3, [r7, #2]
    while (_y0 != _y1){
 80020f8:	78ba      	ldrb	r2, [r7, #2]
 80020fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1dd      	bne.n	80020be <J3_SH1106_line+0x174>
    }
  }

  J3_SH1106_setPixel(_oled, _x1, _y1);
 8002102:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002106:	787b      	ldrb	r3, [r7, #1]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe25 	bl	8001d5a <J3_SH1106_setPixel>
}
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}

08002116 <J3_SH1106_lineDash>:

void J3_SH1106_lineDash(TOLED* _oled, uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1){
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b089      	sub	sp, #36	; 0x24
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	4608      	mov	r0, r1
 8002120:	4611      	mov	r1, r2
 8002122:	461a      	mov	r2, r3
 8002124:	4603      	mov	r3, r0
 8002126:	70fb      	strb	r3, [r7, #3]
 8002128:	460b      	mov	r3, r1
 800212a:	70bb      	strb	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  if (_x0 == _x1 && _y0 == _y1) {
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	429a      	cmp	r2, r3
 8002136:	d10b      	bne.n	8002150 <J3_SH1106_lineDash+0x3a>
 8002138:	78ba      	ldrb	r2, [r7, #2]
 800213a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800213e:	429a      	cmp	r2, r3
 8002140:	d106      	bne.n	8002150 <J3_SH1106_lineDash+0x3a>
 	  J3_SH1106_setPixel(_oled, _x0, _y0);
 8002142:	78ba      	ldrb	r2, [r7, #2]
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fe06 	bl	8001d5a <J3_SH1106_setPixel>
     return;
 800214e:	e10b      	b.n	8002368 <J3_SH1106_lineDash+0x252>
   }
   int8_t dx, dy, sx, sy;
   int8_t p = 1;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]

   dx = _x1 - _x0;
 8002154:	787a      	ldrb	r2, [r7, #1]
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	77bb      	strb	r3, [r7, #30]
   sx = (dx < 0) ? -1 : 1;
 800215e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da02      	bge.n	800216c <J3_SH1106_lineDash+0x56>
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e000      	b.n	800216e <J3_SH1106_lineDash+0x58>
 800216c:	2301      	movs	r3, #1
 800216e:	777b      	strb	r3, [r7, #29]
   dy = _y1 - _y0;
 8002170:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002174:	78bb      	ldrb	r3, [r7, #2]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	773b      	strb	r3, [r7, #28]
   sy = (dy < 0) ? -1 : 1;
 800217c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da02      	bge.n	800218a <J3_SH1106_lineDash+0x74>
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	e000      	b.n	800218c <J3_SH1106_lineDash+0x76>
 800218a:	2301      	movs	r3, #1
 800218c:	76fb      	strb	r3, [r7, #27]

   if (abs(dy) < abs(dx)){
 800218e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	bfb8      	it	lt
 8002196:	425b      	neglt	r3, r3
 8002198:	b2da      	uxtb	r2, r3
 800219a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bfb8      	it	lt
 80021a2:	425b      	neglt	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d26b      	bcs.n	8002282 <J3_SH1106_lineDash+0x16c>
     float m = (float) dy / dx;
 80021aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd24 	bl	8000bfc <__aeabi_i2f>
 80021b4:	4604      	mov	r4, r0
 80021b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fd1e 	bl	8000bfc <__aeabi_i2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fe21 	bl	8000e0c <__aeabi_fdiv>
 80021ca:	4603      	mov	r3, r0
 80021cc:	60fb      	str	r3, [r7, #12]
     float b = _y0 - m * _x0;
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fd13 	bl	8000bfc <__aeabi_i2f>
 80021d6:	4604      	mov	r4, r0
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd0e 	bl	8000bfc <__aeabi_i2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd5d 	bl	8000ca4 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe fc4e 	bl	8000a90 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	60bb      	str	r3, [r7, #8]

     while (_x0 != _x1){
 80021f8:	e03e      	b.n	8002278 <J3_SH1106_lineDash+0x162>
       if(p){
 80021fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01b      	beq.n	800223a <J3_SH1106_lineDash+0x124>
         J3_SH1106_setPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fcf9 	bl	8000bfc <__aeabi_i2f>
 800220a:	4603      	mov	r3, r0
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd48 	bl	8000ca4 <__aeabi_fmul>
 8002214:	4603      	mov	r3, r0
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fc3b 	bl	8000a94 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fe8f 	bl	8000f44 <__aeabi_f2uiz>
 8002226:	4603      	mov	r3, r0
 8002228:	b2da      	uxtb	r2, r3
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fd93 	bl	8001d5a <J3_SH1106_setPixel>
         p = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	77fb      	strb	r3, [r7, #31]
 8002238:	e01a      	b.n	8002270 <J3_SH1106_lineDash+0x15a>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, _x0, (uint8_t)(m * _x0 + b) );
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fcdd 	bl	8000bfc <__aeabi_i2f>
 8002242:	4603      	mov	r3, r0
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fd2c 	bl	8000ca4 <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fc1f 	bl	8000a94 <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fe73 	bl	8000f44 <__aeabi_f2uiz>
 800225e:	4603      	mov	r3, r0
 8002260:	b2da      	uxtb	r2, r3
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fdd2 	bl	8001e10 <J3_SH1106_setClsPixel>
    	 p = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]
       }

       _x0 += sx;
 8002270:	7f7a      	ldrb	r2, [r7, #29]
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	4413      	add	r3, r2
 8002276:	70fb      	strb	r3, [r7, #3]
     while (_x0 != _x1){
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	429a      	cmp	r2, r3
 800227e:	d1bc      	bne.n	80021fa <J3_SH1106_lineDash+0xe4>
 8002280:	e06b      	b.n	800235a <J3_SH1106_lineDash+0x244>
     }
   }
   else {
     float m = (float) dx / dy;
 8002282:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fcb8 	bl	8000bfc <__aeabi_i2f>
 800228c:	4604      	mov	r4, r0
 800228e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fcb2 	bl	8000bfc <__aeabi_i2f>
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	f7fe fdb5 	bl	8000e0c <__aeabi_fdiv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	617b      	str	r3, [r7, #20]
     float b = _x0 - m * _y0;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fca7 	bl	8000bfc <__aeabi_i2f>
 80022ae:	4604      	mov	r4, r0
 80022b0:	78bb      	ldrb	r3, [r7, #2]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fca2 	bl	8000bfc <__aeabi_i2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fcf1 	bl	8000ca4 <__aeabi_fmul>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7fe fbe2 	bl	8000a90 <__aeabi_fsub>
 80022cc:	4603      	mov	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

     while (_y0 != _y1){
 80022d0:	e03e      	b.n	8002350 <J3_SH1106_lineDash+0x23a>
       if(p){
 80022d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01b      	beq.n	8002312 <J3_SH1106_lineDash+0x1fc>
         J3_SH1106_setPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 80022da:	78bb      	ldrb	r3, [r7, #2]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fc8d 	bl	8000bfc <__aeabi_i2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	6979      	ldr	r1, [r7, #20]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fcdc 	bl	8000ca4 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fbcf 	bl	8000a94 <__addsf3>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fe23 	bl	8000f44 <__aeabi_f2uiz>
 80022fe:	4603      	mov	r3, r0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	78ba      	ldrb	r2, [r7, #2]
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fd27 	bl	8001d5a <J3_SH1106_setPixel>
         p = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
 8002310:	e01a      	b.n	8002348 <J3_SH1106_lineDash+0x232>
       }
       else{
    	 J3_SH1106_setClsPixel(_oled, (uint8_t)(m * _y0 + b), _y0);
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fc71 	bl	8000bfc <__aeabi_i2f>
 800231a:	4603      	mov	r3, r0
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fcc0 	bl	8000ca4 <__aeabi_fmul>
 8002324:	4603      	mov	r3, r0
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fbb3 	bl	8000a94 <__addsf3>
 800232e:	4603      	mov	r3, r0
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fe07 	bl	8000f44 <__aeabi_f2uiz>
 8002336:	4603      	mov	r3, r0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	78ba      	ldrb	r2, [r7, #2]
 800233c:	4619      	mov	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fd66 	bl	8001e10 <J3_SH1106_setClsPixel>
    	 p = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	77fb      	strb	r3, [r7, #31]
       }
       _y0 += sy;
 8002348:	7efa      	ldrb	r2, [r7, #27]
 800234a:	78bb      	ldrb	r3, [r7, #2]
 800234c:	4413      	add	r3, r2
 800234e:	70bb      	strb	r3, [r7, #2]
     while (_y0 != _y1){
 8002350:	78ba      	ldrb	r2, [r7, #2]
 8002352:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002356:	429a      	cmp	r2, r3
 8002358:	d1bb      	bne.n	80022d2 <J3_SH1106_lineDash+0x1bc>
     }
   }

   J3_SH1106_setPixel(_oled, _x1, _y1);
 800235a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800235e:	787b      	ldrb	r3, [r7, #1]
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fcf9 	bl	8001d5a <J3_SH1106_setPixel>
}
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd90      	pop	{r4, r7, pc}

0800236e <J3_SH1106_draw>:
	  else
		J3_SH1106_setClsPixel(_oled, _x, _y + i);
  }
}

void J3_SH1106_draw(TOLED* _oled, uint8_t* _draw, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h){
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	4611      	mov	r1, r2
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	4613      	mov	r3, r2
 8002382:	71bb      	strb	r3, [r7, #6]
  uint16_t tam = _w * _h;
 8002384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800238e:	b292      	uxth	r2, r2
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	827b      	strh	r3, [r7, #18]
  uint16_t contX = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	82fb      	strh	r3, [r7, #22]
  uint8_t aux = 0x80;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	747b      	strb	r3, [r7, #17]

  for(uint16_t i = 0; i<tam; i++){
 800239e:	2300      	movs	r3, #0
 80023a0:	82bb      	strh	r3, [r7, #20]
 80023a2:	e036      	b.n	8002412 <J3_SH1106_draw+0xa4>
	if(_draw[i/8] & (aux >> (i % 8)) ){
 80023a4:	8abb      	ldrh	r3, [r7, #20]
 80023a6:	08db      	lsrs	r3, r3, #3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	7c7a      	ldrb	r2, [r7, #17]
 80023b6:	8abb      	ldrh	r3, [r7, #20]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	fa42 f303 	asr.w	r3, r2, r3
 80023c0:	400b      	ands	r3, r1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <J3_SH1106_draw+0x6e>
	  J3_SH1106_setPixel(_oled, _x + contX, _y);
 80023c6:	8afb      	ldrh	r3, [r7, #22]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4413      	add	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	79ba      	ldrb	r2, [r7, #6]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff fcc0 	bl	8001d5a <J3_SH1106_setPixel>
 80023da:	e009      	b.n	80023f0 <J3_SH1106_draw+0x82>
	}
    else{
    	J3_SH1106_setClsPixel(_oled, _x + contX, _y);
 80023dc:	8afb      	ldrh	r3, [r7, #22]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	79ba      	ldrb	r2, [r7, #6]
 80023e8:	4619      	mov	r1, r3
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff fd10 	bl	8001e10 <J3_SH1106_setClsPixel>
	}
    contX++;
 80023f0:	8afb      	ldrh	r3, [r7, #22]
 80023f2:	3301      	adds	r3, #1
 80023f4:	82fb      	strh	r3, [r7, #22]
    if(contX == _w){
 80023f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	8afa      	ldrh	r2, [r7, #22]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d104      	bne.n	800240c <J3_SH1106_draw+0x9e>
      _y++;
 8002402:	79bb      	ldrb	r3, [r7, #6]
 8002404:	3301      	adds	r3, #1
 8002406:	71bb      	strb	r3, [r7, #6]
	  contX = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i<tam; i++){
 800240c:	8abb      	ldrh	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	82bb      	strh	r3, [r7, #20]
 8002412:	8aba      	ldrh	r2, [r7, #20]
 8002414:	8a7b      	ldrh	r3, [r7, #18]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3c4      	bcc.n	80023a4 <J3_SH1106_draw+0x36>
    }
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <J3_SH1106_setBox>:

void J3_SH1106_setBox(TOLED* _oled, uint8_t _x, uint8_t _y, uint8_t _w, uint8_t _h,  uint8_t _fill){
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	70fb      	strb	r3, [r7, #3]
 8002436:	460b      	mov	r3, r1
 8002438:	70bb      	strb	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	707b      	strb	r3, [r7, #1]
  J3_SH1106_line(_oled, _x, _y, _x + _w, _y);
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	4413      	add	r3, r2
 8002444:	b2d8      	uxtb	r0, r3
 8002446:	78ba      	ldrb	r2, [r7, #2]
 8002448:	78f9      	ldrb	r1, [r7, #3]
 800244a:	78bb      	ldrb	r3, [r7, #2]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	4603      	mov	r3, r0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fd7a 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y, _x, _y + _h);
 8002456:	78ba      	ldrb	r2, [r7, #2]
 8002458:	7e3b      	ldrb	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	78f8      	ldrb	r0, [r7, #3]
 8002460:	78ba      	ldrb	r2, [r7, #2]
 8002462:	78f9      	ldrb	r1, [r7, #3]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fd6e 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _x +_w, _y, _x + _w, _y + _h);
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	4413      	add	r3, r2
 8002474:	b2d9      	uxtb	r1, r3
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	4413      	add	r3, r2
 800247c:	b2d8      	uxtb	r0, r3
 800247e:	78ba      	ldrb	r2, [r7, #2]
 8002480:	7e3b      	ldrb	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	78ba      	ldrb	r2, [r7, #2]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fd5c 	bl	8001f4a <J3_SH1106_line>
  J3_SH1106_line(_oled, _x, _y + _h, _x + _w, _y + _h);
 8002492:	78ba      	ldrb	r2, [r7, #2]
 8002494:	7e3b      	ldrb	r3, [r7, #24]
 8002496:	4413      	add	r3, r2
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	4413      	add	r3, r2
 80024a0:	b2dc      	uxtb	r4, r3
 80024a2:	78ba      	ldrb	r2, [r7, #2]
 80024a4:	7e3b      	ldrb	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	78f9      	ldrb	r1, [r7, #3]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4623      	mov	r3, r4
 80024b0:	4602      	mov	r2, r0
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fd49 	bl	8001f4a <J3_SH1106_line>
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024c2:	e003      	b.n	80024cc <LoopCopyDataInit>

080024c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024ca:	3104      	adds	r1, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024cc:	480a      	ldr	r0, [pc, #40]	; (80024f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024d4:	d3f6      	bcc.n	80024c4 <CopyDataInit>
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024d8:	e002      	b.n	80024e0 <LoopFillZerobss>

080024da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024dc:	f842 3b04 	str.w	r3, [r2], #4

080024e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024e4:	d3f9      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e6:	f7ff fa7b 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f002 f9b5 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ee:	f7fe fe85 	bl	80011fc <main>
  bx lr
 80024f2:	4770      	bx	lr
  ldr r3, =_sidata
 80024f4:	080078fc 	.word	0x080078fc
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002500:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002504:	20000294 	.word	0x20000294

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_Init+0x28>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_Init+0x28>)
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 fe03 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff f940 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fe0d 	bl	8003176 <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 fde3 	bl	800313e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000000 	.word	0x20000000
 8002590:	20000008 	.word	0x20000008
 8002594:	20000004 	.word	0x20000004

08002598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x1c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_IncTick+0x20>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <HAL_IncTick+0x20>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000008 	.word	0x20000008
 80025b8:	20000280 	.word	0x20000280

080025bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <HAL_GetTick+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000280 	.word	0x20000280

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff fff0 	bl	80025bc <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffe0 	bl	80025bc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008

08002618 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0be      	b.n	80027b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fcd2 	bl	8001000 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fbdd 	bl	8002e1c <ADC_ConversionStop_Disable>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 8099 	bne.w	80027a6 <HAL_ADC_Init+0x18e>
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8095 	bne.w	80027a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002684:	f023 0302 	bic.w	r3, r3, #2
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002698:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7b1b      	ldrb	r3, [r3, #12]
 800269e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b0:	d003      	beq.n	80026ba <HAL_ADC_Init+0xa2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_ADC_Init+0xa8>
 80026ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026be:	e000      	b.n	80026c2 <HAL_ADC_Init+0xaa>
 80026c0:	2300      	movs	r3, #0
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7d1b      	ldrb	r3, [r3, #20]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d119      	bne.n	8002704 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b1b      	ldrb	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	3b01      	subs	r3, #1
 80026de:	035a      	lsls	r2, r3, #13
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e00b      	b.n	8002704 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_ADC_Init+0x1a8>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	430b      	orrs	r3, r1
 800272a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d003      	beq.n	800273e <HAL_ADC_Init+0x126>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d104      	bne.n	8002748 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	3b01      	subs	r3, #1
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	430a      	orrs	r2, r1
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 8002764:	4013      	ands	r3, r2
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002782:	e018      	b.n	80027b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	f023 0312 	bic.w	r3, r3, #18
 800278c:	f043 0210 	orr.w	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a4:	e007      	b.n	80027b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	ffe1f7fd 	.word	0xffe1f7fd
 80027c4:	ff1f0efe 	.word	0xff1f0efe

080027c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_Start+0x1a>
 80027de:	2302      	movs	r3, #2
 80027e0:	e098      	b.n	8002914 <HAL_ADC_Start+0x14c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fac4 	bl	8002d78 <ADC_Enable>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8087 	bne.w	800290a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a41      	ldr	r2, [pc, #260]	; (800291c <HAL_ADC_Start+0x154>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d105      	bne.n	8002826 <HAL_ADC_Start+0x5e>
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_ADC_Start+0x158>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d115      	bne.n	8002852 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d026      	beq.n	800288e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002848:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002850:	e01d      	b.n	800288e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <HAL_ADC_Start+0x158>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_ADC_Start+0xaa>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_ADC_Start+0x154>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10d      	bne.n	800288e <HAL_ADC_Start+0xc6>
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_ADC_Start+0x158>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002886:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f023 0206 	bic.w	r2, r3, #6
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a6:	e002      	b.n	80028ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0202 	mvn.w	r2, #2
 80028be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028ce:	d113      	bne.n	80028f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_ADC_Start+0x154>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d105      	bne.n	80028e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_ADC_Start+0x158>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	e00c      	b.n	8002912 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e003      	b.n	8002912 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012800 	.word	0x40012800
 8002920:	40012400 	.word	0x40012400

08002924 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_Stop+0x1a>
 800293a:	2302      	movs	r3, #2
 800293c:	e01a      	b.n	8002974 <HAL_ADC_Stop+0x50>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa68 	bl	8002e1c <ADC_ConversionStop_Disable>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002992:	f7ff fe13 	bl	80025bc <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0c8      	b.n	8002b50 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d12a      	bne.n	8002a22 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d123      	bne.n	8002a22 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029da:	e01a      	b.n	8002a12 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d016      	beq.n	8002a12 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_ADC_PollForConversion+0x7e>
 80029ea:	f7ff fde7 	bl	80025bc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d20b      	bcs.n	8002a12 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09e      	b.n	8002b50 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0dd      	beq.n	80029dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a20:	e06c      	b.n	8002afc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a22:	4b4d      	ldr	r3, [pc, #308]	; (8002b58 <HAL_ADC_PollForConversion+0x1dc>)
 8002a24:	681c      	ldr	r4, [r3, #0]
 8002a26:	2002      	movs	r0, #2
 8002a28:	f001 fe50 	bl	80046cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6919      	ldr	r1, [r3, #16]
 8002a38:	4b48      	ldr	r3, [pc, #288]	; (8002b5c <HAL_ADC_PollForConversion+0x1e0>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d118      	bne.n	8002a72 <HAL_ADC_PollForConversion+0xf6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_ADC_PollForConversion+0x1e4>)
 8002a48:	400b      	ands	r3, r1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d111      	bne.n	8002a72 <HAL_ADC_PollForConversion+0xf6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_ADC_PollForConversion+0x1e8>)
 8002a56:	400b      	ands	r3, r1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d108      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xf2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_ADC_PollForConversion+0x1ec>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xf2>
 8002a6a:	2314      	movs	r3, #20
 8002a6c:	e020      	b.n	8002ab0 <HAL_ADC_PollForConversion+0x134>
 8002a6e:	2329      	movs	r3, #41	; 0x29
 8002a70:	e01e      	b.n	8002ab0 <HAL_ADC_PollForConversion+0x134>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_ADC_PollForConversion+0x1e8>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_PollForConversion+0x112>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_ADC_PollForConversion+0x1ec>)
 8002a88:	400b      	ands	r3, r1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_ADC_PollForConversion+0x12e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_ADC_PollForConversion+0x1f0>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <HAL_ADC_PollForConversion+0x132>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_ADC_PollForConversion+0x1f0>)
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_PollForConversion+0x132>
 8002aaa:	2354      	movs	r3, #84	; 0x54
 8002aac:	e000      	b.n	8002ab0 <HAL_ADC_PollForConversion+0x134>
 8002aae:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ab6:	e01d      	b.n	8002af4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d016      	beq.n	8002aee <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_ADC_PollForConversion+0x15a>
 8002ac6:	f7ff fd79 	bl	80025bc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20b      	bcs.n	8002aee <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e030      	b.n	8002b50 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8dd      	bhi.n	8002ab8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0212 	mvn.w	r2, #18
 8002b04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b20:	d115      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d111      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	24924924 	.word	0x24924924
 8002b60:	00924924 	.word	0x00924924
 8002b64:	12492492 	.word	0x12492492
 8002b68:	00492492 	.word	0x00492492
 8002b6c:	00249249 	.word	0x00249249

08002b70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x20>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0dc      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1da>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d81c      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b05      	subs	r3, #5
 8002bca:	221f      	movs	r2, #31
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4019      	ands	r1, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b05      	subs	r3, #5
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf0:	e03c      	b.n	8002c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d81c      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b23      	subs	r3, #35	; 0x23
 8002c0c:	221f      	movs	r2, #31
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	4019      	ands	r1, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b23      	subs	r3, #35	; 0x23
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
 8002c32:	e01b      	b.n	8002c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	; 0x41
 8002c46:	221f      	movs	r2, #31
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	4019      	ands	r1, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b41      	subs	r3, #65	; 0x41
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d91c      	bls.n	8002cae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68d9      	ldr	r1, [r3, #12]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	3b1e      	subs	r3, #30
 8002c86:	2207      	movs	r2, #7
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4019      	ands	r1, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6898      	ldr	r0, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	e019      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6919      	ldr	r1, [r3, #16]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4019      	ands	r1, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6898      	ldr	r0, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d003      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d132      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_ADC_ConfigChannel+0x1e4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d125      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d126      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d18:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d11a      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0c9a      	lsrs	r2, r3, #18
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f9      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x1b2>
 8002d46:	e007      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012400 	.word	0x40012400
 8002d70:	20000000 	.word	0x20000000
 8002d74:	431bde83 	.word	0x431bde83

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d039      	beq.n	8002e0a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <ADC_Enable+0x9c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <ADC_Enable+0xa0>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	0c9b      	lsrs	r3, r3, #18
 8002db2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002db4:	e002      	b.n	8002dbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f9      	bne.n	8002db6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dc2:	f7ff fbfb 	bl	80025bc <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dc8:	e018      	b.n	8002dfc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dca:	f7ff fbf7 	bl	80025bc <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d911      	bls.n	8002dfc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f043 0210 	orr.w	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d1df      	bne.n	8002dca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d127      	bne.n	8002e86 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e46:	f7ff fbb9 	bl	80025bc <HAL_GetTick>
 8002e4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e4c:	e014      	b.n	8002e78 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e4e:	f7ff fbb5 	bl	80025bc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d90d      	bls.n	8002e78 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e007      	b.n	8002e88 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d0e3      	beq.n	8002e4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADCEx_Calibration_Start+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e086      	b.n	8002fbc <HAL_ADCEx_Calibration_Start+0x12c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffb0 	bl	8002e1c <ADC_ConversionStop_Disable>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d175      	bne.n	8002fb2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ece:	f023 0302 	bic.w	r3, r3, #2
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_ADCEx_Calibration_Start+0x134>)
 8002edc:	681c      	ldr	r4, [r3, #0]
 8002ede:	2002      	movs	r0, #2
 8002ee0:	f001 fbf4 	bl	80046cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002eea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002eec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff3b 	bl	8002d78 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f12:	f7ff fb53 	bl	80025bc <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f18:	e014      	b.n	8002f44 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f1a:	f7ff fb4f 	bl	80025bc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b0a      	cmp	r3, #10
 8002f26:	d90d      	bls.n	8002f44 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f023 0312 	bic.w	r3, r3, #18
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e03b      	b.n	8002fbc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e3      	bne.n	8002f1a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0204 	orr.w	r2, r2, #4
 8002f60:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f62:	f7ff fb2b 	bl	80025bc <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f68:	e014      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f6a:	f7ff fb27 	bl	80025bc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b0a      	cmp	r3, #10
 8002f76:	d90d      	bls.n	8002f94 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f023 0312 	bic.w	r3, r3, #18
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e013      	b.n	8002fbc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e3      	bne.n	8002f6a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	20000000 	.word	0x20000000

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff90 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff49 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff5e 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff90 	bl	8003080 <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5f 	bl	800302c <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffb0 	bl	80030e4 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b08b      	sub	sp, #44	; 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a2:	e169      	b.n	8003478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a4:	2201      	movs	r2, #1
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f040 8158 	bne.w	8003472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a9a      	ldr	r2, [pc, #616]	; (8003430 <HAL_GPIO_Init+0x2a0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d05e      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031cc:	4a98      	ldr	r2, [pc, #608]	; (8003430 <HAL_GPIO_Init+0x2a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d875      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031d2:	4a98      	ldr	r2, [pc, #608]	; (8003434 <HAL_GPIO_Init+0x2a4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d058      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031d8:	4a96      	ldr	r2, [pc, #600]	; (8003434 <HAL_GPIO_Init+0x2a4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d86f      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031de:	4a96      	ldr	r2, [pc, #600]	; (8003438 <HAL_GPIO_Init+0x2a8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d052      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031e4:	4a94      	ldr	r2, [pc, #592]	; (8003438 <HAL_GPIO_Init+0x2a8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d869      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031ea:	4a94      	ldr	r2, [pc, #592]	; (800343c <HAL_GPIO_Init+0x2ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04c      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031f0:	4a92      	ldr	r2, [pc, #584]	; (800343c <HAL_GPIO_Init+0x2ac>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d863      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031f6:	4a92      	ldr	r2, [pc, #584]	; (8003440 <HAL_GPIO_Init+0x2b0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d046      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031fc:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_GPIO_Init+0x2b0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d85d      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 8003202:	2b12      	cmp	r3, #18
 8003204:	d82a      	bhi.n	800325c <HAL_GPIO_Init+0xcc>
 8003206:	2b12      	cmp	r3, #18
 8003208:	d859      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_GPIO_Init+0x80>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	0800328b 	.word	0x0800328b
 8003214:	08003265 	.word	0x08003265
 8003218:	08003277 	.word	0x08003277
 800321c:	080032b9 	.word	0x080032b9
 8003220:	080032bf 	.word	0x080032bf
 8003224:	080032bf 	.word	0x080032bf
 8003228:	080032bf 	.word	0x080032bf
 800322c:	080032bf 	.word	0x080032bf
 8003230:	080032bf 	.word	0x080032bf
 8003234:	080032bf 	.word	0x080032bf
 8003238:	080032bf 	.word	0x080032bf
 800323c:	080032bf 	.word	0x080032bf
 8003240:	080032bf 	.word	0x080032bf
 8003244:	080032bf 	.word	0x080032bf
 8003248:	080032bf 	.word	0x080032bf
 800324c:	080032bf 	.word	0x080032bf
 8003250:	080032bf 	.word	0x080032bf
 8003254:	0800326d 	.word	0x0800326d
 8003258:	08003281 	.word	0x08003281
 800325c:	4a79      	ldr	r2, [pc, #484]	; (8003444 <HAL_GPIO_Init+0x2b4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003262:	e02c      	b.n	80032be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	623b      	str	r3, [r7, #32]
          break;
 800326a:	e029      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	3304      	adds	r3, #4
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e024      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	3308      	adds	r3, #8
 800327c:	623b      	str	r3, [r7, #32]
          break;
 800327e:	e01f      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	330c      	adds	r3, #12
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e01a      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003292:	2304      	movs	r3, #4
 8003294:	623b      	str	r3, [r7, #32]
          break;
 8003296:	e013      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a0:	2308      	movs	r3, #8
 80032a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	611a      	str	r2, [r3, #16]
          break;
 80032aa:	e009      	b.n	80032c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	615a      	str	r2, [r3, #20]
          break;
 80032b6:	e003      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          break;
 80032be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	d801      	bhi.n	80032ca <HAL_GPIO_Init+0x13a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_Init+0x13e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d802      	bhi.n	80032dc <HAL_GPIO_Init+0x14c>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x152>
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	3b08      	subs	r3, #8
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	210f      	movs	r1, #15
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80b1 	beq.w	8003472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003310:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_GPIO_Init+0x2b8>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_GPIO_Init+0x2b8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_GPIO_Init+0x2b8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <HAL_GPIO_Init+0x2bc>)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a40      	ldr	r2, [pc, #256]	; (8003450 <HAL_GPIO_Init+0x2c0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_GPIO_Init+0x1ec>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <HAL_GPIO_Init+0x2c4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00d      	beq.n	8003378 <HAL_GPIO_Init+0x1e8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3e      	ldr	r2, [pc, #248]	; (8003458 <HAL_GPIO_Init+0x2c8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <HAL_GPIO_Init+0x1e4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3d      	ldr	r2, [pc, #244]	; (800345c <HAL_GPIO_Init+0x2cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_GPIO_Init+0x1e0>
 800336c:	2303      	movs	r3, #3
 800336e:	e006      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003370:	2304      	movs	r3, #4
 8003372:	e004      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003374:	2302      	movs	r3, #2
 8003376:	e002      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 800337c:	2300      	movs	r3, #0
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	f002 0203 	and.w	r2, r2, #3
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	4093      	lsls	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800338e:	492f      	ldr	r1, [pc, #188]	; (800344c <HAL_GPIO_Init+0x2bc>)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	492c      	ldr	r1, [pc, #176]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033b6:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	43db      	mvns	r3, r3
 80033be:	4928      	ldr	r1, [pc, #160]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033d0:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4922      	ldr	r1, [pc, #136]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	491e      	ldr	r1, [pc, #120]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4918      	ldr	r1, [pc, #96]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	4914      	ldr	r1, [pc, #80]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 8003410:	4013      	ands	r3, r2
 8003412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	490e      	ldr	r1, [pc, #56]	; (8003460 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
 800342c:	e021      	b.n	8003472 <HAL_GPIO_Init+0x2e2>
 800342e:	bf00      	nop
 8003430:	10320000 	.word	0x10320000
 8003434:	10310000 	.word	0x10310000
 8003438:	10220000 	.word	0x10220000
 800343c:	10210000 	.word	0x10210000
 8003440:	10120000 	.word	0x10120000
 8003444:	10110000 	.word	0x10110000
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	40010800 	.word	0x40010800
 8003454:	40010c00 	.word	0x40010c00
 8003458:	40011000 	.word	0x40011000
 800345c:	40011400 	.word	0x40011400
 8003460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_GPIO_Init+0x304>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	43db      	mvns	r3, r3
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <HAL_GPIO_Init+0x304>)
 800346e:	4013      	ands	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	3301      	adds	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f47f ae8e 	bne.w	80031a4 <HAL_GPIO_Init+0x14>
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	372c      	adds	r7, #44	; 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40010400 	.word	0x40010400

08003498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e12b      	b.n	8003702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fe42 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034fc:	f000 ffea 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 8003500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a81      	ldr	r2, [pc, #516]	; (800370c <HAL_I2C_Init+0x274>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d807      	bhi.n	800351c <HAL_I2C_Init+0x84>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a80      	ldr	r2, [pc, #512]	; (8003710 <HAL_I2C_Init+0x278>)
 8003510:	4293      	cmp	r3, r2
 8003512:	bf94      	ite	ls
 8003514:	2301      	movls	r3, #1
 8003516:	2300      	movhi	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e006      	b.n	800352a <HAL_I2C_Init+0x92>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a7d      	ldr	r2, [pc, #500]	; (8003714 <HAL_I2C_Init+0x27c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	bf94      	ite	ls
 8003524:	2301      	movls	r3, #1
 8003526:	2300      	movhi	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0e7      	b.n	8003702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a78      	ldr	r2, [pc, #480]	; (8003718 <HAL_I2C_Init+0x280>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a6a      	ldr	r2, [pc, #424]	; (800370c <HAL_I2C_Init+0x274>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d802      	bhi.n	800356c <HAL_I2C_Init+0xd4>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3301      	adds	r3, #1
 800356a:	e009      	b.n	8003580 <HAL_I2C_Init+0xe8>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	4a69      	ldr	r2, [pc, #420]	; (800371c <HAL_I2C_Init+0x284>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	3301      	adds	r3, #1
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	430b      	orrs	r3, r1
 8003586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	495c      	ldr	r1, [pc, #368]	; (800370c <HAL_I2C_Init+0x274>)
 800359c:	428b      	cmp	r3, r1
 800359e:	d819      	bhi.n	80035d4 <HAL_I2C_Init+0x13c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ae:	1c59      	adds	r1, r3, #1
 80035b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035b4:	400b      	ands	r3, r1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_I2C_Init+0x138>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e59      	subs	r1, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ce:	e051      	b.n	8003674 <HAL_I2C_Init+0x1dc>
 80035d0:	2304      	movs	r3, #4
 80035d2:	e04f      	b.n	8003674 <HAL_I2C_Init+0x1dc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d111      	bne.n	8003600 <HAL_I2C_Init+0x168>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	440b      	add	r3, r1
 80035ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e012      	b.n	8003626 <HAL_I2C_Init+0x18e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1e58      	subs	r0, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	0099      	lsls	r1, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	fbb0 f3f3 	udiv	r3, r0, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Init+0x196>
 800362a:	2301      	movs	r3, #1
 800362c:	e022      	b.n	8003674 <HAL_I2C_Init+0x1dc>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10e      	bne.n	8003654 <HAL_I2C_Init+0x1bc>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1e58      	subs	r0, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	440b      	add	r3, r1
 8003644:	fbb0 f3f3 	udiv	r3, r0, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003652:	e00f      	b.n	8003674 <HAL_I2C_Init+0x1dc>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1e58      	subs	r0, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	0099      	lsls	r1, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	fbb0 f3f3 	udiv	r3, r0, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6809      	ldr	r1, [r1, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6911      	ldr	r1, [r2, #16]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	000186a0 	.word	0x000186a0
 8003710:	001e847f 	.word	0x001e847f
 8003714:	003d08ff 	.word	0x003d08ff
 8003718:	431bde83 	.word	0x431bde83
 800371c:	10624dd3 	.word	0x10624dd3

08003720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
 8003730:	4613      	mov	r3, r2
 8003732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7fe ff42 	bl	80025bc <HAL_GetTick>
 8003738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 80e0 	bne.w	8003908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2319      	movs	r3, #25
 800374e:	2201      	movs	r2, #1
 8003750:	4970      	ldr	r1, [pc, #448]	; (8003914 <HAL_I2C_Master_Transmit+0x1f4>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f964 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e0d3      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2C_Master_Transmit+0x50>
 800376c:	2302      	movs	r3, #2
 800376e:	e0cc      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d007      	beq.n	8003796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2221      	movs	r2, #33	; 0x21
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2210      	movs	r2, #16
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a50      	ldr	r2, [pc, #320]	; (8003918 <HAL_I2C_Master_Transmit+0x1f8>)
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d8:	8979      	ldrh	r1, [r7, #10]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f89c 	bl	800391c <I2C_MasterRequestWrite>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e08d      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003804:	e066      	b.n	80038d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6a39      	ldr	r1, [r7, #32]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f9de 	bl	8003bcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06b      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <HAL_I2C_Master_Transmit+0x188>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6a39      	ldr	r1, [r7, #32]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f9ce 	bl	8003c4e <I2C_WaitOnBTFFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d107      	bne.n	80038d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e01a      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d194      	bne.n	8003806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00100002 	.word	0x00100002
 8003918:	ffff0000 	.word	0xffff0000

0800391c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d006      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003944:	d108      	bne.n	8003958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00b      	b.n	8003970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	2b12      	cmp	r3, #18
 800395e:	d107      	bne.n	8003970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f84f 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	d103      	bne.n	80039a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e035      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e01b      	b.n	80039f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	11db      	asrs	r3, r3, #7
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f063 030f 	orn	r3, r3, #15
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <I2C_MasterRequestWrite+0xfc>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f875 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e010      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <I2C_MasterRequestWrite+0x100>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f865 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00010008 	.word	0x00010008
 8003a1c:	00010002 	.word	0x00010002

08003a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a30:	e025      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d021      	beq.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fe fdbf 	bl	80025bc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e023      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10d      	bne.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	e00c      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0b6      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003adc:	e051      	b.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d123      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e046      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d021      	beq.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fd3d 	bl	80025bc <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e020      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10c      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e00b      	b.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d18d      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd8:	e02d      	b.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f878 	bl	8003cd0 <I2C_IsAcknowledgeFailed>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e02d      	b.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d021      	beq.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fce3 	bl	80025bc <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e007      	b.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d1ca      	bne.n	8003bda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c5a:	e02d      	b.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f837 	bl	8003cd0 <I2C_IsAcknowledgeFailed>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e02d      	b.n	8003cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d021      	beq.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7fe fca2 	bl	80025bc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d116      	bne.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d1ca      	bne.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	d11b      	bne.n	8003d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e272      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4c:	4b92      	ldr	r3, [pc, #584]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d00c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d58:	4b8f      	ldr	r3, [pc, #572]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d112      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5e>
 8003d64:	4b8c      	ldr	r3, [pc, #560]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	4b89      	ldr	r3, [pc, #548]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x12c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d168      	bne.n	8003e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e24c      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x76>
 8003d94:	4b80      	ldr	r3, [pc, #512]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a7f      	ldr	r2, [pc, #508]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e02e      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7a      	ldr	r2, [pc, #488]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b78      	ldr	r3, [pc, #480]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a77      	ldr	r2, [pc, #476]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xbc>
 8003dce:	4b72      	ldr	r3, [pc, #456]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a71      	ldr	r2, [pc, #452]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b6f      	ldr	r3, [pc, #444]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6a      	ldr	r2, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fe fbd8 	bl	80025bc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe fbd4 	bl	80025bc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e200      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b5d      	ldr	r3, [pc, #372]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xe4>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fe fbc4 	bl	80025bc <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe fbc0 	bl	80025bc <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e1ec      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x10c>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d063      	beq.n	8003f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	4b4c      	ldr	r3, [pc, #304]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x18c>
 8003e7e:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x176>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1c0      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4939      	ldr	r1, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e03a      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fb79 	bl	80025bc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fe fb75 	bl	80025bc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1a1      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4927      	ldr	r1, [pc, #156]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fb58 	bl	80025bc <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fe fb54 	bl	80025bc <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e180      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03a      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <HAL_RCC_OscConfig+0x274>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f48:	f7fe fb38 	bl	80025bc <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fe fb34 	bl	80025bc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e160      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f000 fad8 	bl	8004524 <RCC_Delay>
 8003f74:	e01c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_OscConfig+0x274>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe fb1e 	bl	80025bc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f82:	e00f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe fb1a 	bl	80025bc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d908      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e146      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	42420000 	.word	0x42420000
 8003fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa4:	4b92      	ldr	r3, [pc, #584]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e9      	bne.n	8003f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a6 	beq.w	800410a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	4a87      	ldr	r2, [pc, #540]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	61d3      	str	r3, [r2, #28]
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a7e      	ldr	r2, [pc, #504]	; (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fe fadb 	bl	80025bc <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe fad7 	bl	80025bc <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	; 0x64
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e103      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4b75      	ldr	r3, [pc, #468]	; (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x312>
 8004030:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a6e      	ldr	r2, [pc, #440]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e02d      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x334>
 8004046:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4a69      	ldr	r2, [pc, #420]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6213      	str	r3, [r2, #32]
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a66      	ldr	r2, [pc, #408]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6213      	str	r3, [r2, #32]
 800405e:	e01c      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d10c      	bne.n	8004082 <HAL_RCC_OscConfig+0x356>
 8004068:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a60      	ldr	r2, [pc, #384]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	4b5e      	ldr	r3, [pc, #376]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e00b      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 8004082:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4a5a      	ldr	r2, [pc, #360]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6213      	str	r3, [r2, #32]
 800408e:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4a57      	ldr	r2, [pc, #348]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fa8b 	bl	80025bc <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe fa87 	bl	80025bc <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0b1      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RCC_OscConfig+0x37e>
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fe fa75 	bl	80025bc <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fe fa71 	bl	80025bc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e09b      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	4b40      	ldr	r3, [pc, #256]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8087 	beq.w	8004222 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004114:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d061      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d146      	bne.n	80041b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fe fa45 	bl	80025bc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fe fa41 	bl	80025bc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e06d      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004148:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d108      	bne.n	8004170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4921      	ldr	r1, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004170:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a19      	ldr	r1, [r3, #32]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	430b      	orrs	r3, r1
 8004182:	491b      	ldr	r1, [pc, #108]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fe fa15 	bl	80025bc <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fe fa11 	bl	80025bc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x46a>
 80041b4:	e035      	b.n	8004222 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe f9fe 	bl	80025bc <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe f9fa 	bl	80025bc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e026      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x498>
 80041e2:	e01e      	b.n	8004222 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e019      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_OscConfig+0x500>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0d0      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d910      	bls.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4965      	ldr	r1, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d040      	beq.n	8004350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d115      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e073      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06b      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4936      	ldr	r1, [pc, #216]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fe f94c 	bl	80025bc <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fe f948 	bl	80025bc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e053      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d210      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4922      	ldr	r1, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1cc>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f8aa 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08007500 	.word	0x08007500
 80043fc:	20000000 	.word	0x20000000
 8004400:	20000004 	.word	0x20000004

08004404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	b490      	push	{r4, r7}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800440c:	1d3c      	adds	r4, r7, #4
 800440e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004414:	f240 2301 	movw	r3, #513	; 0x201
 8004418:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800442e:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x40>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x46>
 8004442:	e02b      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004446:	623b      	str	r3, [r7, #32]
      break;
 8004448:	e02b      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	0c9b      	lsrs	r3, r3, #18
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	3328      	adds	r3, #40	; 0x28
 8004454:	443b      	add	r3, r7
 8004456:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800445a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0c5b      	lsrs	r3, r3, #17
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	3328      	adds	r3, #40	; 0x28
 8004472:	443b      	add	r3, r7
 8004474:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004478:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800447e:	fb03 f202 	mul.w	r2, r3, r2
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e004      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	623b      	str	r3, [r7, #32]
      break;
 800449a:	e002      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800449e:	623b      	str	r3, [r7, #32]
      break;
 80044a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a2:	6a3b      	ldr	r3, [r7, #32]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc90      	pop	{r4, r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	080072e0 	.word	0x080072e0
 80044b4:	40021000 	.word	0x40021000
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	003d0900 	.word	0x003d0900

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	20000000 	.word	0x20000000

080044d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d8:	f7ff fff2 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4903      	ldr	r1, [pc, #12]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08007510 	.word	0x08007510

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004500:	f7ff ffde 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	08007510 	.word	0x08007510

08004524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <RCC_Delay+0x34>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <RCC_Delay+0x38>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0a5b      	lsrs	r3, r3, #9
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004540:	bf00      	nop
  }
  while (Delay --);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	60fa      	str	r2, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f9      	bne.n	8004540 <RCC_Delay+0x1c>
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	20000000 	.word	0x20000000
 800455c:	10624dd3 	.word	0x10624dd3

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07d      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004580:	4b4f      	ldr	r3, [pc, #316]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	4a4b      	ldr	r2, [pc, #300]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	61d3      	str	r3, [r2, #28]
 8004598:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d118      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b4:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a42      	ldr	r2, [pc, #264]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c0:	f7fd fffc 	bl	80025bc <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	e008      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7fd fff8 	bl	80025bc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e06d      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045da:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	429a      	cmp	r2, r3
 8004602:	d027      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800460e:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004614:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800461a:	4a29      	ldr	r2, [pc, #164]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7fd ffc7 	bl	80025bc <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fd ffc3 	bl	80025bc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e036      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ee      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4917      	ldr	r1, [pc, #92]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	4313      	orrs	r3, r2
 8004664:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004676:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004684:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	490b      	ldr	r1, [pc, #44]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4904      	ldr	r1, [pc, #16]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42420440 	.word	0x42420440

080046cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b08d      	sub	sp, #52	; 0x34
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80046d6:	f107 040c 	add.w	r4, r7, #12
 80046da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80046e0:	f240 2301 	movw	r3, #513	; 0x201
 80046e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	2300      	movs	r3, #0
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	2300      	movs	r3, #0
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b10      	cmp	r3, #16
 8004704:	f200 808e 	bhi.w	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d049      	beq.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d079      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004714:	e086      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004716:	4b49      	ldr	r3, [pc, #292]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d07f      	beq.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	0c9b      	lsrs	r3, r3, #18
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	3330      	adds	r3, #48	; 0x30
 8004732:	443b      	add	r3, r7
 8004734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004738:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d017      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c5b      	lsrs	r3, r3, #17
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	3330      	adds	r3, #48	; 0x30
 8004750:	443b      	add	r3, r7
 8004752:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	fbb2 f2f3 	udiv	r2, r2, r3
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	e004      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	d102      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004790:	e04a      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80047a0:	e042      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80047a2:	4b26      	ldr	r3, [pc, #152]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b2:	d108      	bne.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c4:	e01f      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d109      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80047de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	e00f      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f0:	d11c      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80047fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004804:	e012      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004806:	e011      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004808:	f7ff fe78 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	0b9b      	lsrs	r3, r3, #14
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	3301      	adds	r3, #1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004822:	e004      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004824:	bf00      	nop
 8004826:	e002      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800482c:	bf00      	nop
    }
  }
  return (frequency);
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004830:	4618      	mov	r0, r3
 8004832:	3734      	adds	r7, #52	; 0x34
 8004834:	46bd      	mov	sp, r7
 8004836:	bd90      	pop	{r4, r7, pc}
 8004838:	080072f0 	.word	0x080072f0
 800483c:	40021000 	.word	0x40021000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	003d0900 	.word	0x003d0900
 8004848:	aaaaaaab 	.word	0xaaaaaaab

0800484c <__errno>:
 800484c:	4b01      	ldr	r3, [pc, #4]	; (8004854 <__errno+0x8>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000000c 	.word	0x2000000c

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	2600      	movs	r6, #0
 800485c:	4d0c      	ldr	r5, [pc, #48]	; (8004890 <__libc_init_array+0x38>)
 800485e:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	f002 fd2c 	bl	80072c4 <_init>
 800486c:	2600      	movs	r6, #0
 800486e:	4d0a      	ldr	r5, [pc, #40]	; (8004898 <__libc_init_array+0x40>)
 8004870:	4c0a      	ldr	r4, [pc, #40]	; (800489c <__libc_init_array+0x44>)
 8004872:	1b64      	subs	r4, r4, r5
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f855 3b04 	ldr.w	r3, [r5], #4
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	080078f4 	.word	0x080078f4
 8004894:	080078f4 	.word	0x080078f4
 8004898:	080078f4 	.word	0x080078f4
 800489c:	080078f8 	.word	0x080078f8

080048a0 <malloc>:
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <malloc+0xc>)
 80048a2:	4601      	mov	r1, r0
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	f000 b873 	b.w	8004990 <_malloc_r>
 80048aa:	bf00      	nop
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <memset>:
 80048b0:	4603      	mov	r3, r0
 80048b2:	4402      	add	r2, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <_free_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4605      	mov	r5, r0
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d040      	beq.n	800494a <_free_r+0x8a>
 80048c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048cc:	1f0c      	subs	r4, r1, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfb8      	it	lt
 80048d2:	18e4      	addlt	r4, r4, r3
 80048d4:	f001 fbda 	bl	800608c <__malloc_lock>
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <_free_r+0x8c>)
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	b933      	cbnz	r3, 80048ec <_free_r+0x2c>
 80048de:	6063      	str	r3, [r4, #4]
 80048e0:	6014      	str	r4, [r2, #0]
 80048e2:	4628      	mov	r0, r5
 80048e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e8:	f001 bbd6 	b.w	8006098 <__malloc_unlock>
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	d908      	bls.n	8004902 <_free_r+0x42>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	1821      	adds	r1, r4, r0
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf01      	itttt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	1809      	addeq	r1, r1, r0
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	e7ed      	b.n	80048de <_free_r+0x1e>
 8004902:	461a      	mov	r2, r3
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b10b      	cbz	r3, 800490c <_free_r+0x4c>
 8004908:	42a3      	cmp	r3, r4
 800490a:	d9fa      	bls.n	8004902 <_free_r+0x42>
 800490c:	6811      	ldr	r1, [r2, #0]
 800490e:	1850      	adds	r0, r2, r1
 8004910:	42a0      	cmp	r0, r4
 8004912:	d10b      	bne.n	800492c <_free_r+0x6c>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	4401      	add	r1, r0
 8004918:	1850      	adds	r0, r2, r1
 800491a:	4283      	cmp	r3, r0
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	d1e0      	bne.n	80048e2 <_free_r+0x22>
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4401      	add	r1, r0
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	6053      	str	r3, [r2, #4]
 800492a:	e7da      	b.n	80048e2 <_free_r+0x22>
 800492c:	d902      	bls.n	8004934 <_free_r+0x74>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d6      	b.n	80048e2 <_free_r+0x22>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428b      	cmp	r3, r1
 800493a:	bf01      	itttt	eq
 800493c:	6819      	ldreq	r1, [r3, #0]
 800493e:	685b      	ldreq	r3, [r3, #4]
 8004940:	1809      	addeq	r1, r1, r0
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6054      	str	r4, [r2, #4]
 8004948:	e7cb      	b.n	80048e2 <_free_r+0x22>
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000284 	.word	0x20000284

08004950 <sbrk_aligned>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4e0e      	ldr	r6, [pc, #56]	; (800498c <sbrk_aligned+0x3c>)
 8004954:	460c      	mov	r4, r1
 8004956:	6831      	ldr	r1, [r6, #0]
 8004958:	4605      	mov	r5, r0
 800495a:	b911      	cbnz	r1, 8004962 <sbrk_aligned+0x12>
 800495c:	f000 fcec 	bl	8005338 <_sbrk_r>
 8004960:	6030      	str	r0, [r6, #0]
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 fce7 	bl	8005338 <_sbrk_r>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	d00a      	beq.n	8004984 <sbrk_aligned+0x34>
 800496e:	1cc4      	adds	r4, r0, #3
 8004970:	f024 0403 	bic.w	r4, r4, #3
 8004974:	42a0      	cmp	r0, r4
 8004976:	d007      	beq.n	8004988 <sbrk_aligned+0x38>
 8004978:	1a21      	subs	r1, r4, r0
 800497a:	4628      	mov	r0, r5
 800497c:	f000 fcdc 	bl	8005338 <_sbrk_r>
 8004980:	3001      	adds	r0, #1
 8004982:	d101      	bne.n	8004988 <sbrk_aligned+0x38>
 8004984:	f04f 34ff 	mov.w	r4, #4294967295
 8004988:	4620      	mov	r0, r4
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	20000288 	.word	0x20000288

08004990 <_malloc_r>:
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	1ccd      	adds	r5, r1, #3
 8004996:	f025 0503 	bic.w	r5, r5, #3
 800499a:	3508      	adds	r5, #8
 800499c:	2d0c      	cmp	r5, #12
 800499e:	bf38      	it	cc
 80049a0:	250c      	movcc	r5, #12
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	4607      	mov	r7, r0
 80049a6:	db01      	blt.n	80049ac <_malloc_r+0x1c>
 80049a8:	42a9      	cmp	r1, r5
 80049aa:	d905      	bls.n	80049b8 <_malloc_r+0x28>
 80049ac:	230c      	movs	r3, #12
 80049ae:	2600      	movs	r6, #0
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4630      	mov	r0, r6
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	4e2e      	ldr	r6, [pc, #184]	; (8004a74 <_malloc_r+0xe4>)
 80049ba:	f001 fb67 	bl	800608c <__malloc_lock>
 80049be:	6833      	ldr	r3, [r6, #0]
 80049c0:	461c      	mov	r4, r3
 80049c2:	bb34      	cbnz	r4, 8004a12 <_malloc_r+0x82>
 80049c4:	4629      	mov	r1, r5
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ffc2 	bl	8004950 <sbrk_aligned>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	4604      	mov	r4, r0
 80049d0:	d14d      	bne.n	8004a6e <_malloc_r+0xde>
 80049d2:	6834      	ldr	r4, [r6, #0]
 80049d4:	4626      	mov	r6, r4
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	d140      	bne.n	8004a5c <_malloc_r+0xcc>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4631      	mov	r1, r6
 80049de:	4638      	mov	r0, r7
 80049e0:	eb04 0803 	add.w	r8, r4, r3
 80049e4:	f000 fca8 	bl	8005338 <_sbrk_r>
 80049e8:	4580      	cmp	r8, r0
 80049ea:	d13a      	bne.n	8004a62 <_malloc_r+0xd2>
 80049ec:	6821      	ldr	r1, [r4, #0]
 80049ee:	3503      	adds	r5, #3
 80049f0:	1a6d      	subs	r5, r5, r1
 80049f2:	f025 0503 	bic.w	r5, r5, #3
 80049f6:	3508      	adds	r5, #8
 80049f8:	2d0c      	cmp	r5, #12
 80049fa:	bf38      	it	cc
 80049fc:	250c      	movcc	r5, #12
 80049fe:	4638      	mov	r0, r7
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7ff ffa5 	bl	8004950 <sbrk_aligned>
 8004a06:	3001      	adds	r0, #1
 8004a08:	d02b      	beq.n	8004a62 <_malloc_r+0xd2>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	442b      	add	r3, r5
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	e00e      	b.n	8004a30 <_malloc_r+0xa0>
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	1b52      	subs	r2, r2, r5
 8004a16:	d41e      	bmi.n	8004a56 <_malloc_r+0xc6>
 8004a18:	2a0b      	cmp	r2, #11
 8004a1a:	d916      	bls.n	8004a4a <_malloc_r+0xba>
 8004a1c:	1961      	adds	r1, r4, r5
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	6025      	str	r5, [r4, #0]
 8004a22:	bf18      	it	ne
 8004a24:	6059      	strne	r1, [r3, #4]
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	bf08      	it	eq
 8004a2a:	6031      	streq	r1, [r6, #0]
 8004a2c:	5162      	str	r2, [r4, r5]
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	4638      	mov	r0, r7
 8004a32:	f104 060b 	add.w	r6, r4, #11
 8004a36:	f001 fb2f 	bl	8006098 <__malloc_unlock>
 8004a3a:	f026 0607 	bic.w	r6, r6, #7
 8004a3e:	1d23      	adds	r3, r4, #4
 8004a40:	1af2      	subs	r2, r6, r3
 8004a42:	d0b6      	beq.n	80049b2 <_malloc_r+0x22>
 8004a44:	1b9b      	subs	r3, r3, r6
 8004a46:	50a3      	str	r3, [r4, r2]
 8004a48:	e7b3      	b.n	80049b2 <_malloc_r+0x22>
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	bf0c      	ite	eq
 8004a50:	6032      	streq	r2, [r6, #0]
 8004a52:	605a      	strne	r2, [r3, #4]
 8004a54:	e7ec      	b.n	8004a30 <_malloc_r+0xa0>
 8004a56:	4623      	mov	r3, r4
 8004a58:	6864      	ldr	r4, [r4, #4]
 8004a5a:	e7b2      	b.n	80049c2 <_malloc_r+0x32>
 8004a5c:	4634      	mov	r4, r6
 8004a5e:	6876      	ldr	r6, [r6, #4]
 8004a60:	e7b9      	b.n	80049d6 <_malloc_r+0x46>
 8004a62:	230c      	movs	r3, #12
 8004a64:	4638      	mov	r0, r7
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	f001 fb16 	bl	8006098 <__malloc_unlock>
 8004a6c:	e7a1      	b.n	80049b2 <_malloc_r+0x22>
 8004a6e:	6025      	str	r5, [r4, #0]
 8004a70:	e7de      	b.n	8004a30 <_malloc_r+0xa0>
 8004a72:	bf00      	nop
 8004a74:	20000284 	.word	0x20000284

08004a78 <__cvt>:
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7e:	461f      	mov	r7, r3
 8004a80:	bfbb      	ittet	lt
 8004a82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	461f      	movlt	r7, r3
 8004a88:	2300      	movge	r3, #0
 8004a8a:	232d      	movlt	r3, #45	; 0x2d
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	4614      	mov	r4, r2
 8004a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a94:	7013      	strb	r3, [r2, #0]
 8004a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a9c:	f023 0820 	bic.w	r8, r3, #32
 8004aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aa4:	d005      	beq.n	8004ab2 <__cvt+0x3a>
 8004aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004aaa:	d100      	bne.n	8004aae <__cvt+0x36>
 8004aac:	3501      	adds	r5, #1
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e000      	b.n	8004ab4 <__cvt+0x3c>
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	aa07      	add	r2, sp, #28
 8004ab6:	9204      	str	r2, [sp, #16]
 8004ab8:	aa06      	add	r2, sp, #24
 8004aba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004abe:	e9cd 3500 	strd	r3, r5, [sp]
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	f000 fcd3 	bl	8005470 <_dtoa_r>
 8004aca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ace:	4606      	mov	r6, r0
 8004ad0:	d102      	bne.n	8004ad8 <__cvt+0x60>
 8004ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ad4:	07db      	lsls	r3, r3, #31
 8004ad6:	d522      	bpl.n	8004b1e <__cvt+0xa6>
 8004ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004adc:	eb06 0905 	add.w	r9, r6, r5
 8004ae0:	d110      	bne.n	8004b04 <__cvt+0x8c>
 8004ae2:	7833      	ldrb	r3, [r6, #0]
 8004ae4:	2b30      	cmp	r3, #48	; 0x30
 8004ae6:	d10a      	bne.n	8004afe <__cvt+0x86>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2300      	movs	r3, #0
 8004aec:	4620      	mov	r0, r4
 8004aee:	4639      	mov	r1, r7
 8004af0:	f7fb ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8004af4:	b918      	cbnz	r0, 8004afe <__cvt+0x86>
 8004af6:	f1c5 0501 	rsb	r5, r5, #1
 8004afa:	f8ca 5000 	str.w	r5, [sl]
 8004afe:	f8da 3000 	ldr.w	r3, [sl]
 8004b02:	4499      	add	r9, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	2300      	movs	r3, #0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	f7fb ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8004b10:	b108      	cbz	r0, 8004b16 <__cvt+0x9e>
 8004b12:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b16:	2230      	movs	r2, #48	; 0x30
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	454b      	cmp	r3, r9
 8004b1c:	d307      	bcc.n	8004b2e <__cvt+0xb6>
 8004b1e:	4630      	mov	r0, r6
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b24:	1b9b      	subs	r3, r3, r6
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	b008      	add	sp, #32
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	9107      	str	r1, [sp, #28]
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e7f0      	b.n	8004b18 <__cvt+0xa0>

08004b36 <__exponent>:
 8004b36:	4603      	mov	r3, r0
 8004b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3a:	2900      	cmp	r1, #0
 8004b3c:	f803 2b02 	strb.w	r2, [r3], #2
 8004b40:	bfb6      	itet	lt
 8004b42:	222d      	movlt	r2, #45	; 0x2d
 8004b44:	222b      	movge	r2, #43	; 0x2b
 8004b46:	4249      	neglt	r1, r1
 8004b48:	2909      	cmp	r1, #9
 8004b4a:	7042      	strb	r2, [r0, #1]
 8004b4c:	dd2b      	ble.n	8004ba6 <__exponent+0x70>
 8004b4e:	f10d 0407 	add.w	r4, sp, #7
 8004b52:	46a4      	mov	ip, r4
 8004b54:	270a      	movs	r7, #10
 8004b56:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	46a6      	mov	lr, r4
 8004b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8004b62:	2a63      	cmp	r2, #99	; 0x63
 8004b64:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b68:	4631      	mov	r1, r6
 8004b6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b72:	dcf0      	bgt.n	8004b56 <__exponent+0x20>
 8004b74:	3130      	adds	r1, #48	; 0x30
 8004b76:	f1ae 0502 	sub.w	r5, lr, #2
 8004b7a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b7e:	4629      	mov	r1, r5
 8004b80:	1c44      	adds	r4, r0, #1
 8004b82:	4561      	cmp	r1, ip
 8004b84:	d30a      	bcc.n	8004b9c <__exponent+0x66>
 8004b86:	f10d 0209 	add.w	r2, sp, #9
 8004b8a:	eba2 020e 	sub.w	r2, r2, lr
 8004b8e:	4565      	cmp	r5, ip
 8004b90:	bf88      	it	hi
 8004b92:	2200      	movhi	r2, #0
 8004b94:	4413      	add	r3, r2
 8004b96:	1a18      	subs	r0, r3, r0
 8004b98:	b003      	add	sp, #12
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ba4:	e7ed      	b.n	8004b82 <__exponent+0x4c>
 8004ba6:	2330      	movs	r3, #48	; 0x30
 8004ba8:	3130      	adds	r1, #48	; 0x30
 8004baa:	7083      	strb	r3, [r0, #2]
 8004bac:	70c1      	strb	r1, [r0, #3]
 8004bae:	1d03      	adds	r3, r0, #4
 8004bb0:	e7f1      	b.n	8004b96 <__exponent+0x60>
	...

08004bb4 <_printf_float>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	b091      	sub	sp, #68	; 0x44
 8004bba:	460c      	mov	r4, r1
 8004bbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	f001 fa41 	bl	800604c <_localeconv_r>
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	f7fb fabe 	bl	8000150 <strlen>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	930e      	str	r3, [sp, #56]	; 0x38
 8004bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bdc:	900a      	str	r0, [sp, #40]	; 0x28
 8004bde:	3307      	adds	r3, #7
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	f103 0208 	add.w	r2, r3, #8
 8004be8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bec:	f8d4 b000 	ldr.w	fp, [r4]
 8004bf0:	f8c8 2000 	str.w	r2, [r8]
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bfc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004c00:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4b9c      	ldr	r3, [pc, #624]	; (8004e80 <_printf_float+0x2cc>)
 8004c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c10:	f7fb fefc 	bl	8000a0c <__aeabi_dcmpun>
 8004c14:	bb70      	cbnz	r0, 8004c74 <_printf_float+0xc0>
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4b98      	ldr	r3, [pc, #608]	; (8004e80 <_printf_float+0x2cc>)
 8004c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c20:	f7fb fed6 	bl	80009d0 <__aeabi_dcmple>
 8004c24:	bb30      	cbnz	r0, 8004c74 <_printf_float+0xc0>
 8004c26:	2200      	movs	r2, #0
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	f7fb fec5 	bl	80009bc <__aeabi_dcmplt>
 8004c32:	b110      	cbz	r0, 8004c3a <_printf_float+0x86>
 8004c34:	232d      	movs	r3, #45	; 0x2d
 8004c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3a:	4b92      	ldr	r3, [pc, #584]	; (8004e84 <_printf_float+0x2d0>)
 8004c3c:	4892      	ldr	r0, [pc, #584]	; (8004e88 <_printf_float+0x2d4>)
 8004c3e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c42:	bf94      	ite	ls
 8004c44:	4698      	movls	r8, r3
 8004c46:	4680      	movhi	r8, r0
 8004c48:	2303      	movs	r3, #3
 8004c4a:	f04f 0a00 	mov.w	sl, #0
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	f02b 0304 	bic.w	r3, fp, #4
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	4633      	mov	r3, r6
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	9700      	str	r7, [sp, #0]
 8004c5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c60:	f000 f9d4 	bl	800500c <_printf_common>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f040 8090 	bne.w	8004d8a <_printf_float+0x1d6>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	b011      	add	sp, #68	; 0x44
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	4642      	mov	r2, r8
 8004c76:	4653      	mov	r3, sl
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	f7fb fec6 	bl	8000a0c <__aeabi_dcmpun>
 8004c80:	b148      	cbz	r0, 8004c96 <_printf_float+0xe2>
 8004c82:	f1ba 0f00 	cmp.w	sl, #0
 8004c86:	bfb8      	it	lt
 8004c88:	232d      	movlt	r3, #45	; 0x2d
 8004c8a:	4880      	ldr	r0, [pc, #512]	; (8004e8c <_printf_float+0x2d8>)
 8004c8c:	bfb8      	it	lt
 8004c8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c92:	4b7f      	ldr	r3, [pc, #508]	; (8004e90 <_printf_float+0x2dc>)
 8004c94:	e7d3      	b.n	8004c3e <_printf_float+0x8a>
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	d142      	bne.n	8004d26 <_printf_float+0x172>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	9206      	str	r2, [sp, #24]
 8004ca8:	aa0e      	add	r2, sp, #56	; 0x38
 8004caa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004cae:	aa0d      	add	r2, sp, #52	; 0x34
 8004cb0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004cb4:	9203      	str	r2, [sp, #12]
 8004cb6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004cba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	4653      	mov	r3, sl
 8004cca:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ccc:	f7ff fed4 	bl	8004a78 <__cvt>
 8004cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	2947      	cmp	r1, #71	; 0x47
 8004cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cd8:	d108      	bne.n	8004cec <_printf_float+0x138>
 8004cda:	1cc8      	adds	r0, r1, #3
 8004cdc:	db02      	blt.n	8004ce4 <_printf_float+0x130>
 8004cde:	6863      	ldr	r3, [r4, #4]
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	dd40      	ble.n	8004d66 <_printf_float+0x1b2>
 8004ce4:	f1a9 0902 	sub.w	r9, r9, #2
 8004ce8:	fa5f f989 	uxtb.w	r9, r9
 8004cec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cf0:	d81f      	bhi.n	8004d32 <_printf_float+0x17e>
 8004cf2:	464a      	mov	r2, r9
 8004cf4:	3901      	subs	r1, #1
 8004cf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cfa:	910d      	str	r1, [sp, #52]	; 0x34
 8004cfc:	f7ff ff1b 	bl	8004b36 <__exponent>
 8004d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d02:	4682      	mov	sl, r0
 8004d04:	1813      	adds	r3, r2, r0
 8004d06:	2a01      	cmp	r2, #1
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	dc02      	bgt.n	8004d12 <_printf_float+0x15e>
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	07d2      	lsls	r2, r2, #31
 8004d10:	d501      	bpl.n	8004d16 <_printf_float+0x162>
 8004d12:	3301      	adds	r3, #1
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d09b      	beq.n	8004c56 <_printf_float+0xa2>
 8004d1e:	232d      	movs	r3, #45	; 0x2d
 8004d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d24:	e797      	b.n	8004c56 <_printf_float+0xa2>
 8004d26:	2947      	cmp	r1, #71	; 0x47
 8004d28:	d1bc      	bne.n	8004ca4 <_printf_float+0xf0>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ba      	bne.n	8004ca4 <_printf_float+0xf0>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7b7      	b.n	8004ca2 <_printf_float+0xee>
 8004d32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d36:	d118      	bne.n	8004d6a <_printf_float+0x1b6>
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	dd0b      	ble.n	8004d56 <_printf_float+0x1a2>
 8004d3e:	6121      	str	r1, [r4, #16]
 8004d40:	b913      	cbnz	r3, 8004d48 <_printf_float+0x194>
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	07d0      	lsls	r0, r2, #31
 8004d46:	d502      	bpl.n	8004d4e <_printf_float+0x19a>
 8004d48:	3301      	adds	r3, #1
 8004d4a:	440b      	add	r3, r1
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	f04f 0a00 	mov.w	sl, #0
 8004d52:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d54:	e7df      	b.n	8004d16 <_printf_float+0x162>
 8004d56:	b913      	cbnz	r3, 8004d5e <_printf_float+0x1aa>
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	07d2      	lsls	r2, r2, #31
 8004d5c:	d501      	bpl.n	8004d62 <_printf_float+0x1ae>
 8004d5e:	3302      	adds	r3, #2
 8004d60:	e7f4      	b.n	8004d4c <_printf_float+0x198>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e7f2      	b.n	8004d4c <_printf_float+0x198>
 8004d66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d6c:	4299      	cmp	r1, r3
 8004d6e:	db05      	blt.n	8004d7c <_printf_float+0x1c8>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	6121      	str	r1, [r4, #16]
 8004d74:	07d8      	lsls	r0, r3, #31
 8004d76:	d5ea      	bpl.n	8004d4e <_printf_float+0x19a>
 8004d78:	1c4b      	adds	r3, r1, #1
 8004d7a:	e7e7      	b.n	8004d4c <_printf_float+0x198>
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	bfcc      	ite	gt
 8004d80:	2201      	movgt	r2, #1
 8004d82:	f1c1 0202 	rsble	r2, r1, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	e7e0      	b.n	8004d4c <_printf_float+0x198>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	055a      	lsls	r2, r3, #21
 8004d8e:	d407      	bmi.n	8004da0 <_printf_float+0x1ec>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	4642      	mov	r2, r8
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d12b      	bne.n	8004df6 <_printf_float+0x242>
 8004d9e:	e764      	b.n	8004c6a <_printf_float+0xb6>
 8004da0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004da4:	f240 80dd 	bls.w	8004f62 <_printf_float+0x3ae>
 8004da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	f7fb fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d033      	beq.n	8004e20 <_printf_float+0x26c>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <_printf_float+0x2e0>)
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f af51 	beq.w	8004c6a <_printf_float+0xb6>
 8004dc8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	db02      	blt.n	8004dd6 <_printf_float+0x222>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07d8      	lsls	r0, r3, #31
 8004dd4:	d50f      	bpl.n	8004df6 <_printf_float+0x242>
 8004dd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f af42 	beq.w	8004c6a <_printf_float+0xb6>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	f104 091a 	add.w	r9, r4, #26
 8004dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4543      	cmp	r3, r8
 8004df4:	dc09      	bgt.n	8004e0a <_printf_float+0x256>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	079b      	lsls	r3, r3, #30
 8004dfa:	f100 8102 	bmi.w	8005002 <_printf_float+0x44e>
 8004dfe:	68e0      	ldr	r0, [r4, #12]
 8004e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e02:	4298      	cmp	r0, r3
 8004e04:	bfb8      	it	lt
 8004e06:	4618      	movlt	r0, r3
 8004e08:	e731      	b.n	8004c6e <_printf_float+0xba>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	464a      	mov	r2, r9
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f af28 	beq.w	8004c6a <_printf_float+0xb6>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	e7e6      	b.n	8004dee <_printf_float+0x23a>
 8004e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dc38      	bgt.n	8004e98 <_printf_float+0x2e4>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <_printf_float+0x2e0>)
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f af1a 	beq.w	8004c6a <_printf_float+0xb6>
 8004e36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d102      	bne.n	8004e44 <_printf_float+0x290>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	07d9      	lsls	r1, r3, #31
 8004e42:	d5d8      	bpl.n	8004df6 <_printf_float+0x242>
 8004e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f af0b 	beq.w	8004c6a <_printf_float+0xb6>
 8004e54:	f04f 0900 	mov.w	r9, #0
 8004e58:	f104 0a1a 	add.w	sl, r4, #26
 8004e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e5e:	425b      	negs	r3, r3
 8004e60:	454b      	cmp	r3, r9
 8004e62:	dc01      	bgt.n	8004e68 <_printf_float+0x2b4>
 8004e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e66:	e794      	b.n	8004d92 <_printf_float+0x1de>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f aef9 	beq.w	8004c6a <_printf_float+0xb6>
 8004e78:	f109 0901 	add.w	r9, r9, #1
 8004e7c:	e7ee      	b.n	8004e5c <_printf_float+0x2a8>
 8004e7e:	bf00      	nop
 8004e80:	7fefffff 	.word	0x7fefffff
 8004e84:	0800751c 	.word	0x0800751c
 8004e88:	08007520 	.word	0x08007520
 8004e8c:	08007528 	.word	0x08007528
 8004e90:	08007524 	.word	0x08007524
 8004e94:	0800752c 	.word	0x0800752c
 8004e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	bfa8      	it	ge
 8004ea0:	461a      	movge	r2, r3
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	4691      	mov	r9, r2
 8004ea6:	dc37      	bgt.n	8004f18 <_printf_float+0x364>
 8004ea8:	f04f 0b00 	mov.w	fp, #0
 8004eac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eb0:	f104 021a 	add.w	r2, r4, #26
 8004eb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004eb8:	ebaa 0309 	sub.w	r3, sl, r9
 8004ebc:	455b      	cmp	r3, fp
 8004ebe:	dc33      	bgt.n	8004f28 <_printf_float+0x374>
 8004ec0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	db3b      	blt.n	8004f40 <_printf_float+0x38c>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	07da      	lsls	r2, r3, #31
 8004ecc:	d438      	bmi.n	8004f40 <_printf_float+0x38c>
 8004ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ed2:	eba3 020a 	sub.w	r2, r3, sl
 8004ed6:	eba3 0901 	sub.w	r9, r3, r1
 8004eda:	4591      	cmp	r9, r2
 8004edc:	bfa8      	it	ge
 8004ede:	4691      	movge	r9, r2
 8004ee0:	f1b9 0f00 	cmp.w	r9, #0
 8004ee4:	dc34      	bgt.n	8004f50 <_printf_float+0x39c>
 8004ee6:	f04f 0800 	mov.w	r8, #0
 8004eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eee:	f104 0a1a 	add.w	sl, r4, #26
 8004ef2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	eba3 0309 	sub.w	r3, r3, r9
 8004efc:	4543      	cmp	r3, r8
 8004efe:	f77f af7a 	ble.w	8004df6 <_printf_float+0x242>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4652      	mov	r2, sl
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f aeac 	beq.w	8004c6a <_printf_float+0xb6>
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	e7ec      	b.n	8004ef2 <_printf_float+0x33e>
 8004f18:	4613      	mov	r3, r2
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	d1c0      	bne.n	8004ea8 <_printf_float+0x2f4>
 8004f26:	e6a0      	b.n	8004c6a <_printf_float+0xb6>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f ae99 	beq.w	8004c6a <_printf_float+0xb6>
 8004f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f3a:	f10b 0b01 	add.w	fp, fp, #1
 8004f3e:	e7b9      	b.n	8004eb4 <_printf_float+0x300>
 8004f40:	4631      	mov	r1, r6
 8004f42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1bf      	bne.n	8004ece <_printf_float+0x31a>
 8004f4e:	e68c      	b.n	8004c6a <_printf_float+0xb6>
 8004f50:	464b      	mov	r3, r9
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	eb08 020a 	add.w	r2, r8, sl
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d1c2      	bne.n	8004ee6 <_printf_float+0x332>
 8004f60:	e683      	b.n	8004c6a <_printf_float+0xb6>
 8004f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f64:	2a01      	cmp	r2, #1
 8004f66:	dc01      	bgt.n	8004f6c <_printf_float+0x3b8>
 8004f68:	07db      	lsls	r3, r3, #31
 8004f6a:	d537      	bpl.n	8004fdc <_printf_float+0x428>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4642      	mov	r2, r8
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f ae77 	beq.w	8004c6a <_printf_float+0xb6>
 8004f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f ae6f 	beq.w	8004c6a <_printf_float+0xb6>
 8004f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	f7fb fd08 	bl	80009a8 <__aeabi_dcmpeq>
 8004f98:	b9d8      	cbnz	r0, 8004fd2 <_printf_float+0x41e>
 8004f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f9c:	f108 0201 	add.w	r2, r8, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d10e      	bne.n	8004fca <_printf_float+0x416>
 8004fac:	e65d      	b.n	8004c6a <_printf_float+0xb6>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae56 	beq.w	8004c6a <_printf_float+0xb6>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	4543      	cmp	r3, r8
 8004fc8:	dcf1      	bgt.n	8004fae <_printf_float+0x3fa>
 8004fca:	4653      	mov	r3, sl
 8004fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd0:	e6e0      	b.n	8004d94 <_printf_float+0x1e0>
 8004fd2:	f04f 0800 	mov.w	r8, #0
 8004fd6:	f104 091a 	add.w	r9, r4, #26
 8004fda:	e7f2      	b.n	8004fc2 <_printf_float+0x40e>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4642      	mov	r2, r8
 8004fe0:	e7df      	b.n	8004fa2 <_printf_float+0x3ee>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	464a      	mov	r2, r9
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b8      	blx	r7
 8004fec:	3001      	adds	r0, #1
 8004fee:	f43f ae3c 	beq.w	8004c6a <_printf_float+0xb6>
 8004ff2:	f108 0801 	add.w	r8, r8, #1
 8004ff6:	68e3      	ldr	r3, [r4, #12]
 8004ff8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ffa:	1a5b      	subs	r3, r3, r1
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	dcf0      	bgt.n	8004fe2 <_printf_float+0x42e>
 8005000:	e6fd      	b.n	8004dfe <_printf_float+0x24a>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	f104 0919 	add.w	r9, r4, #25
 800500a:	e7f4      	b.n	8004ff6 <_printf_float+0x442>

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4699      	mov	r9, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	4607      	mov	r7, r0
 800501a:	4293      	cmp	r3, r2
 800501c:	bfb8      	it	lt
 800501e:	4613      	movlt	r3, r2
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005026:	460c      	mov	r4, r1
 8005028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc28      	bgt.n	80050a6 <_printf_common+0x9a>
 8005054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005058:	1e13      	subs	r3, r2, #0
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42d      	bmi.n	80050c0 <_printf_common+0xb4>
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d020      	beq.n	80050b4 <_printf_common+0xa8>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	68e5      	ldr	r5, [r4, #12]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf18      	it	ne
 800507e:	2500      	movne	r5, #0
 8005080:	6832      	ldr	r2, [r6, #0]
 8005082:	f04f 0600 	mov.w	r6, #0
 8005086:	68a3      	ldr	r3, [r4, #8]
 8005088:	bf08      	it	eq
 800508a:	1aad      	subeq	r5, r5, r2
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	bf08      	it	eq
 8005090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005094:	4293      	cmp	r3, r2
 8005096:	bfc4      	itt	gt
 8005098:	1a9b      	subgt	r3, r3, r2
 800509a:	18ed      	addgt	r5, r5, r3
 800509c:	341a      	adds	r4, #26
 800509e:	42b5      	cmp	r5, r6
 80050a0:	d11a      	bne.n	80050d8 <_printf_common+0xcc>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e008      	b.n	80050b8 <_printf_common+0xac>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4652      	mov	r2, sl
 80050aa:	4649      	mov	r1, r9
 80050ac:	4638      	mov	r0, r7
 80050ae:	47c0      	blx	r8
 80050b0:	3001      	adds	r0, #1
 80050b2:	d103      	bne.n	80050bc <_printf_common+0xb0>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	3501      	adds	r5, #1
 80050be:	e7c4      	b.n	800504a <_printf_common+0x3e>
 80050c0:	2030      	movs	r0, #48	; 0x30
 80050c2:	18e1      	adds	r1, r4, r3
 80050c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ce:	4422      	add	r2, r4
 80050d0:	3302      	adds	r3, #2
 80050d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d6:	e7c5      	b.n	8005064 <_printf_common+0x58>
 80050d8:	2301      	movs	r3, #1
 80050da:	4622      	mov	r2, r4
 80050dc:	4649      	mov	r1, r9
 80050de:	4638      	mov	r0, r7
 80050e0:	47c0      	blx	r8
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0e6      	beq.n	80050b4 <_printf_common+0xa8>
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7d9      	b.n	800509e <_printf_common+0x92>
	...

080050ec <_printf_i>:
 80050ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	7e0f      	ldrb	r7, [r1, #24]
 80050f2:	4691      	mov	r9, r2
 80050f4:	2f78      	cmp	r7, #120	; 0x78
 80050f6:	4680      	mov	r8, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	469a      	mov	sl, r3
 80050fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005102:	d807      	bhi.n	8005114 <_printf_i+0x28>
 8005104:	2f62      	cmp	r7, #98	; 0x62
 8005106:	d80a      	bhi.n	800511e <_printf_i+0x32>
 8005108:	2f00      	cmp	r7, #0
 800510a:	f000 80d9 	beq.w	80052c0 <_printf_i+0x1d4>
 800510e:	2f58      	cmp	r7, #88	; 0x58
 8005110:	f000 80a4 	beq.w	800525c <_printf_i+0x170>
 8005114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800511c:	e03a      	b.n	8005194 <_printf_i+0xa8>
 800511e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005122:	2b15      	cmp	r3, #21
 8005124:	d8f6      	bhi.n	8005114 <_printf_i+0x28>
 8005126:	a101      	add	r1, pc, #4	; (adr r1, 800512c <_printf_i+0x40>)
 8005128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800512c:	08005185 	.word	0x08005185
 8005130:	08005199 	.word	0x08005199
 8005134:	08005115 	.word	0x08005115
 8005138:	08005115 	.word	0x08005115
 800513c:	08005115 	.word	0x08005115
 8005140:	08005115 	.word	0x08005115
 8005144:	08005199 	.word	0x08005199
 8005148:	08005115 	.word	0x08005115
 800514c:	08005115 	.word	0x08005115
 8005150:	08005115 	.word	0x08005115
 8005154:	08005115 	.word	0x08005115
 8005158:	080052a7 	.word	0x080052a7
 800515c:	080051c9 	.word	0x080051c9
 8005160:	08005289 	.word	0x08005289
 8005164:	08005115 	.word	0x08005115
 8005168:	08005115 	.word	0x08005115
 800516c:	080052c9 	.word	0x080052c9
 8005170:	08005115 	.word	0x08005115
 8005174:	080051c9 	.word	0x080051c9
 8005178:	08005115 	.word	0x08005115
 800517c:	08005115 	.word	0x08005115
 8005180:	08005291 	.word	0x08005291
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	602a      	str	r2, [r5, #0]
 800518c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005194:	2301      	movs	r3, #1
 8005196:	e0a4      	b.n	80052e2 <_printf_i+0x1f6>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	6829      	ldr	r1, [r5, #0]
 800519c:	0606      	lsls	r6, r0, #24
 800519e:	f101 0304 	add.w	r3, r1, #4
 80051a2:	d50a      	bpl.n	80051ba <_printf_i+0xce>
 80051a4:	680e      	ldr	r6, [r1, #0]
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	da03      	bge.n	80051b4 <_printf_i+0xc8>
 80051ac:	232d      	movs	r3, #45	; 0x2d
 80051ae:	4276      	negs	r6, r6
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b4:	230a      	movs	r3, #10
 80051b6:	485e      	ldr	r0, [pc, #376]	; (8005330 <_printf_i+0x244>)
 80051b8:	e019      	b.n	80051ee <_printf_i+0x102>
 80051ba:	680e      	ldr	r6, [r1, #0]
 80051bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	bf18      	it	ne
 80051c4:	b236      	sxthne	r6, r6
 80051c6:	e7ef      	b.n	80051a8 <_printf_i+0xbc>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	6029      	str	r1, [r5, #0]
 80051d0:	0601      	lsls	r1, r0, #24
 80051d2:	d501      	bpl.n	80051d8 <_printf_i+0xec>
 80051d4:	681e      	ldr	r6, [r3, #0]
 80051d6:	e002      	b.n	80051de <_printf_i+0xf2>
 80051d8:	0646      	lsls	r6, r0, #25
 80051da:	d5fb      	bpl.n	80051d4 <_printf_i+0xe8>
 80051dc:	881e      	ldrh	r6, [r3, #0]
 80051de:	2f6f      	cmp	r7, #111	; 0x6f
 80051e0:	bf0c      	ite	eq
 80051e2:	2308      	moveq	r3, #8
 80051e4:	230a      	movne	r3, #10
 80051e6:	4852      	ldr	r0, [pc, #328]	; (8005330 <_printf_i+0x244>)
 80051e8:	2100      	movs	r1, #0
 80051ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ee:	6865      	ldr	r5, [r4, #4]
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	bfa8      	it	ge
 80051f4:	6821      	ldrge	r1, [r4, #0]
 80051f6:	60a5      	str	r5, [r4, #8]
 80051f8:	bfa4      	itt	ge
 80051fa:	f021 0104 	bicge.w	r1, r1, #4
 80051fe:	6021      	strge	r1, [r4, #0]
 8005200:	b90e      	cbnz	r6, 8005206 <_printf_i+0x11a>
 8005202:	2d00      	cmp	r5, #0
 8005204:	d04d      	beq.n	80052a2 <_printf_i+0x1b6>
 8005206:	4615      	mov	r5, r2
 8005208:	fbb6 f1f3 	udiv	r1, r6, r3
 800520c:	fb03 6711 	mls	r7, r3, r1, r6
 8005210:	5dc7      	ldrb	r7, [r0, r7]
 8005212:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005216:	4637      	mov	r7, r6
 8005218:	42bb      	cmp	r3, r7
 800521a:	460e      	mov	r6, r1
 800521c:	d9f4      	bls.n	8005208 <_printf_i+0x11c>
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10b      	bne.n	800523a <_printf_i+0x14e>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	07de      	lsls	r6, r3, #31
 8005226:	d508      	bpl.n	800523a <_printf_i+0x14e>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	6861      	ldr	r1, [r4, #4]
 800522c:	4299      	cmp	r1, r3
 800522e:	bfde      	ittt	le
 8005230:	2330      	movle	r3, #48	; 0x30
 8005232:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005236:	f105 35ff 	addle.w	r5, r5, #4294967295
 800523a:	1b52      	subs	r2, r2, r5
 800523c:	6122      	str	r2, [r4, #16]
 800523e:	464b      	mov	r3, r9
 8005240:	4621      	mov	r1, r4
 8005242:	4640      	mov	r0, r8
 8005244:	f8cd a000 	str.w	sl, [sp]
 8005248:	aa03      	add	r2, sp, #12
 800524a:	f7ff fedf 	bl	800500c <_printf_common>
 800524e:	3001      	adds	r0, #1
 8005250:	d14c      	bne.n	80052ec <_printf_i+0x200>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	b004      	add	sp, #16
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	4834      	ldr	r0, [pc, #208]	; (8005330 <_printf_i+0x244>)
 800525e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005262:	6829      	ldr	r1, [r5, #0]
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f851 6b04 	ldr.w	r6, [r1], #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	061d      	lsls	r5, r3, #24
 800526e:	d514      	bpl.n	800529a <_printf_i+0x1ae>
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	bf44      	itt	mi
 8005274:	f043 0320 	orrmi.w	r3, r3, #32
 8005278:	6023      	strmi	r3, [r4, #0]
 800527a:	b91e      	cbnz	r6, 8005284 <_printf_i+0x198>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f023 0320 	bic.w	r3, r3, #32
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	2310      	movs	r3, #16
 8005286:	e7af      	b.n	80051e8 <_printf_i+0xfc>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	2378      	movs	r3, #120	; 0x78
 8005292:	4828      	ldr	r0, [pc, #160]	; (8005334 <_printf_i+0x248>)
 8005294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005298:	e7e3      	b.n	8005262 <_printf_i+0x176>
 800529a:	0659      	lsls	r1, r3, #25
 800529c:	bf48      	it	mi
 800529e:	b2b6      	uxthmi	r6, r6
 80052a0:	e7e6      	b.n	8005270 <_printf_i+0x184>
 80052a2:	4615      	mov	r5, r2
 80052a4:	e7bb      	b.n	800521e <_printf_i+0x132>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	6826      	ldr	r6, [r4, #0]
 80052aa:	1d18      	adds	r0, r3, #4
 80052ac:	6961      	ldr	r1, [r4, #20]
 80052ae:	6028      	str	r0, [r5, #0]
 80052b0:	0635      	lsls	r5, r6, #24
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	d501      	bpl.n	80052ba <_printf_i+0x1ce>
 80052b6:	6019      	str	r1, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <_printf_i+0x1d4>
 80052ba:	0670      	lsls	r0, r6, #25
 80052bc:	d5fb      	bpl.n	80052b6 <_printf_i+0x1ca>
 80052be:	8019      	strh	r1, [r3, #0]
 80052c0:	2300      	movs	r3, #0
 80052c2:	4615      	mov	r5, r2
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e7ba      	b.n	800523e <_printf_i+0x152>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	2100      	movs	r1, #0
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	602a      	str	r2, [r5, #0]
 80052d0:	681d      	ldr	r5, [r3, #0]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 febd 	bl	8006054 <memchr>
 80052da:	b108      	cbz	r0, 80052e0 <_printf_i+0x1f4>
 80052dc:	1b40      	subs	r0, r0, r5
 80052de:	6060      	str	r0, [r4, #4]
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	2300      	movs	r3, #0
 80052e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ea:	e7a8      	b.n	800523e <_printf_i+0x152>
 80052ec:	462a      	mov	r2, r5
 80052ee:	4649      	mov	r1, r9
 80052f0:	4640      	mov	r0, r8
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	47d0      	blx	sl
 80052f6:	3001      	adds	r0, #1
 80052f8:	d0ab      	beq.n	8005252 <_printf_i+0x166>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	079b      	lsls	r3, r3, #30
 80052fe:	d413      	bmi.n	8005328 <_printf_i+0x23c>
 8005300:	68e0      	ldr	r0, [r4, #12]
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	4298      	cmp	r0, r3
 8005306:	bfb8      	it	lt
 8005308:	4618      	movlt	r0, r3
 800530a:	e7a4      	b.n	8005256 <_printf_i+0x16a>
 800530c:	2301      	movs	r3, #1
 800530e:	4632      	mov	r2, r6
 8005310:	4649      	mov	r1, r9
 8005312:	4640      	mov	r0, r8
 8005314:	47d0      	blx	sl
 8005316:	3001      	adds	r0, #1
 8005318:	d09b      	beq.n	8005252 <_printf_i+0x166>
 800531a:	3501      	adds	r5, #1
 800531c:	68e3      	ldr	r3, [r4, #12]
 800531e:	9903      	ldr	r1, [sp, #12]
 8005320:	1a5b      	subs	r3, r3, r1
 8005322:	42ab      	cmp	r3, r5
 8005324:	dcf2      	bgt.n	800530c <_printf_i+0x220>
 8005326:	e7eb      	b.n	8005300 <_printf_i+0x214>
 8005328:	2500      	movs	r5, #0
 800532a:	f104 0619 	add.w	r6, r4, #25
 800532e:	e7f5      	b.n	800531c <_printf_i+0x230>
 8005330:	0800752e 	.word	0x0800752e
 8005334:	0800753f 	.word	0x0800753f

08005338 <_sbrk_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	2300      	movs	r3, #0
 800533c:	4d05      	ldr	r5, [pc, #20]	; (8005354 <_sbrk_r+0x1c>)
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fc fb16 	bl	8001974 <_sbrk>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_sbrk_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_sbrk_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	2000028c 	.word	0x2000028c

08005358 <quorem>:
 8005358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	6903      	ldr	r3, [r0, #16]
 800535e:	690c      	ldr	r4, [r1, #16]
 8005360:	4607      	mov	r7, r0
 8005362:	42a3      	cmp	r3, r4
 8005364:	f2c0 8082 	blt.w	800546c <quorem+0x114>
 8005368:	3c01      	subs	r4, #1
 800536a:	f100 0514 	add.w	r5, r0, #20
 800536e:	f101 0814 	add.w	r8, r1, #20
 8005372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800537c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005380:	3301      	adds	r3, #1
 8005382:	429a      	cmp	r2, r3
 8005384:	fbb2 f6f3 	udiv	r6, r2, r3
 8005388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800538c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005390:	d331      	bcc.n	80053f6 <quorem+0x9e>
 8005392:	f04f 0e00 	mov.w	lr, #0
 8005396:	4640      	mov	r0, r8
 8005398:	46ac      	mov	ip, r5
 800539a:	46f2      	mov	sl, lr
 800539c:	f850 2b04 	ldr.w	r2, [r0], #4
 80053a0:	b293      	uxth	r3, r2
 80053a2:	fb06 e303 	mla	r3, r6, r3, lr
 80053a6:	0c12      	lsrs	r2, r2, #16
 80053a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	fb06 e202 	mla	r2, r6, r2, lr
 80053b2:	ebaa 0303 	sub.w	r3, sl, r3
 80053b6:	f8dc a000 	ldr.w	sl, [ip]
 80053ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053be:	fa1f fa8a 	uxth.w	sl, sl
 80053c2:	4453      	add	r3, sl
 80053c4:	f8dc a000 	ldr.w	sl, [ip]
 80053c8:	b292      	uxth	r2, r2
 80053ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053d8:	4581      	cmp	r9, r0
 80053da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053de:	f84c 3b04 	str.w	r3, [ip], #4
 80053e2:	d2db      	bcs.n	800539c <quorem+0x44>
 80053e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80053e8:	b92b      	cbnz	r3, 80053f6 <quorem+0x9e>
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	429d      	cmp	r5, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	d32f      	bcc.n	8005454 <quorem+0xfc>
 80053f4:	613c      	str	r4, [r7, #16]
 80053f6:	4638      	mov	r0, r7
 80053f8:	f001 f8d2 	bl	80065a0 <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	db25      	blt.n	800544c <quorem+0xf4>
 8005400:	4628      	mov	r0, r5
 8005402:	f04f 0c00 	mov.w	ip, #0
 8005406:	3601      	adds	r6, #1
 8005408:	f858 1b04 	ldr.w	r1, [r8], #4
 800540c:	f8d0 e000 	ldr.w	lr, [r0]
 8005410:	b28b      	uxth	r3, r1
 8005412:	ebac 0303 	sub.w	r3, ip, r3
 8005416:	fa1f f28e 	uxth.w	r2, lr
 800541a:	4413      	add	r3, r2
 800541c:	0c0a      	lsrs	r2, r1, #16
 800541e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005422:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800542c:	45c1      	cmp	r9, r8
 800542e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005432:	f840 3b04 	str.w	r3, [r0], #4
 8005436:	d2e7      	bcs.n	8005408 <quorem+0xb0>
 8005438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800543c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005440:	b922      	cbnz	r2, 800544c <quorem+0xf4>
 8005442:	3b04      	subs	r3, #4
 8005444:	429d      	cmp	r5, r3
 8005446:	461a      	mov	r2, r3
 8005448:	d30a      	bcc.n	8005460 <quorem+0x108>
 800544a:	613c      	str	r4, [r7, #16]
 800544c:	4630      	mov	r0, r6
 800544e:	b003      	add	sp, #12
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	3b04      	subs	r3, #4
 8005458:	2a00      	cmp	r2, #0
 800545a:	d1cb      	bne.n	80053f4 <quorem+0x9c>
 800545c:	3c01      	subs	r4, #1
 800545e:	e7c6      	b.n	80053ee <quorem+0x96>
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	3b04      	subs	r3, #4
 8005464:	2a00      	cmp	r2, #0
 8005466:	d1f0      	bne.n	800544a <quorem+0xf2>
 8005468:	3c01      	subs	r4, #1
 800546a:	e7eb      	b.n	8005444 <quorem+0xec>
 800546c:	2000      	movs	r0, #0
 800546e:	e7ee      	b.n	800544e <quorem+0xf6>

08005470 <_dtoa_r>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	4616      	mov	r6, r2
 8005476:	461f      	mov	r7, r3
 8005478:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800547a:	b099      	sub	sp, #100	; 0x64
 800547c:	4605      	mov	r5, r0
 800547e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005482:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005486:	b974      	cbnz	r4, 80054a6 <_dtoa_r+0x36>
 8005488:	2010      	movs	r0, #16
 800548a:	f7ff fa09 	bl	80048a0 <malloc>
 800548e:	4602      	mov	r2, r0
 8005490:	6268      	str	r0, [r5, #36]	; 0x24
 8005492:	b920      	cbnz	r0, 800549e <_dtoa_r+0x2e>
 8005494:	21ea      	movs	r1, #234	; 0xea
 8005496:	4ba8      	ldr	r3, [pc, #672]	; (8005738 <_dtoa_r+0x2c8>)
 8005498:	48a8      	ldr	r0, [pc, #672]	; (800573c <_dtoa_r+0x2cc>)
 800549a:	f001 f999 	bl	80067d0 <__assert_func>
 800549e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054a2:	6004      	str	r4, [r0, #0]
 80054a4:	60c4      	str	r4, [r0, #12]
 80054a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	b151      	cbz	r1, 80054c2 <_dtoa_r+0x52>
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	2301      	movs	r3, #1
 80054b0:	4093      	lsls	r3, r2
 80054b2:	604a      	str	r2, [r1, #4]
 80054b4:	608b      	str	r3, [r1, #8]
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 fe34 	bl	8006124 <_Bfree>
 80054bc:	2200      	movs	r2, #0
 80054be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	1e3b      	subs	r3, r7, #0
 80054c4:	bfaf      	iteee	ge
 80054c6:	2300      	movge	r3, #0
 80054c8:	2201      	movlt	r2, #1
 80054ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	9305      	strlt	r3, [sp, #20]
 80054d0:	bfa8      	it	ge
 80054d2:	f8c8 3000 	strge.w	r3, [r8]
 80054d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054da:	4b99      	ldr	r3, [pc, #612]	; (8005740 <_dtoa_r+0x2d0>)
 80054dc:	bfb8      	it	lt
 80054de:	f8c8 2000 	strlt.w	r2, [r8]
 80054e2:	ea33 0309 	bics.w	r3, r3, r9
 80054e6:	d119      	bne.n	800551c <_dtoa_r+0xac>
 80054e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80054ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054f4:	4333      	orrs	r3, r6
 80054f6:	f000 857f 	beq.w	8005ff8 <_dtoa_r+0xb88>
 80054fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054fc:	b953      	cbnz	r3, 8005514 <_dtoa_r+0xa4>
 80054fe:	4b91      	ldr	r3, [pc, #580]	; (8005744 <_dtoa_r+0x2d4>)
 8005500:	e022      	b.n	8005548 <_dtoa_r+0xd8>
 8005502:	4b91      	ldr	r3, [pc, #580]	; (8005748 <_dtoa_r+0x2d8>)
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	3308      	adds	r3, #8
 8005508:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	9803      	ldr	r0, [sp, #12]
 800550e:	b019      	add	sp, #100	; 0x64
 8005510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005514:	4b8b      	ldr	r3, [pc, #556]	; (8005744 <_dtoa_r+0x2d4>)
 8005516:	9303      	str	r3, [sp, #12]
 8005518:	3303      	adds	r3, #3
 800551a:	e7f5      	b.n	8005508 <_dtoa_r+0x98>
 800551c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005520:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	f7fb fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005530:	4680      	mov	r8, r0
 8005532:	b158      	cbz	r0, 800554c <_dtoa_r+0xdc>
 8005534:	2301      	movs	r3, #1
 8005536:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8558 	beq.w	8005ff2 <_dtoa_r+0xb82>
 8005542:	4882      	ldr	r0, [pc, #520]	; (800574c <_dtoa_r+0x2dc>)
 8005544:	6018      	str	r0, [r3, #0]
 8005546:	1e43      	subs	r3, r0, #1
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	e7df      	b.n	800550c <_dtoa_r+0x9c>
 800554c:	ab16      	add	r3, sp, #88	; 0x58
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	ab17      	add	r3, sp, #92	; 0x5c
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4628      	mov	r0, r5
 8005556:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800555a:	f001 f8c9 	bl	80066f0 <__d2b>
 800555e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005562:	4683      	mov	fp, r0
 8005564:	2c00      	cmp	r4, #0
 8005566:	d07f      	beq.n	8005668 <_dtoa_r+0x1f8>
 8005568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800556c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800556e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005576:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800557a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800557e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005582:	2200      	movs	r2, #0
 8005584:	4b72      	ldr	r3, [pc, #456]	; (8005750 <_dtoa_r+0x2e0>)
 8005586:	f7fa fdef 	bl	8000168 <__aeabi_dsub>
 800558a:	a365      	add	r3, pc, #404	; (adr r3, 8005720 <_dtoa_r+0x2b0>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa ffa2 	bl	80004d8 <__aeabi_dmul>
 8005594:	a364      	add	r3, pc, #400	; (adr r3, 8005728 <_dtoa_r+0x2b8>)
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f7fa fde7 	bl	800016c <__adddf3>
 800559e:	4606      	mov	r6, r0
 80055a0:	4620      	mov	r0, r4
 80055a2:	460f      	mov	r7, r1
 80055a4:	f7fa ff2e 	bl	8000404 <__aeabi_i2d>
 80055a8:	a361      	add	r3, pc, #388	; (adr r3, 8005730 <_dtoa_r+0x2c0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa ff93 	bl	80004d8 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4630      	mov	r0, r6
 80055b8:	4639      	mov	r1, r7
 80055ba:	f7fa fdd7 	bl	800016c <__adddf3>
 80055be:	4606      	mov	r6, r0
 80055c0:	460f      	mov	r7, r1
 80055c2:	f7fb fa39 	bl	8000a38 <__aeabi_d2iz>
 80055c6:	2200      	movs	r2, #0
 80055c8:	4682      	mov	sl, r0
 80055ca:	2300      	movs	r3, #0
 80055cc:	4630      	mov	r0, r6
 80055ce:	4639      	mov	r1, r7
 80055d0:	f7fb f9f4 	bl	80009bc <__aeabi_dcmplt>
 80055d4:	b148      	cbz	r0, 80055ea <_dtoa_r+0x17a>
 80055d6:	4650      	mov	r0, sl
 80055d8:	f7fa ff14 	bl	8000404 <__aeabi_i2d>
 80055dc:	4632      	mov	r2, r6
 80055de:	463b      	mov	r3, r7
 80055e0:	f7fb f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 80055e4:	b908      	cbnz	r0, 80055ea <_dtoa_r+0x17a>
 80055e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ea:	f1ba 0f16 	cmp.w	sl, #22
 80055ee:	d858      	bhi.n	80056a2 <_dtoa_r+0x232>
 80055f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055f4:	4b57      	ldr	r3, [pc, #348]	; (8005754 <_dtoa_r+0x2e4>)
 80055f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb f9dd 	bl	80009bc <__aeabi_dcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d04f      	beq.n	80056a6 <_dtoa_r+0x236>
 8005606:	2300      	movs	r3, #0
 8005608:	f10a 3aff 	add.w	sl, sl, #4294967295
 800560c:	930f      	str	r3, [sp, #60]	; 0x3c
 800560e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005610:	1b1c      	subs	r4, r3, r4
 8005612:	1e63      	subs	r3, r4, #1
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	bf49      	itett	mi
 8005618:	f1c4 0301 	rsbmi	r3, r4, #1
 800561c:	2300      	movpl	r3, #0
 800561e:	9306      	strmi	r3, [sp, #24]
 8005620:	2300      	movmi	r3, #0
 8005622:	bf54      	ite	pl
 8005624:	9306      	strpl	r3, [sp, #24]
 8005626:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005628:	f1ba 0f00 	cmp.w	sl, #0
 800562c:	db3d      	blt.n	80056aa <_dtoa_r+0x23a>
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005634:	4453      	add	r3, sl
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
 8005638:	2300      	movs	r3, #0
 800563a:	930a      	str	r3, [sp, #40]	; 0x28
 800563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800563e:	2b09      	cmp	r3, #9
 8005640:	f200 808c 	bhi.w	800575c <_dtoa_r+0x2ec>
 8005644:	2b05      	cmp	r3, #5
 8005646:	bfc4      	itt	gt
 8005648:	3b04      	subgt	r3, #4
 800564a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800564c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564e:	bfc8      	it	gt
 8005650:	2400      	movgt	r4, #0
 8005652:	f1a3 0302 	sub.w	r3, r3, #2
 8005656:	bfd8      	it	le
 8005658:	2401      	movle	r4, #1
 800565a:	2b03      	cmp	r3, #3
 800565c:	f200 808a 	bhi.w	8005774 <_dtoa_r+0x304>
 8005660:	e8df f003 	tbb	[pc, r3]
 8005664:	5b4d4f2d 	.word	0x5b4d4f2d
 8005668:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800566c:	441c      	add	r4, r3
 800566e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005672:	2b20      	cmp	r3, #32
 8005674:	bfc3      	ittte	gt
 8005676:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800567a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800567e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005682:	f1c3 0320 	rsble	r3, r3, #32
 8005686:	bfc6      	itte	gt
 8005688:	fa26 f000 	lsrgt.w	r0, r6, r0
 800568c:	4318      	orrgt	r0, r3
 800568e:	fa06 f003 	lslle.w	r0, r6, r3
 8005692:	f7fa fea7 	bl	80003e4 <__aeabi_ui2d>
 8005696:	2301      	movs	r3, #1
 8005698:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800569c:	3c01      	subs	r4, #1
 800569e:	9313      	str	r3, [sp, #76]	; 0x4c
 80056a0:	e76f      	b.n	8005582 <_dtoa_r+0x112>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e7b2      	b.n	800560c <_dtoa_r+0x19c>
 80056a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80056a8:	e7b1      	b.n	800560e <_dtoa_r+0x19e>
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	eba3 030a 	sub.w	r3, r3, sl
 80056b0:	9306      	str	r3, [sp, #24]
 80056b2:	f1ca 0300 	rsb	r3, sl, #0
 80056b6:	930a      	str	r3, [sp, #40]	; 0x28
 80056b8:	2300      	movs	r3, #0
 80056ba:	930e      	str	r3, [sp, #56]	; 0x38
 80056bc:	e7be      	b.n	800563c <_dtoa_r+0x1cc>
 80056be:	2300      	movs	r3, #0
 80056c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80056c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	dc58      	bgt.n	800577a <_dtoa_r+0x30a>
 80056c8:	f04f 0901 	mov.w	r9, #1
 80056cc:	464b      	mov	r3, r9
 80056ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80056d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80056d6:	2200      	movs	r2, #0
 80056d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056da:	6042      	str	r2, [r0, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	f102 0614 	add.w	r6, r2, #20
 80056e2:	429e      	cmp	r6, r3
 80056e4:	6841      	ldr	r1, [r0, #4]
 80056e6:	d94e      	bls.n	8005786 <_dtoa_r+0x316>
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 fcdb 	bl	80060a4 <_Balloc>
 80056ee:	9003      	str	r0, [sp, #12]
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d14c      	bne.n	800578e <_dtoa_r+0x31e>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <_dtoa_r+0x2e8>)
 80056fc:	e6cc      	b.n	8005498 <_dtoa_r+0x28>
 80056fe:	2301      	movs	r3, #1
 8005700:	e7de      	b.n	80056c0 <_dtoa_r+0x250>
 8005702:	2300      	movs	r3, #0
 8005704:	930b      	str	r3, [sp, #44]	; 0x2c
 8005706:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005708:	eb0a 0903 	add.w	r9, sl, r3
 800570c:	f109 0301 	add.w	r3, r9, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	9308      	str	r3, [sp, #32]
 8005714:	bfb8      	it	lt
 8005716:	2301      	movlt	r3, #1
 8005718:	e7dd      	b.n	80056d6 <_dtoa_r+0x266>
 800571a:	2301      	movs	r3, #1
 800571c:	e7f2      	b.n	8005704 <_dtoa_r+0x294>
 800571e:	bf00      	nop
 8005720:	636f4361 	.word	0x636f4361
 8005724:	3fd287a7 	.word	0x3fd287a7
 8005728:	8b60c8b3 	.word	0x8b60c8b3
 800572c:	3fc68a28 	.word	0x3fc68a28
 8005730:	509f79fb 	.word	0x509f79fb
 8005734:	3fd34413 	.word	0x3fd34413
 8005738:	0800755d 	.word	0x0800755d
 800573c:	08007574 	.word	0x08007574
 8005740:	7ff00000 	.word	0x7ff00000
 8005744:	08007559 	.word	0x08007559
 8005748:	08007550 	.word	0x08007550
 800574c:	0800752d 	.word	0x0800752d
 8005750:	3ff80000 	.word	0x3ff80000
 8005754:	08007668 	.word	0x08007668
 8005758:	080075cf 	.word	0x080075cf
 800575c:	2401      	movs	r4, #1
 800575e:	2300      	movs	r3, #0
 8005760:	940b      	str	r4, [sp, #44]	; 0x2c
 8005762:	9322      	str	r3, [sp, #136]	; 0x88
 8005764:	f04f 39ff 	mov.w	r9, #4294967295
 8005768:	2200      	movs	r2, #0
 800576a:	2312      	movs	r3, #18
 800576c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005770:	9223      	str	r2, [sp, #140]	; 0x8c
 8005772:	e7b0      	b.n	80056d6 <_dtoa_r+0x266>
 8005774:	2301      	movs	r3, #1
 8005776:	930b      	str	r3, [sp, #44]	; 0x2c
 8005778:	e7f4      	b.n	8005764 <_dtoa_r+0x2f4>
 800577a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800577e:	464b      	mov	r3, r9
 8005780:	f8cd 9020 	str.w	r9, [sp, #32]
 8005784:	e7a7      	b.n	80056d6 <_dtoa_r+0x266>
 8005786:	3101      	adds	r1, #1
 8005788:	6041      	str	r1, [r0, #4]
 800578a:	0052      	lsls	r2, r2, #1
 800578c:	e7a7      	b.n	80056de <_dtoa_r+0x26e>
 800578e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005790:	9a03      	ldr	r2, [sp, #12]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	9b08      	ldr	r3, [sp, #32]
 8005796:	2b0e      	cmp	r3, #14
 8005798:	f200 80a8 	bhi.w	80058ec <_dtoa_r+0x47c>
 800579c:	2c00      	cmp	r4, #0
 800579e:	f000 80a5 	beq.w	80058ec <_dtoa_r+0x47c>
 80057a2:	f1ba 0f00 	cmp.w	sl, #0
 80057a6:	dd34      	ble.n	8005812 <_dtoa_r+0x3a2>
 80057a8:	4a9a      	ldr	r2, [pc, #616]	; (8005a14 <_dtoa_r+0x5a4>)
 80057aa:	f00a 030f 	and.w	r3, sl, #15
 80057ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80057c2:	d016      	beq.n	80057f2 <_dtoa_r+0x382>
 80057c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c8:	4b93      	ldr	r3, [pc, #588]	; (8005a18 <_dtoa_r+0x5a8>)
 80057ca:	2703      	movs	r7, #3
 80057cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057d0:	f7fa ffac 	bl	800072c <__aeabi_ddiv>
 80057d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057d8:	f004 040f 	and.w	r4, r4, #15
 80057dc:	4e8e      	ldr	r6, [pc, #568]	; (8005a18 <_dtoa_r+0x5a8>)
 80057de:	b954      	cbnz	r4, 80057f6 <_dtoa_r+0x386>
 80057e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e8:	f7fa ffa0 	bl	800072c <__aeabi_ddiv>
 80057ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f0:	e029      	b.n	8005846 <_dtoa_r+0x3d6>
 80057f2:	2702      	movs	r7, #2
 80057f4:	e7f2      	b.n	80057dc <_dtoa_r+0x36c>
 80057f6:	07e1      	lsls	r1, r4, #31
 80057f8:	d508      	bpl.n	800580c <_dtoa_r+0x39c>
 80057fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005802:	f7fa fe69 	bl	80004d8 <__aeabi_dmul>
 8005806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800580a:	3701      	adds	r7, #1
 800580c:	1064      	asrs	r4, r4, #1
 800580e:	3608      	adds	r6, #8
 8005810:	e7e5      	b.n	80057de <_dtoa_r+0x36e>
 8005812:	f000 80a5 	beq.w	8005960 <_dtoa_r+0x4f0>
 8005816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800581a:	f1ca 0400 	rsb	r4, sl, #0
 800581e:	4b7d      	ldr	r3, [pc, #500]	; (8005a14 <_dtoa_r+0x5a4>)
 8005820:	f004 020f 	and.w	r2, r4, #15
 8005824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f7fa fe54 	bl	80004d8 <__aeabi_dmul>
 8005830:	2702      	movs	r7, #2
 8005832:	2300      	movs	r3, #0
 8005834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005838:	4e77      	ldr	r6, [pc, #476]	; (8005a18 <_dtoa_r+0x5a8>)
 800583a:	1124      	asrs	r4, r4, #4
 800583c:	2c00      	cmp	r4, #0
 800583e:	f040 8084 	bne.w	800594a <_dtoa_r+0x4da>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1d2      	bne.n	80057ec <_dtoa_r+0x37c>
 8005846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 808b 	beq.w	8005964 <_dtoa_r+0x4f4>
 800584e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005852:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005856:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800585a:	2200      	movs	r2, #0
 800585c:	4b6f      	ldr	r3, [pc, #444]	; (8005a1c <_dtoa_r+0x5ac>)
 800585e:	f7fb f8ad 	bl	80009bc <__aeabi_dcmplt>
 8005862:	2800      	cmp	r0, #0
 8005864:	d07e      	beq.n	8005964 <_dtoa_r+0x4f4>
 8005866:	9b08      	ldr	r3, [sp, #32]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d07b      	beq.n	8005964 <_dtoa_r+0x4f4>
 800586c:	f1b9 0f00 	cmp.w	r9, #0
 8005870:	dd38      	ble.n	80058e4 <_dtoa_r+0x474>
 8005872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005876:	2200      	movs	r2, #0
 8005878:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <_dtoa_r+0x5b0>)
 800587a:	f7fa fe2d 	bl	80004d8 <__aeabi_dmul>
 800587e:	464c      	mov	r4, r9
 8005880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005884:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005888:	3701      	adds	r7, #1
 800588a:	4638      	mov	r0, r7
 800588c:	f7fa fdba 	bl	8000404 <__aeabi_i2d>
 8005890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005894:	f7fa fe20 	bl	80004d8 <__aeabi_dmul>
 8005898:	2200      	movs	r2, #0
 800589a:	4b62      	ldr	r3, [pc, #392]	; (8005a24 <_dtoa_r+0x5b4>)
 800589c:	f7fa fc66 	bl	800016c <__adddf3>
 80058a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80058a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058a8:	9611      	str	r6, [sp, #68]	; 0x44
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	d15d      	bne.n	800596a <_dtoa_r+0x4fa>
 80058ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058b2:	2200      	movs	r2, #0
 80058b4:	4b5c      	ldr	r3, [pc, #368]	; (8005a28 <_dtoa_r+0x5b8>)
 80058b6:	f7fa fc57 	bl	8000168 <__aeabi_dsub>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058c2:	4633      	mov	r3, r6
 80058c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058c6:	f7fb f897 	bl	80009f8 <__aeabi_dcmpgt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f040 829c 	bne.w	8005e08 <_dtoa_r+0x998>
 80058d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058da:	f7fb f86f 	bl	80009bc <__aeabi_dcmplt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 8290 	bne.w	8005e04 <_dtoa_r+0x994>
 80058e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f2c0 8152 	blt.w	8005b98 <_dtoa_r+0x728>
 80058f4:	f1ba 0f0e 	cmp.w	sl, #14
 80058f8:	f300 814e 	bgt.w	8005b98 <_dtoa_r+0x728>
 80058fc:	4b45      	ldr	r3, [pc, #276]	; (8005a14 <_dtoa_r+0x5a4>)
 80058fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005906:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800590a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f280 80db 	bge.w	8005ac8 <_dtoa_r+0x658>
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f300 80d7 	bgt.w	8005ac8 <_dtoa_r+0x658>
 800591a:	f040 8272 	bne.w	8005e02 <_dtoa_r+0x992>
 800591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005922:	2200      	movs	r2, #0
 8005924:	4b40      	ldr	r3, [pc, #256]	; (8005a28 <_dtoa_r+0x5b8>)
 8005926:	f7fa fdd7 	bl	80004d8 <__aeabi_dmul>
 800592a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800592e:	f7fb f859 	bl	80009e4 <__aeabi_dcmpge>
 8005932:	9c08      	ldr	r4, [sp, #32]
 8005934:	4626      	mov	r6, r4
 8005936:	2800      	cmp	r0, #0
 8005938:	f040 8248 	bne.w	8005dcc <_dtoa_r+0x95c>
 800593c:	2331      	movs	r3, #49	; 0x31
 800593e:	9f03      	ldr	r7, [sp, #12]
 8005940:	f10a 0a01 	add.w	sl, sl, #1
 8005944:	f807 3b01 	strb.w	r3, [r7], #1
 8005948:	e244      	b.n	8005dd4 <_dtoa_r+0x964>
 800594a:	07e2      	lsls	r2, r4, #31
 800594c:	d505      	bpl.n	800595a <_dtoa_r+0x4ea>
 800594e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	2301      	movs	r3, #1
 8005958:	3701      	adds	r7, #1
 800595a:	1064      	asrs	r4, r4, #1
 800595c:	3608      	adds	r6, #8
 800595e:	e76d      	b.n	800583c <_dtoa_r+0x3cc>
 8005960:	2702      	movs	r7, #2
 8005962:	e770      	b.n	8005846 <_dtoa_r+0x3d6>
 8005964:	46d0      	mov	r8, sl
 8005966:	9c08      	ldr	r4, [sp, #32]
 8005968:	e78f      	b.n	800588a <_dtoa_r+0x41a>
 800596a:	9903      	ldr	r1, [sp, #12]
 800596c:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <_dtoa_r+0x5a4>)
 800596e:	4421      	add	r1, r4
 8005970:	9112      	str	r1, [sp, #72]	; 0x48
 8005972:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005978:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800597c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005980:	2900      	cmp	r1, #0
 8005982:	d055      	beq.n	8005a30 <_dtoa_r+0x5c0>
 8005984:	2000      	movs	r0, #0
 8005986:	4929      	ldr	r1, [pc, #164]	; (8005a2c <_dtoa_r+0x5bc>)
 8005988:	f7fa fed0 	bl	800072c <__aeabi_ddiv>
 800598c:	463b      	mov	r3, r7
 800598e:	4632      	mov	r2, r6
 8005990:	f7fa fbea 	bl	8000168 <__aeabi_dsub>
 8005994:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005998:	9f03      	ldr	r7, [sp, #12]
 800599a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599e:	f7fb f84b 	bl	8000a38 <__aeabi_d2iz>
 80059a2:	4604      	mov	r4, r0
 80059a4:	f7fa fd2e 	bl	8000404 <__aeabi_i2d>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b0:	f7fa fbda 	bl	8000168 <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	3430      	adds	r4, #48	; 0x30
 80059ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059c2:	f807 4b01 	strb.w	r4, [r7], #1
 80059c6:	f7fa fff9 	bl	80009bc <__aeabi_dcmplt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d174      	bne.n	8005ab8 <_dtoa_r+0x648>
 80059ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d2:	2000      	movs	r0, #0
 80059d4:	4911      	ldr	r1, [pc, #68]	; (8005a1c <_dtoa_r+0x5ac>)
 80059d6:	f7fa fbc7 	bl	8000168 <__aeabi_dsub>
 80059da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059de:	f7fa ffed 	bl	80009bc <__aeabi_dcmplt>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f040 80b7 	bne.w	8005b56 <_dtoa_r+0x6e6>
 80059e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ea:	429f      	cmp	r7, r3
 80059ec:	f43f af7a 	beq.w	80058e4 <_dtoa_r+0x474>
 80059f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059f4:	2200      	movs	r2, #0
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <_dtoa_r+0x5b0>)
 80059f8:	f7fa fd6e 	bl	80004d8 <__aeabi_dmul>
 80059fc:	2200      	movs	r2, #0
 80059fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <_dtoa_r+0x5b0>)
 8005a08:	f7fa fd66 	bl	80004d8 <__aeabi_dmul>
 8005a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a10:	e7c3      	b.n	800599a <_dtoa_r+0x52a>
 8005a12:	bf00      	nop
 8005a14:	08007668 	.word	0x08007668
 8005a18:	08007640 	.word	0x08007640
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	40240000 	.word	0x40240000
 8005a24:	401c0000 	.word	0x401c0000
 8005a28:	40140000 	.word	0x40140000
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa fd50 	bl	80004d8 <__aeabi_dmul>
 8005a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a3e:	9c03      	ldr	r4, [sp, #12]
 8005a40:	9314      	str	r3, [sp, #80]	; 0x50
 8005a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a46:	f7fa fff7 	bl	8000a38 <__aeabi_d2iz>
 8005a4a:	9015      	str	r0, [sp, #84]	; 0x54
 8005a4c:	f7fa fcda 	bl	8000404 <__aeabi_i2d>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a58:	f7fa fb86 	bl	8000168 <__aeabi_dsub>
 8005a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a5e:	4606      	mov	r6, r0
 8005a60:	3330      	adds	r3, #48	; 0x30
 8005a62:	f804 3b01 	strb.w	r3, [r4], #1
 8005a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a68:	460f      	mov	r7, r1
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	d124      	bne.n	8005abc <_dtoa_r+0x64c>
 8005a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a76:	4bb0      	ldr	r3, [pc, #704]	; (8005d38 <_dtoa_r+0x8c8>)
 8005a78:	f7fa fb78 	bl	800016c <__adddf3>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4630      	mov	r0, r6
 8005a82:	4639      	mov	r1, r7
 8005a84:	f7fa ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d163      	bne.n	8005b54 <_dtoa_r+0x6e4>
 8005a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a90:	2000      	movs	r0, #0
 8005a92:	49a9      	ldr	r1, [pc, #676]	; (8005d38 <_dtoa_r+0x8c8>)
 8005a94:	f7fa fb68 	bl	8000168 <__aeabi_dsub>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	f7fa ff8c 	bl	80009bc <__aeabi_dcmplt>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f43f af1d 	beq.w	80058e4 <_dtoa_r+0x474>
 8005aaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005aac:	1e7b      	subs	r3, r7, #1
 8005aae:	9314      	str	r3, [sp, #80]	; 0x50
 8005ab0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ab4:	2b30      	cmp	r3, #48	; 0x30
 8005ab6:	d0f8      	beq.n	8005aaa <_dtoa_r+0x63a>
 8005ab8:	46c2      	mov	sl, r8
 8005aba:	e03b      	b.n	8005b34 <_dtoa_r+0x6c4>
 8005abc:	4b9f      	ldr	r3, [pc, #636]	; (8005d3c <_dtoa_r+0x8cc>)
 8005abe:	f7fa fd0b 	bl	80004d8 <__aeabi_dmul>
 8005ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ac6:	e7bc      	b.n	8005a42 <_dtoa_r+0x5d2>
 8005ac8:	9f03      	ldr	r7, [sp, #12]
 8005aca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	f7fa fe29 	bl	800072c <__aeabi_ddiv>
 8005ada:	f7fa ffad 	bl	8000a38 <__aeabi_d2iz>
 8005ade:	4604      	mov	r4, r0
 8005ae0:	f7fa fc90 	bl	8000404 <__aeabi_i2d>
 8005ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ae8:	f7fa fcf6 	bl	80004d8 <__aeabi_dmul>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4640      	mov	r0, r8
 8005af2:	4649      	mov	r1, r9
 8005af4:	f7fa fb38 	bl	8000168 <__aeabi_dsub>
 8005af8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005afc:	f807 6b01 	strb.w	r6, [r7], #1
 8005b00:	9e03      	ldr	r6, [sp, #12]
 8005b02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005b06:	1bbe      	subs	r6, r7, r6
 8005b08:	45b4      	cmp	ip, r6
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	d136      	bne.n	8005b7e <_dtoa_r+0x70e>
 8005b10:	f7fa fb2c 	bl	800016c <__adddf3>
 8005b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b18:	4680      	mov	r8, r0
 8005b1a:	4689      	mov	r9, r1
 8005b1c:	f7fa ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8005b20:	bb58      	cbnz	r0, 8005b7a <_dtoa_r+0x70a>
 8005b22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ff3d 	bl	80009a8 <__aeabi_dcmpeq>
 8005b2e:	b108      	cbz	r0, 8005b34 <_dtoa_r+0x6c4>
 8005b30:	07e1      	lsls	r1, r4, #31
 8005b32:	d422      	bmi.n	8005b7a <_dtoa_r+0x70a>
 8005b34:	4628      	mov	r0, r5
 8005b36:	4659      	mov	r1, fp
 8005b38:	f000 faf4 	bl	8006124 <_Bfree>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	703b      	strb	r3, [r7, #0]
 8005b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b42:	f10a 0001 	add.w	r0, sl, #1
 8005b46:	6018      	str	r0, [r3, #0]
 8005b48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f acde 	beq.w	800550c <_dtoa_r+0x9c>
 8005b50:	601f      	str	r7, [r3, #0]
 8005b52:	e4db      	b.n	800550c <_dtoa_r+0x9c>
 8005b54:	4627      	mov	r7, r4
 8005b56:	463b      	mov	r3, r7
 8005b58:	461f      	mov	r7, r3
 8005b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b5e:	2a39      	cmp	r2, #57	; 0x39
 8005b60:	d107      	bne.n	8005b72 <_dtoa_r+0x702>
 8005b62:	9a03      	ldr	r2, [sp, #12]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1f7      	bne.n	8005b58 <_dtoa_r+0x6e8>
 8005b68:	2230      	movs	r2, #48	; 0x30
 8005b6a:	9903      	ldr	r1, [sp, #12]
 8005b6c:	f108 0801 	add.w	r8, r8, #1
 8005b70:	700a      	strb	r2, [r1, #0]
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	3201      	adds	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	e79e      	b.n	8005ab8 <_dtoa_r+0x648>
 8005b7a:	46d0      	mov	r8, sl
 8005b7c:	e7eb      	b.n	8005b56 <_dtoa_r+0x6e6>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4b6e      	ldr	r3, [pc, #440]	; (8005d3c <_dtoa_r+0x8cc>)
 8005b82:	f7fa fca9 	bl	80004d8 <__aeabi_dmul>
 8005b86:	2200      	movs	r2, #0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	f7fa ff0b 	bl	80009a8 <__aeabi_dcmpeq>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d09b      	beq.n	8005ace <_dtoa_r+0x65e>
 8005b96:	e7cd      	b.n	8005b34 <_dtoa_r+0x6c4>
 8005b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	f000 80d0 	beq.w	8005d40 <_dtoa_r+0x8d0>
 8005ba0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ba2:	2a01      	cmp	r2, #1
 8005ba4:	f300 80ae 	bgt.w	8005d04 <_dtoa_r+0x894>
 8005ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	f000 80a6 	beq.w	8005cfc <_dtoa_r+0x88c>
 8005bb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bb6:	9f06      	ldr	r7, [sp, #24]
 8005bb8:	9a06      	ldr	r2, [sp, #24]
 8005bba:	2101      	movs	r1, #1
 8005bbc:	441a      	add	r2, r3
 8005bbe:	9206      	str	r2, [sp, #24]
 8005bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	441a      	add	r2, r3
 8005bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc8:	f000 fb62 	bl	8006290 <__i2b>
 8005bcc:	4606      	mov	r6, r0
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	dd0c      	ble.n	8005bec <_dtoa_r+0x77c>
 8005bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd09      	ble.n	8005bec <_dtoa_r+0x77c>
 8005bd8:	42bb      	cmp	r3, r7
 8005bda:	bfa8      	it	ge
 8005bdc:	463b      	movge	r3, r7
 8005bde:	9a06      	ldr	r2, [sp, #24]
 8005be0:	1aff      	subs	r7, r7, r3
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	9206      	str	r2, [sp, #24]
 8005be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	9309      	str	r3, [sp, #36]	; 0x24
 8005bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bee:	b1f3      	cbz	r3, 8005c2e <_dtoa_r+0x7be>
 8005bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80a8 	beq.w	8005d48 <_dtoa_r+0x8d8>
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	dd10      	ble.n	8005c1e <_dtoa_r+0x7ae>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fc03 	bl	800640c <__pow5mult>
 8005c06:	465a      	mov	r2, fp
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 fb55 	bl	80062bc <__multiply>
 8005c12:	4680      	mov	r8, r0
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fa84 	bl	8006124 <_Bfree>
 8005c1c:	46c3      	mov	fp, r8
 8005c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c20:	1b1a      	subs	r2, r3, r4
 8005c22:	d004      	beq.n	8005c2e <_dtoa_r+0x7be>
 8005c24:	4659      	mov	r1, fp
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fbf0 	bl	800640c <__pow5mult>
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 fb2d 	bl	8006290 <__i2b>
 8005c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c38:	4604      	mov	r4, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f340 8086 	ble.w	8005d4c <_dtoa_r+0x8dc>
 8005c40:	461a      	mov	r2, r3
 8005c42:	4601      	mov	r1, r0
 8005c44:	4628      	mov	r0, r5
 8005c46:	f000 fbe1 	bl	800640c <__pow5mult>
 8005c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	dd7f      	ble.n	8005d52 <_dtoa_r+0x8e2>
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c5c:	6918      	ldr	r0, [r3, #16]
 8005c5e:	f000 fac9 	bl	80061f4 <__hi0bits>
 8005c62:	f1c0 0020 	rsb	r0, r0, #32
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	4418      	add	r0, r3
 8005c6a:	f010 001f 	ands.w	r0, r0, #31
 8005c6e:	f000 8092 	beq.w	8005d96 <_dtoa_r+0x926>
 8005c72:	f1c0 0320 	rsb	r3, r0, #32
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	f340 808a 	ble.w	8005d90 <_dtoa_r+0x920>
 8005c7c:	f1c0 001c 	rsb	r0, r0, #28
 8005c80:	9b06      	ldr	r3, [sp, #24]
 8005c82:	4407      	add	r7, r0
 8005c84:	4403      	add	r3, r0
 8005c86:	9306      	str	r3, [sp, #24]
 8005c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8a:	4403      	add	r3, r0
 8005c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8e:	9b06      	ldr	r3, [sp, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	dd05      	ble.n	8005ca0 <_dtoa_r+0x830>
 8005c94:	4659      	mov	r1, fp
 8005c96:	461a      	mov	r2, r3
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f000 fc11 	bl	80064c0 <__lshift>
 8005c9e:	4683      	mov	fp, r0
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dd05      	ble.n	8005cb2 <_dtoa_r+0x842>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fc08 	bl	80064c0 <__lshift>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d070      	beq.n	8005d9a <_dtoa_r+0x92a>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4658      	mov	r0, fp
 8005cbc:	f000 fc70 	bl	80065a0 <__mcmp>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	da6a      	bge.n	8005d9a <_dtoa_r+0x92a>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	220a      	movs	r2, #10
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 fa4c 	bl	8006168 <__multadd>
 8005cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd2:	4683      	mov	fp, r0
 8005cd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8194 	beq.w	8006006 <_dtoa_r+0xb96>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	220a      	movs	r2, #10
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 fa3f 	bl	8006168 <__multadd>
 8005cea:	f1b9 0f00 	cmp.w	r9, #0
 8005cee:	4606      	mov	r6, r0
 8005cf0:	f300 8093 	bgt.w	8005e1a <_dtoa_r+0x9aa>
 8005cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	dc57      	bgt.n	8005daa <_dtoa_r+0x93a>
 8005cfa:	e08e      	b.n	8005e1a <_dtoa_r+0x9aa>
 8005cfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d02:	e757      	b.n	8005bb4 <_dtoa_r+0x744>
 8005d04:	9b08      	ldr	r3, [sp, #32]
 8005d06:	1e5c      	subs	r4, r3, #1
 8005d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	bfb7      	itett	lt
 8005d0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d10:	1b1c      	subge	r4, r3, r4
 8005d12:	1ae2      	sublt	r2, r4, r3
 8005d14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d16:	bfbe      	ittt	lt
 8005d18:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005d1a:	189b      	addlt	r3, r3, r2
 8005d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d1e:	9b08      	ldr	r3, [sp, #32]
 8005d20:	bfb8      	it	lt
 8005d22:	2400      	movlt	r4, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbb      	ittet	lt
 8005d28:	9b06      	ldrlt	r3, [sp, #24]
 8005d2a:	9a08      	ldrlt	r2, [sp, #32]
 8005d2c:	9f06      	ldrge	r7, [sp, #24]
 8005d2e:	1a9f      	sublt	r7, r3, r2
 8005d30:	bfac      	ite	ge
 8005d32:	9b08      	ldrge	r3, [sp, #32]
 8005d34:	2300      	movlt	r3, #0
 8005d36:	e73f      	b.n	8005bb8 <_dtoa_r+0x748>
 8005d38:	3fe00000 	.word	0x3fe00000
 8005d3c:	40240000 	.word	0x40240000
 8005d40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d42:	9f06      	ldr	r7, [sp, #24]
 8005d44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d46:	e742      	b.n	8005bce <_dtoa_r+0x75e>
 8005d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d4a:	e76b      	b.n	8005c24 <_dtoa_r+0x7b4>
 8005d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	dc19      	bgt.n	8005d86 <_dtoa_r+0x916>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	b9bb      	cbnz	r3, 8005d86 <_dtoa_r+0x916>
 8005d56:	9b05      	ldr	r3, [sp, #20]
 8005d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5c:	b99b      	cbnz	r3, 8005d86 <_dtoa_r+0x916>
 8005d5e:	9b05      	ldr	r3, [sp, #20]
 8005d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	0d1b      	lsrs	r3, r3, #20
 8005d66:	051b      	lsls	r3, r3, #20
 8005d68:	b183      	cbz	r3, 8005d8c <_dtoa_r+0x91c>
 8005d6a:	f04f 0801 	mov.w	r8, #1
 8005d6e:	9b06      	ldr	r3, [sp, #24]
 8005d70:	3301      	adds	r3, #1
 8005d72:	9306      	str	r3, [sp, #24]
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	3301      	adds	r3, #1
 8005d78:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f af6a 	bne.w	8005c56 <_dtoa_r+0x7e6>
 8005d82:	2001      	movs	r0, #1
 8005d84:	e76f      	b.n	8005c66 <_dtoa_r+0x7f6>
 8005d86:	f04f 0800 	mov.w	r8, #0
 8005d8a:	e7f6      	b.n	8005d7a <_dtoa_r+0x90a>
 8005d8c:	4698      	mov	r8, r3
 8005d8e:	e7f4      	b.n	8005d7a <_dtoa_r+0x90a>
 8005d90:	f43f af7d 	beq.w	8005c8e <_dtoa_r+0x81e>
 8005d94:	4618      	mov	r0, r3
 8005d96:	301c      	adds	r0, #28
 8005d98:	e772      	b.n	8005c80 <_dtoa_r+0x810>
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dc36      	bgt.n	8005e0e <_dtoa_r+0x99e>
 8005da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	dd33      	ble.n	8005e0e <_dtoa_r+0x99e>
 8005da6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	d10d      	bne.n	8005dcc <_dtoa_r+0x95c>
 8005db0:	4621      	mov	r1, r4
 8005db2:	464b      	mov	r3, r9
 8005db4:	2205      	movs	r2, #5
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f9d6 	bl	8006168 <__multadd>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	f000 fbed 	bl	80065a0 <__mcmp>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f73f adb8 	bgt.w	800593c <_dtoa_r+0x4cc>
 8005dcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dce:	9f03      	ldr	r7, [sp, #12]
 8005dd0:	ea6f 0a03 	mvn.w	sl, r3
 8005dd4:	f04f 0800 	mov.w	r8, #0
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f9a2 	bl	8006124 <_Bfree>
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	f43f aea7 	beq.w	8005b34 <_dtoa_r+0x6c4>
 8005de6:	f1b8 0f00 	cmp.w	r8, #0
 8005dea:	d005      	beq.n	8005df8 <_dtoa_r+0x988>
 8005dec:	45b0      	cmp	r8, r6
 8005dee:	d003      	beq.n	8005df8 <_dtoa_r+0x988>
 8005df0:	4641      	mov	r1, r8
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f996 	bl	8006124 <_Bfree>
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 f992 	bl	8006124 <_Bfree>
 8005e00:	e698      	b.n	8005b34 <_dtoa_r+0x6c4>
 8005e02:	2400      	movs	r4, #0
 8005e04:	4626      	mov	r6, r4
 8005e06:	e7e1      	b.n	8005dcc <_dtoa_r+0x95c>
 8005e08:	46c2      	mov	sl, r8
 8005e0a:	4626      	mov	r6, r4
 8005e0c:	e596      	b.n	800593c <_dtoa_r+0x4cc>
 8005e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80fd 	beq.w	8006014 <_dtoa_r+0xba4>
 8005e1a:	2f00      	cmp	r7, #0
 8005e1c:	dd05      	ble.n	8005e2a <_dtoa_r+0x9ba>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	463a      	mov	r2, r7
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 fb4c 	bl	80064c0 <__lshift>
 8005e28:	4606      	mov	r6, r0
 8005e2a:	f1b8 0f00 	cmp.w	r8, #0
 8005e2e:	d05c      	beq.n	8005eea <_dtoa_r+0xa7a>
 8005e30:	4628      	mov	r0, r5
 8005e32:	6871      	ldr	r1, [r6, #4]
 8005e34:	f000 f936 	bl	80060a4 <_Balloc>
 8005e38:	4607      	mov	r7, r0
 8005e3a:	b928      	cbnz	r0, 8005e48 <_dtoa_r+0x9d8>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e42:	4b7f      	ldr	r3, [pc, #508]	; (8006040 <_dtoa_r+0xbd0>)
 8005e44:	f7ff bb28 	b.w	8005498 <_dtoa_r+0x28>
 8005e48:	6932      	ldr	r2, [r6, #16]
 8005e4a:	f106 010c 	add.w	r1, r6, #12
 8005e4e:	3202      	adds	r2, #2
 8005e50:	0092      	lsls	r2, r2, #2
 8005e52:	300c      	adds	r0, #12
 8005e54:	f000 f90c 	bl	8006070 <memcpy>
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 fb2f 	bl	80064c0 <__lshift>
 8005e62:	46b0      	mov	r8, r6
 8005e64:	4606      	mov	r6, r0
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	9308      	str	r3, [sp, #32]
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	444b      	add	r3, r9
 8005e70:	930a      	str	r3, [sp, #40]	; 0x28
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4658      	mov	r0, fp
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	f7ff fa68 	bl	8005358 <quorem>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	3330      	adds	r3, #48	; 0x30
 8005e8e:	9006      	str	r0, [sp, #24]
 8005e90:	4658      	mov	r0, fp
 8005e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e94:	f000 fb84 	bl	80065a0 <__mcmp>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fb9a 	bl	80065d8 <__mdiff>
 8005ea4:	68c2      	ldr	r2, [r0, #12]
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eaa:	bb02      	cbnz	r2, 8005eee <_dtoa_r+0xa7e>
 8005eac:	4601      	mov	r1, r0
 8005eae:	4658      	mov	r0, fp
 8005eb0:	f000 fb76 	bl	80065a0 <__mcmp>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4628      	mov	r0, r5
 8005ebc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005ec0:	f000 f930 	bl	8006124 <_Bfree>
 8005ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ec8:	9f08      	ldr	r7, [sp, #32]
 8005eca:	ea43 0102 	orr.w	r1, r3, r2
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed4:	d10d      	bne.n	8005ef2 <_dtoa_r+0xa82>
 8005ed6:	2b39      	cmp	r3, #57	; 0x39
 8005ed8:	d029      	beq.n	8005f2e <_dtoa_r+0xabe>
 8005eda:	f1b9 0f00 	cmp.w	r9, #0
 8005ede:	dd01      	ble.n	8005ee4 <_dtoa_r+0xa74>
 8005ee0:	9b06      	ldr	r3, [sp, #24]
 8005ee2:	3331      	adds	r3, #49	; 0x31
 8005ee4:	9a04      	ldr	r2, [sp, #16]
 8005ee6:	7013      	strb	r3, [r2, #0]
 8005ee8:	e776      	b.n	8005dd8 <_dtoa_r+0x968>
 8005eea:	4630      	mov	r0, r6
 8005eec:	e7b9      	b.n	8005e62 <_dtoa_r+0x9f2>
 8005eee:	2201      	movs	r2, #1
 8005ef0:	e7e2      	b.n	8005eb8 <_dtoa_r+0xa48>
 8005ef2:	f1b9 0f00 	cmp.w	r9, #0
 8005ef6:	db06      	blt.n	8005f06 <_dtoa_r+0xa96>
 8005ef8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005efa:	ea41 0909 	orr.w	r9, r1, r9
 8005efe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f00:	ea59 0101 	orrs.w	r1, r9, r1
 8005f04:	d120      	bne.n	8005f48 <_dtoa_r+0xad8>
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	ddec      	ble.n	8005ee4 <_dtoa_r+0xa74>
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4628      	mov	r0, r5
 8005f10:	9308      	str	r3, [sp, #32]
 8005f12:	f000 fad5 	bl	80064c0 <__lshift>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4683      	mov	fp, r0
 8005f1a:	f000 fb41 	bl	80065a0 <__mcmp>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	dc02      	bgt.n	8005f2a <_dtoa_r+0xaba>
 8005f24:	d1de      	bne.n	8005ee4 <_dtoa_r+0xa74>
 8005f26:	07da      	lsls	r2, r3, #31
 8005f28:	d5dc      	bpl.n	8005ee4 <_dtoa_r+0xa74>
 8005f2a:	2b39      	cmp	r3, #57	; 0x39
 8005f2c:	d1d8      	bne.n	8005ee0 <_dtoa_r+0xa70>
 8005f2e:	2339      	movs	r3, #57	; 0x39
 8005f30:	9a04      	ldr	r2, [sp, #16]
 8005f32:	7013      	strb	r3, [r2, #0]
 8005f34:	463b      	mov	r3, r7
 8005f36:	461f      	mov	r7, r3
 8005f38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	2a39      	cmp	r2, #57	; 0x39
 8005f40:	d050      	beq.n	8005fe4 <_dtoa_r+0xb74>
 8005f42:	3201      	adds	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e747      	b.n	8005dd8 <_dtoa_r+0x968>
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	dd03      	ble.n	8005f54 <_dtoa_r+0xae4>
 8005f4c:	2b39      	cmp	r3, #57	; 0x39
 8005f4e:	d0ee      	beq.n	8005f2e <_dtoa_r+0xabe>
 8005f50:	3301      	adds	r3, #1
 8005f52:	e7c7      	b.n	8005ee4 <_dtoa_r+0xa74>
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d02a      	beq.n	8005fb6 <_dtoa_r+0xb46>
 8005f60:	4659      	mov	r1, fp
 8005f62:	2300      	movs	r3, #0
 8005f64:	220a      	movs	r2, #10
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f8fe 	bl	8006168 <__multadd>
 8005f6c:	45b0      	cmp	r8, r6
 8005f6e:	4683      	mov	fp, r0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f04f 020a 	mov.w	r2, #10
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	d107      	bne.n	8005f8e <_dtoa_r+0xb1e>
 8005f7e:	f000 f8f3 	bl	8006168 <__multadd>
 8005f82:	4680      	mov	r8, r0
 8005f84:	4606      	mov	r6, r0
 8005f86:	9b08      	ldr	r3, [sp, #32]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	9308      	str	r3, [sp, #32]
 8005f8c:	e775      	b.n	8005e7a <_dtoa_r+0xa0a>
 8005f8e:	f000 f8eb 	bl	8006168 <__multadd>
 8005f92:	4631      	mov	r1, r6
 8005f94:	4680      	mov	r8, r0
 8005f96:	2300      	movs	r3, #0
 8005f98:	220a      	movs	r2, #10
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 f8e4 	bl	8006168 <__multadd>
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	e7f0      	b.n	8005f86 <_dtoa_r+0xb16>
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	bfcc      	ite	gt
 8005faa:	464f      	movgt	r7, r9
 8005fac:	2701      	movle	r7, #1
 8005fae:	f04f 0800 	mov.w	r8, #0
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	4417      	add	r7, r2
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4628      	mov	r0, r5
 8005fbc:	9308      	str	r3, [sp, #32]
 8005fbe:	f000 fa7f 	bl	80064c0 <__lshift>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4683      	mov	fp, r0
 8005fc6:	f000 faeb 	bl	80065a0 <__mcmp>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	dcb2      	bgt.n	8005f34 <_dtoa_r+0xac4>
 8005fce:	d102      	bne.n	8005fd6 <_dtoa_r+0xb66>
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	07db      	lsls	r3, r3, #31
 8005fd4:	d4ae      	bmi.n	8005f34 <_dtoa_r+0xac4>
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	461f      	mov	r7, r3
 8005fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fde:	2a30      	cmp	r2, #48	; 0x30
 8005fe0:	d0fa      	beq.n	8005fd8 <_dtoa_r+0xb68>
 8005fe2:	e6f9      	b.n	8005dd8 <_dtoa_r+0x968>
 8005fe4:	9a03      	ldr	r2, [sp, #12]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d1a5      	bne.n	8005f36 <_dtoa_r+0xac6>
 8005fea:	2331      	movs	r3, #49	; 0x31
 8005fec:	f10a 0a01 	add.w	sl, sl, #1
 8005ff0:	e779      	b.n	8005ee6 <_dtoa_r+0xa76>
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <_dtoa_r+0xbd4>)
 8005ff4:	f7ff baa8 	b.w	8005548 <_dtoa_r+0xd8>
 8005ff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f47f aa81 	bne.w	8005502 <_dtoa_r+0x92>
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <_dtoa_r+0xbd8>)
 8006002:	f7ff baa1 	b.w	8005548 <_dtoa_r+0xd8>
 8006006:	f1b9 0f00 	cmp.w	r9, #0
 800600a:	dc03      	bgt.n	8006014 <_dtoa_r+0xba4>
 800600c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600e:	2b02      	cmp	r3, #2
 8006010:	f73f aecb 	bgt.w	8005daa <_dtoa_r+0x93a>
 8006014:	9f03      	ldr	r7, [sp, #12]
 8006016:	4621      	mov	r1, r4
 8006018:	4658      	mov	r0, fp
 800601a:	f7ff f99d 	bl	8005358 <quorem>
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006024:	f807 3b01 	strb.w	r3, [r7], #1
 8006028:	1aba      	subs	r2, r7, r2
 800602a:	4591      	cmp	r9, r2
 800602c:	ddba      	ble.n	8005fa4 <_dtoa_r+0xb34>
 800602e:	4659      	mov	r1, fp
 8006030:	2300      	movs	r3, #0
 8006032:	220a      	movs	r2, #10
 8006034:	4628      	mov	r0, r5
 8006036:	f000 f897 	bl	8006168 <__multadd>
 800603a:	4683      	mov	fp, r0
 800603c:	e7eb      	b.n	8006016 <_dtoa_r+0xba6>
 800603e:	bf00      	nop
 8006040:	080075cf 	.word	0x080075cf
 8006044:	0800752c 	.word	0x0800752c
 8006048:	08007550 	.word	0x08007550

0800604c <_localeconv_r>:
 800604c:	4800      	ldr	r0, [pc, #0]	; (8006050 <_localeconv_r+0x4>)
 800604e:	4770      	bx	lr
 8006050:	20000160 	.word	0x20000160

08006054 <memchr>:
 8006054:	4603      	mov	r3, r0
 8006056:	b510      	push	{r4, lr}
 8006058:	b2c9      	uxtb	r1, r1
 800605a:	4402      	add	r2, r0
 800605c:	4293      	cmp	r3, r2
 800605e:	4618      	mov	r0, r3
 8006060:	d101      	bne.n	8006066 <memchr+0x12>
 8006062:	2000      	movs	r0, #0
 8006064:	e003      	b.n	800606e <memchr+0x1a>
 8006066:	7804      	ldrb	r4, [r0, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	428c      	cmp	r4, r1
 800606c:	d1f6      	bne.n	800605c <memchr+0x8>
 800606e:	bd10      	pop	{r4, pc}

08006070 <memcpy>:
 8006070:	440a      	add	r2, r1
 8006072:	4291      	cmp	r1, r2
 8006074:	f100 33ff 	add.w	r3, r0, #4294967295
 8006078:	d100      	bne.n	800607c <memcpy+0xc>
 800607a:	4770      	bx	lr
 800607c:	b510      	push	{r4, lr}
 800607e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006082:	4291      	cmp	r1, r2
 8006084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006088:	d1f9      	bne.n	800607e <memcpy+0xe>
 800608a:	bd10      	pop	{r4, pc}

0800608c <__malloc_lock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_lock+0x8>)
 800608e:	f000 bbd0 	b.w	8006832 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	20000290 	.word	0x20000290

08006098 <__malloc_unlock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_unlock+0x8>)
 800609a:	f000 bbcb 	b.w	8006834 <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	20000290 	.word	0x20000290

080060a4 <_Balloc>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	b976      	cbnz	r6, 80060cc <_Balloc+0x28>
 80060ae:	2010      	movs	r0, #16
 80060b0:	f7fe fbf6 	bl	80048a0 <malloc>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6260      	str	r0, [r4, #36]	; 0x24
 80060b8:	b920      	cbnz	r0, 80060c4 <_Balloc+0x20>
 80060ba:	2166      	movs	r1, #102	; 0x66
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <_Balloc+0x78>)
 80060be:	4818      	ldr	r0, [pc, #96]	; (8006120 <_Balloc+0x7c>)
 80060c0:	f000 fb86 	bl	80067d0 <__assert_func>
 80060c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060c8:	6006      	str	r6, [r0, #0]
 80060ca:	60c6      	str	r6, [r0, #12]
 80060cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060ce:	68f3      	ldr	r3, [r6, #12]
 80060d0:	b183      	cbz	r3, 80060f4 <_Balloc+0x50>
 80060d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060da:	b9b8      	cbnz	r0, 800610c <_Balloc+0x68>
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f605 	lsl.w	r6, r1, r5
 80060e2:	1d72      	adds	r2, r6, #5
 80060e4:	4620      	mov	r0, r4
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	f000 fb5e 	bl	80067a8 <_calloc_r>
 80060ec:	b160      	cbz	r0, 8006108 <_Balloc+0x64>
 80060ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060f2:	e00e      	b.n	8006112 <_Balloc+0x6e>
 80060f4:	2221      	movs	r2, #33	; 0x21
 80060f6:	2104      	movs	r1, #4
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fb55 	bl	80067a8 <_calloc_r>
 80060fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006100:	60f0      	str	r0, [r6, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e4      	bne.n	80060d2 <_Balloc+0x2e>
 8006108:	2000      	movs	r0, #0
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	6802      	ldr	r2, [r0, #0]
 800610e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006112:	2300      	movs	r3, #0
 8006114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006118:	e7f7      	b.n	800610a <_Balloc+0x66>
 800611a:	bf00      	nop
 800611c:	0800755d 	.word	0x0800755d
 8006120:	080075e0 	.word	0x080075e0

08006124 <_Bfree>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006128:	4605      	mov	r5, r0
 800612a:	460c      	mov	r4, r1
 800612c:	b976      	cbnz	r6, 800614c <_Bfree+0x28>
 800612e:	2010      	movs	r0, #16
 8006130:	f7fe fbb6 	bl	80048a0 <malloc>
 8006134:	4602      	mov	r2, r0
 8006136:	6268      	str	r0, [r5, #36]	; 0x24
 8006138:	b920      	cbnz	r0, 8006144 <_Bfree+0x20>
 800613a:	218a      	movs	r1, #138	; 0x8a
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <_Bfree+0x3c>)
 800613e:	4809      	ldr	r0, [pc, #36]	; (8006164 <_Bfree+0x40>)
 8006140:	f000 fb46 	bl	80067d0 <__assert_func>
 8006144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006148:	6006      	str	r6, [r0, #0]
 800614a:	60c6      	str	r6, [r0, #12]
 800614c:	b13c      	cbz	r4, 800615e <_Bfree+0x3a>
 800614e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006150:	6862      	ldr	r2, [r4, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006158:	6021      	str	r1, [r4, #0]
 800615a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	0800755d 	.word	0x0800755d
 8006164:	080075e0 	.word	0x080075e0

08006168 <__multadd>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	4607      	mov	r7, r0
 800616e:	460c      	mov	r4, r1
 8006170:	461e      	mov	r6, r3
 8006172:	2000      	movs	r0, #0
 8006174:	690d      	ldr	r5, [r1, #16]
 8006176:	f101 0c14 	add.w	ip, r1, #20
 800617a:	f8dc 3000 	ldr.w	r3, [ip]
 800617e:	3001      	adds	r0, #1
 8006180:	b299      	uxth	r1, r3
 8006182:	fb02 6101 	mla	r1, r2, r1, r6
 8006186:	0c1e      	lsrs	r6, r3, #16
 8006188:	0c0b      	lsrs	r3, r1, #16
 800618a:	fb02 3306 	mla	r3, r2, r6, r3
 800618e:	b289      	uxth	r1, r1
 8006190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006194:	4285      	cmp	r5, r0
 8006196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800619a:	f84c 1b04 	str.w	r1, [ip], #4
 800619e:	dcec      	bgt.n	800617a <__multadd+0x12>
 80061a0:	b30e      	cbz	r6, 80061e6 <__multadd+0x7e>
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dc19      	bgt.n	80061dc <__multadd+0x74>
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4638      	mov	r0, r7
 80061ac:	3101      	adds	r1, #1
 80061ae:	f7ff ff79 	bl	80060a4 <_Balloc>
 80061b2:	4680      	mov	r8, r0
 80061b4:	b928      	cbnz	r0, 80061c2 <__multadd+0x5a>
 80061b6:	4602      	mov	r2, r0
 80061b8:	21b5      	movs	r1, #181	; 0xb5
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <__multadd+0x84>)
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <__multadd+0x88>)
 80061be:	f000 fb07 	bl	80067d0 <__assert_func>
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	f104 010c 	add.w	r1, r4, #12
 80061c8:	3202      	adds	r2, #2
 80061ca:	0092      	lsls	r2, r2, #2
 80061cc:	300c      	adds	r0, #12
 80061ce:	f7ff ff4f 	bl	8006070 <memcpy>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ffa5 	bl	8006124 <_Bfree>
 80061da:	4644      	mov	r4, r8
 80061dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061e0:	3501      	adds	r5, #1
 80061e2:	615e      	str	r6, [r3, #20]
 80061e4:	6125      	str	r5, [r4, #16]
 80061e6:	4620      	mov	r0, r4
 80061e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ec:	080075cf 	.word	0x080075cf
 80061f0:	080075e0 	.word	0x080075e0

080061f4 <__hi0bits>:
 80061f4:	0c02      	lsrs	r2, r0, #16
 80061f6:	0412      	lsls	r2, r2, #16
 80061f8:	4603      	mov	r3, r0
 80061fa:	b9ca      	cbnz	r2, 8006230 <__hi0bits+0x3c>
 80061fc:	0403      	lsls	r3, r0, #16
 80061fe:	2010      	movs	r0, #16
 8006200:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006204:	bf04      	itt	eq
 8006206:	021b      	lsleq	r3, r3, #8
 8006208:	3008      	addeq	r0, #8
 800620a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800620e:	bf04      	itt	eq
 8006210:	011b      	lsleq	r3, r3, #4
 8006212:	3004      	addeq	r0, #4
 8006214:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006218:	bf04      	itt	eq
 800621a:	009b      	lsleq	r3, r3, #2
 800621c:	3002      	addeq	r0, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	db05      	blt.n	800622e <__hi0bits+0x3a>
 8006222:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006226:	f100 0001 	add.w	r0, r0, #1
 800622a:	bf08      	it	eq
 800622c:	2020      	moveq	r0, #32
 800622e:	4770      	bx	lr
 8006230:	2000      	movs	r0, #0
 8006232:	e7e5      	b.n	8006200 <__hi0bits+0xc>

08006234 <__lo0bits>:
 8006234:	6803      	ldr	r3, [r0, #0]
 8006236:	4602      	mov	r2, r0
 8006238:	f013 0007 	ands.w	r0, r3, #7
 800623c:	d00b      	beq.n	8006256 <__lo0bits+0x22>
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	d421      	bmi.n	8006286 <__lo0bits+0x52>
 8006242:	0798      	lsls	r0, r3, #30
 8006244:	bf49      	itett	mi
 8006246:	085b      	lsrmi	r3, r3, #1
 8006248:	089b      	lsrpl	r3, r3, #2
 800624a:	2001      	movmi	r0, #1
 800624c:	6013      	strmi	r3, [r2, #0]
 800624e:	bf5c      	itt	pl
 8006250:	2002      	movpl	r0, #2
 8006252:	6013      	strpl	r3, [r2, #0]
 8006254:	4770      	bx	lr
 8006256:	b299      	uxth	r1, r3
 8006258:	b909      	cbnz	r1, 800625e <__lo0bits+0x2a>
 800625a:	2010      	movs	r0, #16
 800625c:	0c1b      	lsrs	r3, r3, #16
 800625e:	b2d9      	uxtb	r1, r3
 8006260:	b909      	cbnz	r1, 8006266 <__lo0bits+0x32>
 8006262:	3008      	adds	r0, #8
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	0719      	lsls	r1, r3, #28
 8006268:	bf04      	itt	eq
 800626a:	091b      	lsreq	r3, r3, #4
 800626c:	3004      	addeq	r0, #4
 800626e:	0799      	lsls	r1, r3, #30
 8006270:	bf04      	itt	eq
 8006272:	089b      	lsreq	r3, r3, #2
 8006274:	3002      	addeq	r0, #2
 8006276:	07d9      	lsls	r1, r3, #31
 8006278:	d403      	bmi.n	8006282 <__lo0bits+0x4e>
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f100 0001 	add.w	r0, r0, #1
 8006280:	d003      	beq.n	800628a <__lo0bits+0x56>
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	4770      	bx	lr
 8006286:	2000      	movs	r0, #0
 8006288:	4770      	bx	lr
 800628a:	2020      	movs	r0, #32
 800628c:	4770      	bx	lr
	...

08006290 <__i2b>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	2101      	movs	r1, #1
 8006296:	f7ff ff05 	bl	80060a4 <_Balloc>
 800629a:	4602      	mov	r2, r0
 800629c:	b928      	cbnz	r0, 80062aa <__i2b+0x1a>
 800629e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062a2:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <__i2b+0x24>)
 80062a4:	4804      	ldr	r0, [pc, #16]	; (80062b8 <__i2b+0x28>)
 80062a6:	f000 fa93 	bl	80067d0 <__assert_func>
 80062aa:	2301      	movs	r3, #1
 80062ac:	6144      	str	r4, [r0, #20]
 80062ae:	6103      	str	r3, [r0, #16]
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	080075cf 	.word	0x080075cf
 80062b8:	080075e0 	.word	0x080075e0

080062bc <__multiply>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	4691      	mov	r9, r2
 80062c2:	690a      	ldr	r2, [r1, #16]
 80062c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062c8:	460c      	mov	r4, r1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bfbe      	ittt	lt
 80062ce:	460b      	movlt	r3, r1
 80062d0:	464c      	movlt	r4, r9
 80062d2:	4699      	movlt	r9, r3
 80062d4:	6927      	ldr	r7, [r4, #16]
 80062d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	6861      	ldr	r1, [r4, #4]
 80062de:	eb07 060a 	add.w	r6, r7, sl
 80062e2:	42b3      	cmp	r3, r6
 80062e4:	b085      	sub	sp, #20
 80062e6:	bfb8      	it	lt
 80062e8:	3101      	addlt	r1, #1
 80062ea:	f7ff fedb 	bl	80060a4 <_Balloc>
 80062ee:	b930      	cbnz	r0, 80062fe <__multiply+0x42>
 80062f0:	4602      	mov	r2, r0
 80062f2:	f240 115d 	movw	r1, #349	; 0x15d
 80062f6:	4b43      	ldr	r3, [pc, #268]	; (8006404 <__multiply+0x148>)
 80062f8:	4843      	ldr	r0, [pc, #268]	; (8006408 <__multiply+0x14c>)
 80062fa:	f000 fa69 	bl	80067d0 <__assert_func>
 80062fe:	f100 0514 	add.w	r5, r0, #20
 8006302:	462b      	mov	r3, r5
 8006304:	2200      	movs	r2, #0
 8006306:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800630a:	4543      	cmp	r3, r8
 800630c:	d321      	bcc.n	8006352 <__multiply+0x96>
 800630e:	f104 0314 	add.w	r3, r4, #20
 8006312:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006316:	f109 0314 	add.w	r3, r9, #20
 800631a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800631e:	9202      	str	r2, [sp, #8]
 8006320:	1b3a      	subs	r2, r7, r4
 8006322:	3a15      	subs	r2, #21
 8006324:	f022 0203 	bic.w	r2, r2, #3
 8006328:	3204      	adds	r2, #4
 800632a:	f104 0115 	add.w	r1, r4, #21
 800632e:	428f      	cmp	r7, r1
 8006330:	bf38      	it	cc
 8006332:	2204      	movcc	r2, #4
 8006334:	9201      	str	r2, [sp, #4]
 8006336:	9a02      	ldr	r2, [sp, #8]
 8006338:	9303      	str	r3, [sp, #12]
 800633a:	429a      	cmp	r2, r3
 800633c:	d80c      	bhi.n	8006358 <__multiply+0x9c>
 800633e:	2e00      	cmp	r6, #0
 8006340:	dd03      	ble.n	800634a <__multiply+0x8e>
 8006342:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006346:	2b00      	cmp	r3, #0
 8006348:	d059      	beq.n	80063fe <__multiply+0x142>
 800634a:	6106      	str	r6, [r0, #16]
 800634c:	b005      	add	sp, #20
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	f843 2b04 	str.w	r2, [r3], #4
 8006356:	e7d8      	b.n	800630a <__multiply+0x4e>
 8006358:	f8b3 a000 	ldrh.w	sl, [r3]
 800635c:	f1ba 0f00 	cmp.w	sl, #0
 8006360:	d023      	beq.n	80063aa <__multiply+0xee>
 8006362:	46a9      	mov	r9, r5
 8006364:	f04f 0c00 	mov.w	ip, #0
 8006368:	f104 0e14 	add.w	lr, r4, #20
 800636c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006370:	f8d9 1000 	ldr.w	r1, [r9]
 8006374:	fa1f fb82 	uxth.w	fp, r2
 8006378:	b289      	uxth	r1, r1
 800637a:	fb0a 110b 	mla	r1, sl, fp, r1
 800637e:	4461      	add	r1, ip
 8006380:	f8d9 c000 	ldr.w	ip, [r9]
 8006384:	0c12      	lsrs	r2, r2, #16
 8006386:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800638a:	fb0a c202 	mla	r2, sl, r2, ip
 800638e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006392:	b289      	uxth	r1, r1
 8006394:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006398:	4577      	cmp	r7, lr
 800639a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800639e:	f849 1b04 	str.w	r1, [r9], #4
 80063a2:	d8e3      	bhi.n	800636c <__multiply+0xb0>
 80063a4:	9a01      	ldr	r2, [sp, #4]
 80063a6:	f845 c002 	str.w	ip, [r5, r2]
 80063aa:	9a03      	ldr	r2, [sp, #12]
 80063ac:	3304      	adds	r3, #4
 80063ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063b2:	f1b9 0f00 	cmp.w	r9, #0
 80063b6:	d020      	beq.n	80063fa <__multiply+0x13e>
 80063b8:	46ae      	mov	lr, r5
 80063ba:	f04f 0a00 	mov.w	sl, #0
 80063be:	6829      	ldr	r1, [r5, #0]
 80063c0:	f104 0c14 	add.w	ip, r4, #20
 80063c4:	f8bc b000 	ldrh.w	fp, [ip]
 80063c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063cc:	b289      	uxth	r1, r1
 80063ce:	fb09 220b 	mla	r2, r9, fp, r2
 80063d2:	4492      	add	sl, r2
 80063d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063d8:	f84e 1b04 	str.w	r1, [lr], #4
 80063dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063e0:	f8be 1000 	ldrh.w	r1, [lr]
 80063e4:	0c12      	lsrs	r2, r2, #16
 80063e6:	fb09 1102 	mla	r1, r9, r2, r1
 80063ea:	4567      	cmp	r7, ip
 80063ec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063f4:	d8e6      	bhi.n	80063c4 <__multiply+0x108>
 80063f6:	9a01      	ldr	r2, [sp, #4]
 80063f8:	50a9      	str	r1, [r5, r2]
 80063fa:	3504      	adds	r5, #4
 80063fc:	e79b      	b.n	8006336 <__multiply+0x7a>
 80063fe:	3e01      	subs	r6, #1
 8006400:	e79d      	b.n	800633e <__multiply+0x82>
 8006402:	bf00      	nop
 8006404:	080075cf 	.word	0x080075cf
 8006408:	080075e0 	.word	0x080075e0

0800640c <__pow5mult>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	4615      	mov	r5, r2
 8006412:	f012 0203 	ands.w	r2, r2, #3
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	d007      	beq.n	800642c <__pow5mult+0x20>
 800641c:	4c25      	ldr	r4, [pc, #148]	; (80064b4 <__pow5mult+0xa8>)
 800641e:	3a01      	subs	r2, #1
 8006420:	2300      	movs	r3, #0
 8006422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006426:	f7ff fe9f 	bl	8006168 <__multadd>
 800642a:	4607      	mov	r7, r0
 800642c:	10ad      	asrs	r5, r5, #2
 800642e:	d03d      	beq.n	80064ac <__pow5mult+0xa0>
 8006430:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006432:	b97c      	cbnz	r4, 8006454 <__pow5mult+0x48>
 8006434:	2010      	movs	r0, #16
 8006436:	f7fe fa33 	bl	80048a0 <malloc>
 800643a:	4602      	mov	r2, r0
 800643c:	6270      	str	r0, [r6, #36]	; 0x24
 800643e:	b928      	cbnz	r0, 800644c <__pow5mult+0x40>
 8006440:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006444:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <__pow5mult+0xac>)
 8006446:	481d      	ldr	r0, [pc, #116]	; (80064bc <__pow5mult+0xb0>)
 8006448:	f000 f9c2 	bl	80067d0 <__assert_func>
 800644c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006450:	6004      	str	r4, [r0, #0]
 8006452:	60c4      	str	r4, [r0, #12]
 8006454:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800645c:	b94c      	cbnz	r4, 8006472 <__pow5mult+0x66>
 800645e:	f240 2171 	movw	r1, #625	; 0x271
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ff14 	bl	8006290 <__i2b>
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	f04f 0900 	mov.w	r9, #0
 8006476:	07eb      	lsls	r3, r5, #31
 8006478:	d50a      	bpl.n	8006490 <__pow5mult+0x84>
 800647a:	4639      	mov	r1, r7
 800647c:	4622      	mov	r2, r4
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff ff1c 	bl	80062bc <__multiply>
 8006484:	4680      	mov	r8, r0
 8006486:	4639      	mov	r1, r7
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff fe4b 	bl	8006124 <_Bfree>
 800648e:	4647      	mov	r7, r8
 8006490:	106d      	asrs	r5, r5, #1
 8006492:	d00b      	beq.n	80064ac <__pow5mult+0xa0>
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	b938      	cbnz	r0, 80064a8 <__pow5mult+0x9c>
 8006498:	4622      	mov	r2, r4
 800649a:	4621      	mov	r1, r4
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff ff0d 	bl	80062bc <__multiply>
 80064a2:	6020      	str	r0, [r4, #0]
 80064a4:	f8c0 9000 	str.w	r9, [r0]
 80064a8:	4604      	mov	r4, r0
 80064aa:	e7e4      	b.n	8006476 <__pow5mult+0x6a>
 80064ac:	4638      	mov	r0, r7
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	bf00      	nop
 80064b4:	08007730 	.word	0x08007730
 80064b8:	0800755d 	.word	0x0800755d
 80064bc:	080075e0 	.word	0x080075e0

080064c0 <__lshift>:
 80064c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	460c      	mov	r4, r1
 80064c6:	4607      	mov	r7, r0
 80064c8:	4691      	mov	r9, r2
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	6849      	ldr	r1, [r1, #4]
 80064ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064d8:	f108 0601 	add.w	r6, r8, #1
 80064dc:	42b3      	cmp	r3, r6
 80064de:	db0b      	blt.n	80064f8 <__lshift+0x38>
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff fddf 	bl	80060a4 <_Balloc>
 80064e6:	4605      	mov	r5, r0
 80064e8:	b948      	cbnz	r0, 80064fe <__lshift+0x3e>
 80064ea:	4602      	mov	r2, r0
 80064ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064f0:	4b29      	ldr	r3, [pc, #164]	; (8006598 <__lshift+0xd8>)
 80064f2:	482a      	ldr	r0, [pc, #168]	; (800659c <__lshift+0xdc>)
 80064f4:	f000 f96c 	bl	80067d0 <__assert_func>
 80064f8:	3101      	adds	r1, #1
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	e7ee      	b.n	80064dc <__lshift+0x1c>
 80064fe:	2300      	movs	r3, #0
 8006500:	f100 0114 	add.w	r1, r0, #20
 8006504:	f100 0210 	add.w	r2, r0, #16
 8006508:	4618      	mov	r0, r3
 800650a:	4553      	cmp	r3, sl
 800650c:	db37      	blt.n	800657e <__lshift+0xbe>
 800650e:	6920      	ldr	r0, [r4, #16]
 8006510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006514:	f104 0314 	add.w	r3, r4, #20
 8006518:	f019 091f 	ands.w	r9, r9, #31
 800651c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006520:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006524:	d02f      	beq.n	8006586 <__lshift+0xc6>
 8006526:	468a      	mov	sl, r1
 8006528:	f04f 0c00 	mov.w	ip, #0
 800652c:	f1c9 0e20 	rsb	lr, r9, #32
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	fa02 f209 	lsl.w	r2, r2, r9
 8006536:	ea42 020c 	orr.w	r2, r2, ip
 800653a:	f84a 2b04 	str.w	r2, [sl], #4
 800653e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006542:	4298      	cmp	r0, r3
 8006544:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006548:	d8f2      	bhi.n	8006530 <__lshift+0x70>
 800654a:	1b03      	subs	r3, r0, r4
 800654c:	3b15      	subs	r3, #21
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	3304      	adds	r3, #4
 8006554:	f104 0215 	add.w	r2, r4, #21
 8006558:	4290      	cmp	r0, r2
 800655a:	bf38      	it	cc
 800655c:	2304      	movcc	r3, #4
 800655e:	f841 c003 	str.w	ip, [r1, r3]
 8006562:	f1bc 0f00 	cmp.w	ip, #0
 8006566:	d001      	beq.n	800656c <__lshift+0xac>
 8006568:	f108 0602 	add.w	r6, r8, #2
 800656c:	3e01      	subs	r6, #1
 800656e:	4638      	mov	r0, r7
 8006570:	4621      	mov	r1, r4
 8006572:	612e      	str	r6, [r5, #16]
 8006574:	f7ff fdd6 	bl	8006124 <_Bfree>
 8006578:	4628      	mov	r0, r5
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006582:	3301      	adds	r3, #1
 8006584:	e7c1      	b.n	800650a <__lshift+0x4a>
 8006586:	3904      	subs	r1, #4
 8006588:	f853 2b04 	ldr.w	r2, [r3], #4
 800658c:	4298      	cmp	r0, r3
 800658e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006592:	d8f9      	bhi.n	8006588 <__lshift+0xc8>
 8006594:	e7ea      	b.n	800656c <__lshift+0xac>
 8006596:	bf00      	nop
 8006598:	080075cf 	.word	0x080075cf
 800659c:	080075e0 	.word	0x080075e0

080065a0 <__mcmp>:
 80065a0:	4603      	mov	r3, r0
 80065a2:	690a      	ldr	r2, [r1, #16]
 80065a4:	6900      	ldr	r0, [r0, #16]
 80065a6:	b530      	push	{r4, r5, lr}
 80065a8:	1a80      	subs	r0, r0, r2
 80065aa:	d10d      	bne.n	80065c8 <__mcmp+0x28>
 80065ac:	3314      	adds	r3, #20
 80065ae:	3114      	adds	r1, #20
 80065b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065c0:	4295      	cmp	r5, r2
 80065c2:	d002      	beq.n	80065ca <__mcmp+0x2a>
 80065c4:	d304      	bcc.n	80065d0 <__mcmp+0x30>
 80065c6:	2001      	movs	r0, #1
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	d3f4      	bcc.n	80065b8 <__mcmp+0x18>
 80065ce:	e7fb      	b.n	80065c8 <__mcmp+0x28>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	e7f8      	b.n	80065c8 <__mcmp+0x28>
	...

080065d8 <__mdiff>:
 80065d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	460d      	mov	r5, r1
 80065de:	4607      	mov	r7, r0
 80065e0:	4611      	mov	r1, r2
 80065e2:	4628      	mov	r0, r5
 80065e4:	4614      	mov	r4, r2
 80065e6:	f7ff ffdb 	bl	80065a0 <__mcmp>
 80065ea:	1e06      	subs	r6, r0, #0
 80065ec:	d111      	bne.n	8006612 <__mdiff+0x3a>
 80065ee:	4631      	mov	r1, r6
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff fd57 	bl	80060a4 <_Balloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	b928      	cbnz	r0, 8006606 <__mdiff+0x2e>
 80065fa:	f240 2132 	movw	r1, #562	; 0x232
 80065fe:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <__mdiff+0x110>)
 8006600:	483a      	ldr	r0, [pc, #232]	; (80066ec <__mdiff+0x114>)
 8006602:	f000 f8e5 	bl	80067d0 <__assert_func>
 8006606:	2301      	movs	r3, #1
 8006608:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800660c:	4610      	mov	r0, r2
 800660e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	bfa4      	itt	ge
 8006614:	4623      	movge	r3, r4
 8006616:	462c      	movge	r4, r5
 8006618:	4638      	mov	r0, r7
 800661a:	6861      	ldr	r1, [r4, #4]
 800661c:	bfa6      	itte	ge
 800661e:	461d      	movge	r5, r3
 8006620:	2600      	movge	r6, #0
 8006622:	2601      	movlt	r6, #1
 8006624:	f7ff fd3e 	bl	80060a4 <_Balloc>
 8006628:	4602      	mov	r2, r0
 800662a:	b918      	cbnz	r0, 8006634 <__mdiff+0x5c>
 800662c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006630:	4b2d      	ldr	r3, [pc, #180]	; (80066e8 <__mdiff+0x110>)
 8006632:	e7e5      	b.n	8006600 <__mdiff+0x28>
 8006634:	f102 0814 	add.w	r8, r2, #20
 8006638:	46c2      	mov	sl, r8
 800663a:	f04f 0c00 	mov.w	ip, #0
 800663e:	6927      	ldr	r7, [r4, #16]
 8006640:	60c6      	str	r6, [r0, #12]
 8006642:	692e      	ldr	r6, [r5, #16]
 8006644:	f104 0014 	add.w	r0, r4, #20
 8006648:	f105 0914 	add.w	r9, r5, #20
 800664c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006654:	3410      	adds	r4, #16
 8006656:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800665a:	f859 3b04 	ldr.w	r3, [r9], #4
 800665e:	fa1f f18b 	uxth.w	r1, fp
 8006662:	448c      	add	ip, r1
 8006664:	b299      	uxth	r1, r3
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	ebac 0101 	sub.w	r1, ip, r1
 800666c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006670:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006674:	b289      	uxth	r1, r1
 8006676:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800667a:	454e      	cmp	r6, r9
 800667c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006680:	f84a 3b04 	str.w	r3, [sl], #4
 8006684:	d8e7      	bhi.n	8006656 <__mdiff+0x7e>
 8006686:	1b73      	subs	r3, r6, r5
 8006688:	3b15      	subs	r3, #21
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	3515      	adds	r5, #21
 8006690:	3304      	adds	r3, #4
 8006692:	42ae      	cmp	r6, r5
 8006694:	bf38      	it	cc
 8006696:	2304      	movcc	r3, #4
 8006698:	4418      	add	r0, r3
 800669a:	4443      	add	r3, r8
 800669c:	461e      	mov	r6, r3
 800669e:	4605      	mov	r5, r0
 80066a0:	4575      	cmp	r5, lr
 80066a2:	d30e      	bcc.n	80066c2 <__mdiff+0xea>
 80066a4:	f10e 0103 	add.w	r1, lr, #3
 80066a8:	1a09      	subs	r1, r1, r0
 80066aa:	f021 0103 	bic.w	r1, r1, #3
 80066ae:	3803      	subs	r0, #3
 80066b0:	4586      	cmp	lr, r0
 80066b2:	bf38      	it	cc
 80066b4:	2100      	movcc	r1, #0
 80066b6:	4419      	add	r1, r3
 80066b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066bc:	b18b      	cbz	r3, 80066e2 <__mdiff+0x10a>
 80066be:	6117      	str	r7, [r2, #16]
 80066c0:	e7a4      	b.n	800660c <__mdiff+0x34>
 80066c2:	f855 8b04 	ldr.w	r8, [r5], #4
 80066c6:	fa1f f188 	uxth.w	r1, r8
 80066ca:	4461      	add	r1, ip
 80066cc:	140c      	asrs	r4, r1, #16
 80066ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066d2:	b289      	uxth	r1, r1
 80066d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066d8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80066dc:	f846 1b04 	str.w	r1, [r6], #4
 80066e0:	e7de      	b.n	80066a0 <__mdiff+0xc8>
 80066e2:	3f01      	subs	r7, #1
 80066e4:	e7e8      	b.n	80066b8 <__mdiff+0xe0>
 80066e6:	bf00      	nop
 80066e8:	080075cf 	.word	0x080075cf
 80066ec:	080075e0 	.word	0x080075e0

080066f0 <__d2b>:
 80066f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066f4:	2101      	movs	r1, #1
 80066f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066fa:	4690      	mov	r8, r2
 80066fc:	461d      	mov	r5, r3
 80066fe:	f7ff fcd1 	bl	80060a4 <_Balloc>
 8006702:	4604      	mov	r4, r0
 8006704:	b930      	cbnz	r0, 8006714 <__d2b+0x24>
 8006706:	4602      	mov	r2, r0
 8006708:	f240 310a 	movw	r1, #778	; 0x30a
 800670c:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <__d2b+0xb0>)
 800670e:	4825      	ldr	r0, [pc, #148]	; (80067a4 <__d2b+0xb4>)
 8006710:	f000 f85e 	bl	80067d0 <__assert_func>
 8006714:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006718:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800671c:	bb2d      	cbnz	r5, 800676a <__d2b+0x7a>
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	f1b8 0300 	subs.w	r3, r8, #0
 8006724:	d026      	beq.n	8006774 <__d2b+0x84>
 8006726:	4668      	mov	r0, sp
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	f7ff fd83 	bl	8006234 <__lo0bits>
 800672e:	9900      	ldr	r1, [sp, #0]
 8006730:	b1f0      	cbz	r0, 8006770 <__d2b+0x80>
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	f1c0 0320 	rsb	r3, r0, #32
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	430b      	orrs	r3, r1
 800673e:	40c2      	lsrs	r2, r0
 8006740:	6163      	str	r3, [r4, #20]
 8006742:	9201      	str	r2, [sp, #4]
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	bf14      	ite	ne
 800674a:	2102      	movne	r1, #2
 800674c:	2101      	moveq	r1, #1
 800674e:	61a3      	str	r3, [r4, #24]
 8006750:	6121      	str	r1, [r4, #16]
 8006752:	b1c5      	cbz	r5, 8006786 <__d2b+0x96>
 8006754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006758:	4405      	add	r5, r0
 800675a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800675e:	603d      	str	r5, [r7, #0]
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4620      	mov	r0, r4
 8006764:	b002      	add	sp, #8
 8006766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676e:	e7d6      	b.n	800671e <__d2b+0x2e>
 8006770:	6161      	str	r1, [r4, #20]
 8006772:	e7e7      	b.n	8006744 <__d2b+0x54>
 8006774:	a801      	add	r0, sp, #4
 8006776:	f7ff fd5d 	bl	8006234 <__lo0bits>
 800677a:	2101      	movs	r1, #1
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	6121      	str	r1, [r4, #16]
 8006780:	6163      	str	r3, [r4, #20]
 8006782:	3020      	adds	r0, #32
 8006784:	e7e5      	b.n	8006752 <__d2b+0x62>
 8006786:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800678a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800678e:	6038      	str	r0, [r7, #0]
 8006790:	6918      	ldr	r0, [r3, #16]
 8006792:	f7ff fd2f 	bl	80061f4 <__hi0bits>
 8006796:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800679a:	6031      	str	r1, [r6, #0]
 800679c:	e7e1      	b.n	8006762 <__d2b+0x72>
 800679e:	bf00      	nop
 80067a0:	080075cf 	.word	0x080075cf
 80067a4:	080075e0 	.word	0x080075e0

080067a8 <_calloc_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	fba1 5402 	umull	r5, r4, r1, r2
 80067ae:	b934      	cbnz	r4, 80067be <_calloc_r+0x16>
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fe f8ed 	bl	8004990 <_malloc_r>
 80067b6:	4606      	mov	r6, r0
 80067b8:	b928      	cbnz	r0, 80067c6 <_calloc_r+0x1e>
 80067ba:	4630      	mov	r0, r6
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	220c      	movs	r2, #12
 80067c0:	2600      	movs	r6, #0
 80067c2:	6002      	str	r2, [r0, #0]
 80067c4:	e7f9      	b.n	80067ba <_calloc_r+0x12>
 80067c6:	462a      	mov	r2, r5
 80067c8:	4621      	mov	r1, r4
 80067ca:	f7fe f871 	bl	80048b0 <memset>
 80067ce:	e7f4      	b.n	80067ba <_calloc_r+0x12>

080067d0 <__assert_func>:
 80067d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067d2:	4614      	mov	r4, r2
 80067d4:	461a      	mov	r2, r3
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <__assert_func+0x2c>)
 80067d8:	4605      	mov	r5, r0
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68d8      	ldr	r0, [r3, #12]
 80067de:	b14c      	cbz	r4, 80067f4 <__assert_func+0x24>
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <__assert_func+0x30>)
 80067e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067e6:	9100      	str	r1, [sp, #0]
 80067e8:	462b      	mov	r3, r5
 80067ea:	4906      	ldr	r1, [pc, #24]	; (8006804 <__assert_func+0x34>)
 80067ec:	f000 f80e 	bl	800680c <fiprintf>
 80067f0:	f000 fa58 	bl	8006ca4 <abort>
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <__assert_func+0x38>)
 80067f6:	461c      	mov	r4, r3
 80067f8:	e7f3      	b.n	80067e2 <__assert_func+0x12>
 80067fa:	bf00      	nop
 80067fc:	2000000c 	.word	0x2000000c
 8006800:	0800773c 	.word	0x0800773c
 8006804:	08007749 	.word	0x08007749
 8006808:	08007777 	.word	0x08007777

0800680c <fiprintf>:
 800680c:	b40e      	push	{r1, r2, r3}
 800680e:	b503      	push	{r0, r1, lr}
 8006810:	4601      	mov	r1, r0
 8006812:	ab03      	add	r3, sp, #12
 8006814:	4805      	ldr	r0, [pc, #20]	; (800682c <fiprintf+0x20>)
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	f000 f843 	bl	80068a8 <_vfiprintf_r>
 8006822:	b002      	add	sp, #8
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	2000000c 	.word	0x2000000c

08006830 <__retarget_lock_init_recursive>:
 8006830:	4770      	bx	lr

08006832 <__retarget_lock_acquire_recursive>:
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_release_recursive>:
 8006834:	4770      	bx	lr

08006836 <__ascii_mbtowc>:
 8006836:	b082      	sub	sp, #8
 8006838:	b901      	cbnz	r1, 800683c <__ascii_mbtowc+0x6>
 800683a:	a901      	add	r1, sp, #4
 800683c:	b142      	cbz	r2, 8006850 <__ascii_mbtowc+0x1a>
 800683e:	b14b      	cbz	r3, 8006854 <__ascii_mbtowc+0x1e>
 8006840:	7813      	ldrb	r3, [r2, #0]
 8006842:	600b      	str	r3, [r1, #0]
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	1e10      	subs	r0, r2, #0
 8006848:	bf18      	it	ne
 800684a:	2001      	movne	r0, #1
 800684c:	b002      	add	sp, #8
 800684e:	4770      	bx	lr
 8006850:	4610      	mov	r0, r2
 8006852:	e7fb      	b.n	800684c <__ascii_mbtowc+0x16>
 8006854:	f06f 0001 	mvn.w	r0, #1
 8006858:	e7f8      	b.n	800684c <__ascii_mbtowc+0x16>

0800685a <__sfputc_r>:
 800685a:	6893      	ldr	r3, [r2, #8]
 800685c:	b410      	push	{r4}
 800685e:	3b01      	subs	r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	6093      	str	r3, [r2, #8]
 8006864:	da07      	bge.n	8006876 <__sfputc_r+0x1c>
 8006866:	6994      	ldr	r4, [r2, #24]
 8006868:	42a3      	cmp	r3, r4
 800686a:	db01      	blt.n	8006870 <__sfputc_r+0x16>
 800686c:	290a      	cmp	r1, #10
 800686e:	d102      	bne.n	8006876 <__sfputc_r+0x1c>
 8006870:	bc10      	pop	{r4}
 8006872:	f000 b949 	b.w	8006b08 <__swbuf_r>
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	1c58      	adds	r0, r3, #1
 800687a:	6010      	str	r0, [r2, #0]
 800687c:	7019      	strb	r1, [r3, #0]
 800687e:	4608      	mov	r0, r1
 8006880:	bc10      	pop	{r4}
 8006882:	4770      	bx	lr

08006884 <__sfputs_r>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	4614      	mov	r4, r2
 800688c:	18d5      	adds	r5, r2, r3
 800688e:	42ac      	cmp	r4, r5
 8006890:	d101      	bne.n	8006896 <__sfputs_r+0x12>
 8006892:	2000      	movs	r0, #0
 8006894:	e007      	b.n	80068a6 <__sfputs_r+0x22>
 8006896:	463a      	mov	r2, r7
 8006898:	4630      	mov	r0, r6
 800689a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800689e:	f7ff ffdc 	bl	800685a <__sfputc_r>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d1f3      	bne.n	800688e <__sfputs_r+0xa>
 80068a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068a8 <_vfiprintf_r>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	460d      	mov	r5, r1
 80068ae:	4614      	mov	r4, r2
 80068b0:	4698      	mov	r8, r3
 80068b2:	4606      	mov	r6, r0
 80068b4:	b09d      	sub	sp, #116	; 0x74
 80068b6:	b118      	cbz	r0, 80068c0 <_vfiprintf_r+0x18>
 80068b8:	6983      	ldr	r3, [r0, #24]
 80068ba:	b90b      	cbnz	r3, 80068c0 <_vfiprintf_r+0x18>
 80068bc:	f000 fb10 	bl	8006ee0 <__sinit>
 80068c0:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <_vfiprintf_r+0x240>)
 80068c2:	429d      	cmp	r5, r3
 80068c4:	d11b      	bne.n	80068fe <_vfiprintf_r+0x56>
 80068c6:	6875      	ldr	r5, [r6, #4]
 80068c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ca:	07d9      	lsls	r1, r3, #31
 80068cc:	d405      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	059a      	lsls	r2, r3, #22
 80068d2:	d402      	bmi.n	80068da <_vfiprintf_r+0x32>
 80068d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d6:	f7ff ffac 	bl	8006832 <__retarget_lock_acquire_recursive>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	071b      	lsls	r3, r3, #28
 80068de:	d501      	bpl.n	80068e4 <_vfiprintf_r+0x3c>
 80068e0:	692b      	ldr	r3, [r5, #16]
 80068e2:	b9eb      	cbnz	r3, 8006920 <_vfiprintf_r+0x78>
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f96e 	bl	8006bc8 <__swsetup_r>
 80068ec:	b1c0      	cbz	r0, 8006920 <_vfiprintf_r+0x78>
 80068ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f0:	07dc      	lsls	r4, r3, #31
 80068f2:	d50e      	bpl.n	8006912 <_vfiprintf_r+0x6a>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	b01d      	add	sp, #116	; 0x74
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <_vfiprintf_r+0x244>)
 8006900:	429d      	cmp	r5, r3
 8006902:	d101      	bne.n	8006908 <_vfiprintf_r+0x60>
 8006904:	68b5      	ldr	r5, [r6, #8]
 8006906:	e7df      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006908:	4b79      	ldr	r3, [pc, #484]	; (8006af0 <_vfiprintf_r+0x248>)
 800690a:	429d      	cmp	r5, r3
 800690c:	bf08      	it	eq
 800690e:	68f5      	ldreq	r5, [r6, #12]
 8006910:	e7da      	b.n	80068c8 <_vfiprintf_r+0x20>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	0598      	lsls	r0, r3, #22
 8006916:	d4ed      	bmi.n	80068f4 <_vfiprintf_r+0x4c>
 8006918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800691a:	f7ff ff8b 	bl	8006834 <__retarget_lock_release_recursive>
 800691e:	e7e9      	b.n	80068f4 <_vfiprintf_r+0x4c>
 8006920:	2300      	movs	r3, #0
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	2320      	movs	r3, #32
 8006926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692a:	2330      	movs	r3, #48	; 0x30
 800692c:	f04f 0901 	mov.w	r9, #1
 8006930:	f8cd 800c 	str.w	r8, [sp, #12]
 8006934:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006af4 <_vfiprintf_r+0x24c>
 8006938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800693c:	4623      	mov	r3, r4
 800693e:	469a      	mov	sl, r3
 8006940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006944:	b10a      	cbz	r2, 800694a <_vfiprintf_r+0xa2>
 8006946:	2a25      	cmp	r2, #37	; 0x25
 8006948:	d1f9      	bne.n	800693e <_vfiprintf_r+0x96>
 800694a:	ebba 0b04 	subs.w	fp, sl, r4
 800694e:	d00b      	beq.n	8006968 <_vfiprintf_r+0xc0>
 8006950:	465b      	mov	r3, fp
 8006952:	4622      	mov	r2, r4
 8006954:	4629      	mov	r1, r5
 8006956:	4630      	mov	r0, r6
 8006958:	f7ff ff94 	bl	8006884 <__sfputs_r>
 800695c:	3001      	adds	r0, #1
 800695e:	f000 80aa 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006964:	445a      	add	r2, fp
 8006966:	9209      	str	r2, [sp, #36]	; 0x24
 8006968:	f89a 3000 	ldrb.w	r3, [sl]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80a2 	beq.w	8006ab6 <_vfiprintf_r+0x20e>
 8006972:	2300      	movs	r3, #0
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800697c:	f10a 0a01 	add.w	sl, sl, #1
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006988:	931a      	str	r3, [sp, #104]	; 0x68
 800698a:	4654      	mov	r4, sl
 800698c:	2205      	movs	r2, #5
 800698e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006992:	4858      	ldr	r0, [pc, #352]	; (8006af4 <_vfiprintf_r+0x24c>)
 8006994:	f7ff fb5e 	bl	8006054 <memchr>
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	b9d8      	cbnz	r0, 80069d4 <_vfiprintf_r+0x12c>
 800699c:	06d1      	lsls	r1, r2, #27
 800699e:	bf44      	itt	mi
 80069a0:	2320      	movmi	r3, #32
 80069a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a6:	0713      	lsls	r3, r2, #28
 80069a8:	bf44      	itt	mi
 80069aa:	232b      	movmi	r3, #43	; 0x2b
 80069ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b0:	f89a 3000 	ldrb.w	r3, [sl]
 80069b4:	2b2a      	cmp	r3, #42	; 0x2a
 80069b6:	d015      	beq.n	80069e4 <_vfiprintf_r+0x13c>
 80069b8:	4654      	mov	r4, sl
 80069ba:	2000      	movs	r0, #0
 80069bc:	f04f 0c0a 	mov.w	ip, #10
 80069c0:	9a07      	ldr	r2, [sp, #28]
 80069c2:	4621      	mov	r1, r4
 80069c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c8:	3b30      	subs	r3, #48	; 0x30
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d94e      	bls.n	8006a6c <_vfiprintf_r+0x1c4>
 80069ce:	b1b0      	cbz	r0, 80069fe <_vfiprintf_r+0x156>
 80069d0:	9207      	str	r2, [sp, #28]
 80069d2:	e014      	b.n	80069fe <_vfiprintf_r+0x156>
 80069d4:	eba0 0308 	sub.w	r3, r0, r8
 80069d8:	fa09 f303 	lsl.w	r3, r9, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	46a2      	mov	sl, r4
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	e7d2      	b.n	800698a <_vfiprintf_r+0xe2>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	1d19      	adds	r1, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfbb      	ittet	lt
 80069f0:	425b      	neglt	r3, r3
 80069f2:	f042 0202 	orrlt.w	r2, r2, #2
 80069f6:	9307      	strge	r3, [sp, #28]
 80069f8:	9307      	strlt	r3, [sp, #28]
 80069fa:	bfb8      	it	lt
 80069fc:	9204      	strlt	r2, [sp, #16]
 80069fe:	7823      	ldrb	r3, [r4, #0]
 8006a00:	2b2e      	cmp	r3, #46	; 0x2e
 8006a02:	d10c      	bne.n	8006a1e <_vfiprintf_r+0x176>
 8006a04:	7863      	ldrb	r3, [r4, #1]
 8006a06:	2b2a      	cmp	r3, #42	; 0x2a
 8006a08:	d135      	bne.n	8006a76 <_vfiprintf_r+0x1ce>
 8006a0a:	9b03      	ldr	r3, [sp, #12]
 8006a0c:	3402      	adds	r4, #2
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	9203      	str	r2, [sp, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfb8      	it	lt
 8006a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006af8 <_vfiprintf_r+0x250>
 8006a22:	2203      	movs	r2, #3
 8006a24:	4650      	mov	r0, sl
 8006a26:	7821      	ldrb	r1, [r4, #0]
 8006a28:	f7ff fb14 	bl	8006054 <memchr>
 8006a2c:	b140      	cbz	r0, 8006a40 <_vfiprintf_r+0x198>
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	eba0 000a 	sub.w	r0, r0, sl
 8006a34:	fa03 f000 	lsl.w	r0, r3, r0
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	4303      	orrs	r3, r0
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a44:	2206      	movs	r2, #6
 8006a46:	482d      	ldr	r0, [pc, #180]	; (8006afc <_vfiprintf_r+0x254>)
 8006a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4c:	f7ff fb02 	bl	8006054 <memchr>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d03f      	beq.n	8006ad4 <_vfiprintf_r+0x22c>
 8006a54:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <_vfiprintf_r+0x258>)
 8006a56:	bb1b      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x1f8>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	3307      	adds	r3, #7
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	3308      	adds	r3, #8
 8006a62:	9303      	str	r3, [sp, #12]
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	443b      	add	r3, r7
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6a:	e767      	b.n	800693c <_vfiprintf_r+0x94>
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	2001      	movs	r0, #1
 8006a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a74:	e7a5      	b.n	80069c2 <_vfiprintf_r+0x11a>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f04f 0c0a 	mov.w	ip, #10
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	3401      	adds	r4, #1
 8006a80:	9305      	str	r3, [sp, #20]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a88:	3a30      	subs	r2, #48	; 0x30
 8006a8a:	2a09      	cmp	r2, #9
 8006a8c:	d903      	bls.n	8006a96 <_vfiprintf_r+0x1ee>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0c5      	beq.n	8006a1e <_vfiprintf_r+0x176>
 8006a92:	9105      	str	r1, [sp, #20]
 8006a94:	e7c3      	b.n	8006a1e <_vfiprintf_r+0x176>
 8006a96:	4604      	mov	r4, r0
 8006a98:	2301      	movs	r3, #1
 8006a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a9e:	e7f0      	b.n	8006a82 <_vfiprintf_r+0x1da>
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <_vfiprintf_r+0x25c>)
 8006aaa:	a904      	add	r1, sp, #16
 8006aac:	f7fe f882 	bl	8004bb4 <_printf_float>
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	1c78      	adds	r0, r7, #1
 8006ab4:	d1d6      	bne.n	8006a64 <_vfiprintf_r+0x1bc>
 8006ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	d405      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	059a      	lsls	r2, r3, #22
 8006ac0:	d402      	bmi.n	8006ac8 <_vfiprintf_r+0x220>
 8006ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac4:	f7ff feb6 	bl	8006834 <__retarget_lock_release_recursive>
 8006ac8:	89ab      	ldrh	r3, [r5, #12]
 8006aca:	065b      	lsls	r3, r3, #25
 8006acc:	f53f af12 	bmi.w	80068f4 <_vfiprintf_r+0x4c>
 8006ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad2:	e711      	b.n	80068f8 <_vfiprintf_r+0x50>
 8006ad4:	ab03      	add	r3, sp, #12
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4630      	mov	r0, r6
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <_vfiprintf_r+0x25c>)
 8006ade:	a904      	add	r1, sp, #16
 8006ae0:	f7fe fb04 	bl	80050ec <_printf_i>
 8006ae4:	e7e4      	b.n	8006ab0 <_vfiprintf_r+0x208>
 8006ae6:	bf00      	nop
 8006ae8:	080078b4 	.word	0x080078b4
 8006aec:	080078d4 	.word	0x080078d4
 8006af0:	08007894 	.word	0x08007894
 8006af4:	08007782 	.word	0x08007782
 8006af8:	08007788 	.word	0x08007788
 8006afc:	0800778c 	.word	0x0800778c
 8006b00:	08004bb5 	.word	0x08004bb5
 8006b04:	08006885 	.word	0x08006885

08006b08 <__swbuf_r>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	460e      	mov	r6, r1
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	4605      	mov	r5, r0
 8006b10:	b118      	cbz	r0, 8006b1a <__swbuf_r+0x12>
 8006b12:	6983      	ldr	r3, [r0, #24]
 8006b14:	b90b      	cbnz	r3, 8006b1a <__swbuf_r+0x12>
 8006b16:	f000 f9e3 	bl	8006ee0 <__sinit>
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <__swbuf_r+0x98>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	d12b      	bne.n	8006b78 <__swbuf_r+0x70>
 8006b20:	686c      	ldr	r4, [r5, #4]
 8006b22:	69a3      	ldr	r3, [r4, #24]
 8006b24:	60a3      	str	r3, [r4, #8]
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	071a      	lsls	r2, r3, #28
 8006b2a:	d52f      	bpl.n	8006b8c <__swbuf_r+0x84>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	b36b      	cbz	r3, 8006b8c <__swbuf_r+0x84>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	b2f6      	uxtb	r6, r6
 8006b36:	1ac0      	subs	r0, r0, r3
 8006b38:	6963      	ldr	r3, [r4, #20]
 8006b3a:	4637      	mov	r7, r6
 8006b3c:	4283      	cmp	r3, r0
 8006b3e:	dc04      	bgt.n	8006b4a <__swbuf_r+0x42>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f938 	bl	8006db8 <_fflush_r>
 8006b48:	bb30      	cbnz	r0, 8006b98 <__swbuf_r+0x90>
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	60a3      	str	r3, [r4, #8]
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	701e      	strb	r6, [r3, #0]
 8006b5a:	6963      	ldr	r3, [r4, #20]
 8006b5c:	4283      	cmp	r3, r0
 8006b5e:	d004      	beq.n	8006b6a <__swbuf_r+0x62>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d506      	bpl.n	8006b74 <__swbuf_r+0x6c>
 8006b66:	2e0a      	cmp	r6, #10
 8006b68:	d104      	bne.n	8006b74 <__swbuf_r+0x6c>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f923 	bl	8006db8 <_fflush_r>
 8006b72:	b988      	cbnz	r0, 8006b98 <__swbuf_r+0x90>
 8006b74:	4638      	mov	r0, r7
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <__swbuf_r+0x9c>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <__swbuf_r+0x7a>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7cf      	b.n	8006b22 <__swbuf_r+0x1a>
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <__swbuf_r+0xa0>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7ca      	b.n	8006b22 <__swbuf_r+0x1a>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f81a 	bl	8006bc8 <__swsetup_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0cb      	beq.n	8006b30 <__swbuf_r+0x28>
 8006b98:	f04f 37ff 	mov.w	r7, #4294967295
 8006b9c:	e7ea      	b.n	8006b74 <__swbuf_r+0x6c>
 8006b9e:	bf00      	nop
 8006ba0:	080078b4 	.word	0x080078b4
 8006ba4:	080078d4 	.word	0x080078d4
 8006ba8:	08007894 	.word	0x08007894

08006bac <__ascii_wctomb>:
 8006bac:	4603      	mov	r3, r0
 8006bae:	4608      	mov	r0, r1
 8006bb0:	b141      	cbz	r1, 8006bc4 <__ascii_wctomb+0x18>
 8006bb2:	2aff      	cmp	r2, #255	; 0xff
 8006bb4:	d904      	bls.n	8006bc0 <__ascii_wctomb+0x14>
 8006bb6:	228a      	movs	r2, #138	; 0x8a
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	4770      	bx	lr
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	700a      	strb	r2, [r1, #0]
 8006bc4:	4770      	bx	lr
	...

08006bc8 <__swsetup_r>:
 8006bc8:	4b32      	ldr	r3, [pc, #200]	; (8006c94 <__swsetup_r+0xcc>)
 8006bca:	b570      	push	{r4, r5, r6, lr}
 8006bcc:	681d      	ldr	r5, [r3, #0]
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	b125      	cbz	r5, 8006bde <__swsetup_r+0x16>
 8006bd4:	69ab      	ldr	r3, [r5, #24]
 8006bd6:	b913      	cbnz	r3, 8006bde <__swsetup_r+0x16>
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 f981 	bl	8006ee0 <__sinit>
 8006bde:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <__swsetup_r+0xd0>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d10f      	bne.n	8006c04 <__swsetup_r+0x3c>
 8006be4:	686c      	ldr	r4, [r5, #4]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bec:	0719      	lsls	r1, r3, #28
 8006bee:	d42c      	bmi.n	8006c4a <__swsetup_r+0x82>
 8006bf0:	06dd      	lsls	r5, r3, #27
 8006bf2:	d411      	bmi.n	8006c18 <__swsetup_r+0x50>
 8006bf4:	2309      	movs	r3, #9
 8006bf6:	6033      	str	r3, [r6, #0]
 8006bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	e03e      	b.n	8006c82 <__swsetup_r+0xba>
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <__swsetup_r+0xd4>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d101      	bne.n	8006c0e <__swsetup_r+0x46>
 8006c0a:	68ac      	ldr	r4, [r5, #8]
 8006c0c:	e7eb      	b.n	8006be6 <__swsetup_r+0x1e>
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <__swsetup_r+0xd8>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	bf08      	it	eq
 8006c14:	68ec      	ldreq	r4, [r5, #12]
 8006c16:	e7e6      	b.n	8006be6 <__swsetup_r+0x1e>
 8006c18:	0758      	lsls	r0, r3, #29
 8006c1a:	d512      	bpl.n	8006c42 <__swsetup_r+0x7a>
 8006c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1e:	b141      	cbz	r1, 8006c32 <__swsetup_r+0x6a>
 8006c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c24:	4299      	cmp	r1, r3
 8006c26:	d002      	beq.n	8006c2e <__swsetup_r+0x66>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7fd fe49 	bl	80048c0 <_free_r>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6363      	str	r3, [r4, #52]	; 0x34
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b94b      	cbnz	r3, 8006c62 <__swsetup_r+0x9a>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c58:	d003      	beq.n	8006c62 <__swsetup_r+0x9a>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 fa01 	bl	8007064 <__smakebuf_r>
 8006c62:	89a0      	ldrh	r0, [r4, #12]
 8006c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c68:	f010 0301 	ands.w	r3, r0, #1
 8006c6c:	d00a      	beq.n	8006c84 <__swsetup_r+0xbc>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60a3      	str	r3, [r4, #8]
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	425b      	negs	r3, r3
 8006c76:	61a3      	str	r3, [r4, #24]
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	b943      	cbnz	r3, 8006c8e <__swsetup_r+0xc6>
 8006c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c80:	d1ba      	bne.n	8006bf8 <__swsetup_r+0x30>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	0781      	lsls	r1, r0, #30
 8006c86:	bf58      	it	pl
 8006c88:	6963      	ldrpl	r3, [r4, #20]
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	e7f4      	b.n	8006c78 <__swsetup_r+0xb0>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e7f7      	b.n	8006c82 <__swsetup_r+0xba>
 8006c92:	bf00      	nop
 8006c94:	2000000c 	.word	0x2000000c
 8006c98:	080078b4 	.word	0x080078b4
 8006c9c:	080078d4 	.word	0x080078d4
 8006ca0:	08007894 	.word	0x08007894

08006ca4 <abort>:
 8006ca4:	2006      	movs	r0, #6
 8006ca6:	b508      	push	{r3, lr}
 8006ca8:	f000 fa44 	bl	8007134 <raise>
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7fa fded 	bl	800188c <_exit>
	...

08006cb4 <__sflush_r>:
 8006cb4:	898a      	ldrh	r2, [r1, #12]
 8006cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb8:	4605      	mov	r5, r0
 8006cba:	0710      	lsls	r0, r2, #28
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	d457      	bmi.n	8006d70 <__sflush_r+0xbc>
 8006cc0:	684b      	ldr	r3, [r1, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dc04      	bgt.n	8006cd0 <__sflush_r+0x1c>
 8006cc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc01      	bgt.n	8006cd0 <__sflush_r+0x1c>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d0fa      	beq.n	8006ccc <__sflush_r+0x18>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cdc:	682f      	ldr	r7, [r5, #0]
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	d032      	beq.n	8006d48 <__sflush_r+0x94>
 8006ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	075a      	lsls	r2, r3, #29
 8006ce8:	d505      	bpl.n	8006cf6 <__sflush_r+0x42>
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	1ac0      	subs	r0, r0, r3
 8006cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf0:	b10b      	cbz	r3, 8006cf6 <__sflush_r+0x42>
 8006cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	6a21      	ldr	r1, [r4, #32]
 8006d00:	47b0      	blx	r6
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	d106      	bne.n	8006d16 <__sflush_r+0x62>
 8006d08:	6829      	ldr	r1, [r5, #0]
 8006d0a:	291d      	cmp	r1, #29
 8006d0c:	d82c      	bhi.n	8006d68 <__sflush_r+0xb4>
 8006d0e:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <__sflush_r+0x100>)
 8006d10:	40ca      	lsrs	r2, r1
 8006d12:	07d6      	lsls	r6, r2, #31
 8006d14:	d528      	bpl.n	8006d68 <__sflush_r+0xb4>
 8006d16:	2200      	movs	r2, #0
 8006d18:	6062      	str	r2, [r4, #4]
 8006d1a:	6922      	ldr	r2, [r4, #16]
 8006d1c:	04d9      	lsls	r1, r3, #19
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	d504      	bpl.n	8006d2c <__sflush_r+0x78>
 8006d22:	1c42      	adds	r2, r0, #1
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0x76>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b903      	cbnz	r3, 8006d2c <__sflush_r+0x78>
 8006d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2e:	602f      	str	r7, [r5, #0]
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d0cb      	beq.n	8006ccc <__sflush_r+0x18>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__sflush_r+0x8e>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7fd fdbf 	bl	80048c0 <_free_r>
 8006d42:	2000      	movs	r0, #0
 8006d44:	6360      	str	r0, [r4, #52]	; 0x34
 8006d46:	e7c2      	b.n	8006cce <__sflush_r+0x1a>
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b0      	blx	r6
 8006d50:	1c41      	adds	r1, r0, #1
 8006d52:	d1c7      	bne.n	8006ce4 <__sflush_r+0x30>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c4      	beq.n	8006ce4 <__sflush_r+0x30>
 8006d5a:	2b1d      	cmp	r3, #29
 8006d5c:	d001      	beq.n	8006d62 <__sflush_r+0xae>
 8006d5e:	2b16      	cmp	r3, #22
 8006d60:	d101      	bne.n	8006d66 <__sflush_r+0xb2>
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	e7b2      	b.n	8006ccc <__sflush_r+0x18>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7ae      	b.n	8006cce <__sflush_r+0x1a>
 8006d70:	690f      	ldr	r7, [r1, #16]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d0aa      	beq.n	8006ccc <__sflush_r+0x18>
 8006d76:	0793      	lsls	r3, r2, #30
 8006d78:	bf18      	it	ne
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	680e      	ldr	r6, [r1, #0]
 8006d7e:	bf08      	it	eq
 8006d80:	694b      	ldreq	r3, [r1, #20]
 8006d82:	1bf6      	subs	r6, r6, r7
 8006d84:	600f      	str	r7, [r1, #0]
 8006d86:	608b      	str	r3, [r1, #8]
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	dd9f      	ble.n	8006ccc <__sflush_r+0x18>
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	463a      	mov	r2, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	6a21      	ldr	r1, [r4, #32]
 8006d94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d98:	47e0      	blx	ip
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	dc06      	bgt.n	8006dac <__sflush_r+0xf8>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e790      	b.n	8006cce <__sflush_r+0x1a>
 8006dac:	4407      	add	r7, r0
 8006dae:	1a36      	subs	r6, r6, r0
 8006db0:	e7ea      	b.n	8006d88 <__sflush_r+0xd4>
 8006db2:	bf00      	nop
 8006db4:	20400001 	.word	0x20400001

08006db8 <_fflush_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	690b      	ldr	r3, [r1, #16]
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	b913      	cbnz	r3, 8006dc8 <_fflush_r+0x10>
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	b118      	cbz	r0, 8006dd2 <_fflush_r+0x1a>
 8006dca:	6983      	ldr	r3, [r0, #24]
 8006dcc:	b90b      	cbnz	r3, 8006dd2 <_fflush_r+0x1a>
 8006dce:	f000 f887 	bl	8006ee0 <__sinit>
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <_fflush_r+0x6c>)
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	d11b      	bne.n	8006e10 <_fflush_r+0x58>
 8006dd8:	686c      	ldr	r4, [r5, #4]
 8006dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0ef      	beq.n	8006dc2 <_fflush_r+0xa>
 8006de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de4:	07d0      	lsls	r0, r2, #31
 8006de6:	d404      	bmi.n	8006df2 <_fflush_r+0x3a>
 8006de8:	0599      	lsls	r1, r3, #22
 8006dea:	d402      	bmi.n	8006df2 <_fflush_r+0x3a>
 8006dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dee:	f7ff fd20 	bl	8006832 <__retarget_lock_acquire_recursive>
 8006df2:	4628      	mov	r0, r5
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7ff ff5d 	bl	8006cb4 <__sflush_r>
 8006dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	07da      	lsls	r2, r3, #31
 8006e00:	d4e0      	bmi.n	8006dc4 <_fflush_r+0xc>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	059b      	lsls	r3, r3, #22
 8006e06:	d4dd      	bmi.n	8006dc4 <_fflush_r+0xc>
 8006e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0a:	f7ff fd13 	bl	8006834 <__retarget_lock_release_recursive>
 8006e0e:	e7d9      	b.n	8006dc4 <_fflush_r+0xc>
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <_fflush_r+0x70>)
 8006e12:	429c      	cmp	r4, r3
 8006e14:	d101      	bne.n	8006e1a <_fflush_r+0x62>
 8006e16:	68ac      	ldr	r4, [r5, #8]
 8006e18:	e7df      	b.n	8006dda <_fflush_r+0x22>
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <_fflush_r+0x74>)
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf08      	it	eq
 8006e20:	68ec      	ldreq	r4, [r5, #12]
 8006e22:	e7da      	b.n	8006dda <_fflush_r+0x22>
 8006e24:	080078b4 	.word	0x080078b4
 8006e28:	080078d4 	.word	0x080078d4
 8006e2c:	08007894 	.word	0x08007894

08006e30 <std>:
 8006e30:	2300      	movs	r3, #0
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e3e:	6083      	str	r3, [r0, #8]
 8006e40:	8181      	strh	r1, [r0, #12]
 8006e42:	6643      	str	r3, [r0, #100]	; 0x64
 8006e44:	81c2      	strh	r2, [r0, #14]
 8006e46:	6183      	str	r3, [r0, #24]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	305c      	adds	r0, #92	; 0x5c
 8006e4e:	f7fd fd2f 	bl	80048b0 <memset>
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x38>)
 8006e54:	6224      	str	r4, [r4, #32]
 8006e56:	6263      	str	r3, [r4, #36]	; 0x24
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <std+0x3c>)
 8006e5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <std+0x40>)
 8006e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <std+0x44>)
 8006e62:	6323      	str	r3, [r4, #48]	; 0x30
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	bf00      	nop
 8006e68:	0800716d 	.word	0x0800716d
 8006e6c:	0800718f 	.word	0x0800718f
 8006e70:	080071c7 	.word	0x080071c7
 8006e74:	080071eb 	.word	0x080071eb

08006e78 <_cleanup_r>:
 8006e78:	4901      	ldr	r1, [pc, #4]	; (8006e80 <_cleanup_r+0x8>)
 8006e7a:	f000 b8af 	b.w	8006fdc <_fwalk_reent>
 8006e7e:	bf00      	nop
 8006e80:	08006db9 	.word	0x08006db9

08006e84 <__sfmoreglue>:
 8006e84:	2268      	movs	r2, #104	; 0x68
 8006e86:	b570      	push	{r4, r5, r6, lr}
 8006e88:	1e4d      	subs	r5, r1, #1
 8006e8a:	4355      	muls	r5, r2
 8006e8c:	460e      	mov	r6, r1
 8006e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e92:	f7fd fd7d 	bl	8004990 <_malloc_r>
 8006e96:	4604      	mov	r4, r0
 8006e98:	b140      	cbz	r0, 8006eac <__sfmoreglue+0x28>
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea0:	300c      	adds	r0, #12
 8006ea2:	60a0      	str	r0, [r4, #8]
 8006ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ea8:	f7fd fd02 	bl	80048b0 <memset>
 8006eac:	4620      	mov	r0, r4
 8006eae:	bd70      	pop	{r4, r5, r6, pc}

08006eb0 <__sfp_lock_acquire>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__sfp_lock_acquire+0x8>)
 8006eb2:	f7ff bcbe 	b.w	8006832 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	20000291 	.word	0x20000291

08006ebc <__sfp_lock_release>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__sfp_lock_release+0x8>)
 8006ebe:	f7ff bcb9 	b.w	8006834 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000291 	.word	0x20000291

08006ec8 <__sinit_lock_acquire>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sinit_lock_acquire+0x8>)
 8006eca:	f7ff bcb2 	b.w	8006832 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20000292 	.word	0x20000292

08006ed4 <__sinit_lock_release>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__sinit_lock_release+0x8>)
 8006ed6:	f7ff bcad 	b.w	8006834 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	20000292 	.word	0x20000292

08006ee0 <__sinit>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	f7ff fff0 	bl	8006ec8 <__sinit_lock_acquire>
 8006ee8:	69a3      	ldr	r3, [r4, #24]
 8006eea:	b11b      	cbz	r3, 8006ef4 <__sinit+0x14>
 8006eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef0:	f7ff bff0 	b.w	8006ed4 <__sinit_lock_release>
 8006ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <__sinit+0x68>)
 8006efc:	4a13      	ldr	r2, [pc, #76]	; (8006f4c <__sinit+0x6c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f02:	42a3      	cmp	r3, r4
 8006f04:	bf08      	it	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bf08      	it	eq
 8006f0c:	61a3      	streq	r3, [r4, #24]
 8006f0e:	f000 f81f 	bl	8006f50 <__sfp>
 8006f12:	6060      	str	r0, [r4, #4]
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f81b 	bl	8006f50 <__sfp>
 8006f1a:	60a0      	str	r0, [r4, #8]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f817 	bl	8006f50 <__sfp>
 8006f22:	2200      	movs	r2, #0
 8006f24:	2104      	movs	r1, #4
 8006f26:	60e0      	str	r0, [r4, #12]
 8006f28:	6860      	ldr	r0, [r4, #4]
 8006f2a:	f7ff ff81 	bl	8006e30 <std>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2109      	movs	r1, #9
 8006f32:	68a0      	ldr	r0, [r4, #8]
 8006f34:	f7ff ff7c 	bl	8006e30 <std>
 8006f38:	2202      	movs	r2, #2
 8006f3a:	2112      	movs	r1, #18
 8006f3c:	68e0      	ldr	r0, [r4, #12]
 8006f3e:	f7ff ff77 	bl	8006e30 <std>
 8006f42:	2301      	movs	r3, #1
 8006f44:	61a3      	str	r3, [r4, #24]
 8006f46:	e7d1      	b.n	8006eec <__sinit+0xc>
 8006f48:	08007518 	.word	0x08007518
 8006f4c:	08006e79 	.word	0x08006e79

08006f50 <__sfp>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	4607      	mov	r7, r0
 8006f54:	f7ff ffac 	bl	8006eb0 <__sfp_lock_acquire>
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <__sfp+0x84>)
 8006f5a:	681e      	ldr	r6, [r3, #0]
 8006f5c:	69b3      	ldr	r3, [r6, #24]
 8006f5e:	b913      	cbnz	r3, 8006f66 <__sfp+0x16>
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff ffbd 	bl	8006ee0 <__sinit>
 8006f66:	3648      	adds	r6, #72	; 0x48
 8006f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	d503      	bpl.n	8006f78 <__sfp+0x28>
 8006f70:	6833      	ldr	r3, [r6, #0]
 8006f72:	b30b      	cbz	r3, 8006fb8 <__sfp+0x68>
 8006f74:	6836      	ldr	r6, [r6, #0]
 8006f76:	e7f7      	b.n	8006f68 <__sfp+0x18>
 8006f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f7c:	b9d5      	cbnz	r5, 8006fb4 <__sfp+0x64>
 8006f7e:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <__sfp+0x88>)
 8006f80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f84:	60e3      	str	r3, [r4, #12]
 8006f86:	6665      	str	r5, [r4, #100]	; 0x64
 8006f88:	f7ff fc52 	bl	8006830 <__retarget_lock_init_recursive>
 8006f8c:	f7ff ff96 	bl	8006ebc <__sfp_lock_release>
 8006f90:	2208      	movs	r2, #8
 8006f92:	4629      	mov	r1, r5
 8006f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f9c:	6025      	str	r5, [r4, #0]
 8006f9e:	61a5      	str	r5, [r4, #24]
 8006fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fa4:	f7fd fc84 	bl	80048b0 <memset>
 8006fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	3468      	adds	r4, #104	; 0x68
 8006fb6:	e7d9      	b.n	8006f6c <__sfp+0x1c>
 8006fb8:	2104      	movs	r1, #4
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f7ff ff62 	bl	8006e84 <__sfmoreglue>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	6030      	str	r0, [r6, #0]
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d1d5      	bne.n	8006f74 <__sfp+0x24>
 8006fc8:	f7ff ff78 	bl	8006ebc <__sfp_lock_release>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	e7ee      	b.n	8006fb0 <__sfp+0x60>
 8006fd2:	bf00      	nop
 8006fd4:	08007518 	.word	0x08007518
 8006fd8:	ffff0001 	.word	0xffff0001

08006fdc <_fwalk_reent>:
 8006fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	4688      	mov	r8, r1
 8006fe4:	2700      	movs	r7, #0
 8006fe6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fee:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff2:	d505      	bpl.n	8007000 <_fwalk_reent+0x24>
 8006ff4:	6824      	ldr	r4, [r4, #0]
 8006ff6:	2c00      	cmp	r4, #0
 8006ff8:	d1f7      	bne.n	8006fea <_fwalk_reent+0xe>
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007000:	89ab      	ldrh	r3, [r5, #12]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d907      	bls.n	8007016 <_fwalk_reent+0x3a>
 8007006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800700a:	3301      	adds	r3, #1
 800700c:	d003      	beq.n	8007016 <_fwalk_reent+0x3a>
 800700e:	4629      	mov	r1, r5
 8007010:	4630      	mov	r0, r6
 8007012:	47c0      	blx	r8
 8007014:	4307      	orrs	r7, r0
 8007016:	3568      	adds	r5, #104	; 0x68
 8007018:	e7e9      	b.n	8006fee <_fwalk_reent+0x12>

0800701a <__swhatbuf_r>:
 800701a:	b570      	push	{r4, r5, r6, lr}
 800701c:	460e      	mov	r6, r1
 800701e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007022:	4614      	mov	r4, r2
 8007024:	2900      	cmp	r1, #0
 8007026:	461d      	mov	r5, r3
 8007028:	b096      	sub	sp, #88	; 0x58
 800702a:	da08      	bge.n	800703e <__swhatbuf_r+0x24>
 800702c:	2200      	movs	r2, #0
 800702e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	061a      	lsls	r2, r3, #24
 8007036:	d410      	bmi.n	800705a <__swhatbuf_r+0x40>
 8007038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800703c:	e00e      	b.n	800705c <__swhatbuf_r+0x42>
 800703e:	466a      	mov	r2, sp
 8007040:	f000 f8fa 	bl	8007238 <_fstat_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	dbf1      	blt.n	800702c <__swhatbuf_r+0x12>
 8007048:	9a01      	ldr	r2, [sp, #4]
 800704a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800704e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007052:	425a      	negs	r2, r3
 8007054:	415a      	adcs	r2, r3
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	e7ee      	b.n	8007038 <__swhatbuf_r+0x1e>
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	2000      	movs	r0, #0
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	b016      	add	sp, #88	; 0x58
 8007062:	bd70      	pop	{r4, r5, r6, pc}

08007064 <__smakebuf_r>:
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007068:	079d      	lsls	r5, r3, #30
 800706a:	4606      	mov	r6, r0
 800706c:	460c      	mov	r4, r1
 800706e:	d507      	bpl.n	8007080 <__smakebuf_r+0x1c>
 8007070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	2301      	movs	r3, #1
 800707a:	6163      	str	r3, [r4, #20]
 800707c:	b002      	add	sp, #8
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	466a      	mov	r2, sp
 8007082:	ab01      	add	r3, sp, #4
 8007084:	f7ff ffc9 	bl	800701a <__swhatbuf_r>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	4605      	mov	r5, r0
 800708c:	4630      	mov	r0, r6
 800708e:	f7fd fc7f 	bl	8004990 <_malloc_r>
 8007092:	b948      	cbnz	r0, 80070a8 <__smakebuf_r+0x44>
 8007094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d4ef      	bmi.n	800707c <__smakebuf_r+0x18>
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	e7e3      	b.n	8007070 <__smakebuf_r+0xc>
 80070a8:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <__smakebuf_r+0x7c>)
 80070aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	6020      	str	r0, [r4, #0]
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	6120      	str	r0, [r4, #16]
 80070ba:	6163      	str	r3, [r4, #20]
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	b15b      	cbz	r3, 80070d8 <__smakebuf_r+0x74>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c6:	f000 f8c9 	bl	800725c <_isatty_r>
 80070ca:	b128      	cbz	r0, 80070d8 <__smakebuf_r+0x74>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	f043 0301 	orr.w	r3, r3, #1
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	89a0      	ldrh	r0, [r4, #12]
 80070da:	4305      	orrs	r5, r0
 80070dc:	81a5      	strh	r5, [r4, #12]
 80070de:	e7cd      	b.n	800707c <__smakebuf_r+0x18>
 80070e0:	08006e79 	.word	0x08006e79

080070e4 <_raise_r>:
 80070e4:	291f      	cmp	r1, #31
 80070e6:	b538      	push	{r3, r4, r5, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	d904      	bls.n	80070f8 <_raise_r+0x14>
 80070ee:	2316      	movs	r3, #22
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	f04f 30ff 	mov.w	r0, #4294967295
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070fa:	b112      	cbz	r2, 8007102 <_raise_r+0x1e>
 80070fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007100:	b94b      	cbnz	r3, 8007116 <_raise_r+0x32>
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f830 	bl	8007168 <_getpid_r>
 8007108:	462a      	mov	r2, r5
 800710a:	4601      	mov	r1, r0
 800710c:	4620      	mov	r0, r4
 800710e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007112:	f000 b817 	b.w	8007144 <_kill_r>
 8007116:	2b01      	cmp	r3, #1
 8007118:	d00a      	beq.n	8007130 <_raise_r+0x4c>
 800711a:	1c59      	adds	r1, r3, #1
 800711c:	d103      	bne.n	8007126 <_raise_r+0x42>
 800711e:	2316      	movs	r3, #22
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	2001      	movs	r0, #1
 8007124:	e7e7      	b.n	80070f6 <_raise_r+0x12>
 8007126:	2400      	movs	r4, #0
 8007128:	4628      	mov	r0, r5
 800712a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800712e:	4798      	blx	r3
 8007130:	2000      	movs	r0, #0
 8007132:	e7e0      	b.n	80070f6 <_raise_r+0x12>

08007134 <raise>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <raise+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f7ff bfd3 	b.w	80070e4 <_raise_r>
 800713e:	bf00      	nop
 8007140:	2000000c 	.word	0x2000000c

08007144 <_kill_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	2300      	movs	r3, #0
 8007148:	4d06      	ldr	r5, [pc, #24]	; (8007164 <_kill_r+0x20>)
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	f7fa fb8b 	bl	800186c <_kill>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d102      	bne.n	8007160 <_kill_r+0x1c>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b103      	cbz	r3, 8007160 <_kill_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	2000028c 	.word	0x2000028c

08007168 <_getpid_r>:
 8007168:	f7fa bb79 	b.w	800185e <_getpid>

0800716c <__sread>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007174:	f000 f894 	bl	80072a0 <_read_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	bfab      	itete	ge
 800717c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800717e:	89a3      	ldrhlt	r3, [r4, #12]
 8007180:	181b      	addge	r3, r3, r0
 8007182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007186:	bfac      	ite	ge
 8007188:	6563      	strge	r3, [r4, #84]	; 0x54
 800718a:	81a3      	strhlt	r3, [r4, #12]
 800718c:	bd10      	pop	{r4, pc}

0800718e <__swrite>:
 800718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007192:	461f      	mov	r7, r3
 8007194:	898b      	ldrh	r3, [r1, #12]
 8007196:	4605      	mov	r5, r0
 8007198:	05db      	lsls	r3, r3, #23
 800719a:	460c      	mov	r4, r1
 800719c:	4616      	mov	r6, r2
 800719e:	d505      	bpl.n	80071ac <__swrite+0x1e>
 80071a0:	2302      	movs	r3, #2
 80071a2:	2200      	movs	r2, #0
 80071a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a8:	f000 f868 	bl	800727c <_lseek_r>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	4632      	mov	r2, r6
 80071b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	4628      	mov	r0, r5
 80071b8:	463b      	mov	r3, r7
 80071ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	f000 b817 	b.w	80071f4 <_write_r>

080071c6 <__sseek>:
 80071c6:	b510      	push	{r4, lr}
 80071c8:	460c      	mov	r4, r1
 80071ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ce:	f000 f855 	bl	800727c <_lseek_r>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	bf15      	itete	ne
 80071d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071e2:	81a3      	strheq	r3, [r4, #12]
 80071e4:	bf18      	it	ne
 80071e6:	81a3      	strhne	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__sclose>:
 80071ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ee:	f000 b813 	b.w	8007218 <_close_r>
	...

080071f4 <_write_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	2200      	movs	r2, #0
 80071fe:	4d05      	ldr	r5, [pc, #20]	; (8007214 <_write_r+0x20>)
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7fa fb69 	bl	80018da <_write>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_write_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_write_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	2000028c 	.word	0x2000028c

08007218 <_close_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	2300      	movs	r3, #0
 800721c:	4d05      	ldr	r5, [pc, #20]	; (8007234 <_close_r+0x1c>)
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fa fb75 	bl	8001912 <_close>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_close_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_close_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	2000028c 	.word	0x2000028c

08007238 <_fstat_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	2300      	movs	r3, #0
 800723c:	4d06      	ldr	r5, [pc, #24]	; (8007258 <_fstat_r+0x20>)
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	4611      	mov	r1, r2
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	f7fa fb6f 	bl	8001928 <_fstat>
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	d102      	bne.n	8007254 <_fstat_r+0x1c>
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	b103      	cbz	r3, 8007254 <_fstat_r+0x1c>
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	2000028c 	.word	0x2000028c

0800725c <_isatty_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	2300      	movs	r3, #0
 8007260:	4d05      	ldr	r5, [pc, #20]	; (8007278 <_isatty_r+0x1c>)
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7fa fb6d 	bl	8001946 <_isatty>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_isatty_r+0x1a>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_isatty_r+0x1a>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	2000028c 	.word	0x2000028c

0800727c <_lseek_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	4611      	mov	r1, r2
 8007284:	2200      	movs	r2, #0
 8007286:	4d05      	ldr	r5, [pc, #20]	; (800729c <_lseek_r+0x20>)
 8007288:	602a      	str	r2, [r5, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f7fa fb65 	bl	800195a <_lseek>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_lseek_r+0x1e>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_lseek_r+0x1e>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	2000028c 	.word	0x2000028c

080072a0 <_read_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	4d05      	ldr	r5, [pc, #20]	; (80072c0 <_read_r+0x20>)
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7fa faf6 	bl	80018a0 <_read>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_read_r+0x1e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_read_r+0x1e>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	2000028c 	.word	0x2000028c

080072c4 <_init>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr

080072d0 <_fini>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr
